
Especializacion/Robot_RL/out/Robot_RL.elf:     file format elf32-littlearm
Especializacion/Robot_RL/out/Robot_RL.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0011ed

Program Header:
0x70000001 off    0x0001c298 vaddr 0x1a00c298 paddr 0x1a00c298 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000038bc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000c2a0 memsz 0x0000c2a0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00c2a0 align 2**16
         filesz 0x00000a84 memsz 0x00000a84 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c294  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a84  10000000  1a00c2a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a84  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a84  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a84  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a84  2**2
                  CONTENTS
  6 .bss          00002e34  10000a88  10000a88  00000a88  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a84  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a84  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a84  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a84  2**2
                  CONTENTS
 11 .init_array   00000004  1a00c294  1a00c294  0001c294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00c298  1a00c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020a84  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020a84  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020a84  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020a84  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020a84  2**2
                  CONTENTS
 18 .noinit       00000000  100038bc  100038bc  00020a84  2**2
                  CONTENTS
 19 .debug_info   000508f2  00000000  00000000  00020a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00009ac3  00000000  00000000  00071376  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000115ce  00000000  00000000  0007ae39  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001620  00000000  00000000  0008c407  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001878  00000000  00000000  0008da27  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00016248  00000000  00000000  0008f29f  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0002bb97  00000000  00000000  000a54e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00032bf1  00000000  00000000  000d107e  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00103c6f  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00103cd7  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00004b58  00000000  00000000  00103d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a88 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00c294 l    d  .init_array	00000000 .init_array
1a00c298 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100038bc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003fec l     F .text	000000a4 uartProcessIRQ
100034c4 l     O .bss	00000004 rxIsrCallbackUART0
100034c8 l     O .bss	00000004 rxIsrCallbackUART2
100034cc l     O .bss	00000004 rxIsrCallbackUART3
100034d0 l     O .bss	00000004 txIsrCallbackUART0
100034d4 l     O .bss	00000004 txIsrCallbackUART2
100034d8 l     O .bss	00000004 txIsrCallbackUART3
1a00bec8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 motor.c
10000000 l     O .data	00000001 maxVel
10000001 l     O .data	00000001 minVel
00000000 l    df *ABS*	00000000 uart232_esp01.c
00000000 l    df *ABS*	00000000 laser.c
00000000 l    df *ABS*	00000000 bumpers.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 fsm_robot.c
00000000 l    df *ABS*	00000000 Robot_RL.c
00000000 l    df *ABS*	00000000 system.c
10000a88 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
10000a90 l     O .bss	00002000 ucHeap
10000a8c l     O .bss	00000004 pucAlignedHeap.11524
10002a90 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a0013c6 l     F .text	0000001e prvIsQueueFull
1a0013e4 l     F .text	0000001a prvIsQueueEmpty
1a0013fe l     F .text	00000076 prvCopyDataToQueue
1a001474 l     F .text	00000024 prvCopyDataFromQueue
1a001498 l     F .text	0000006e prvUnlockQueue
1a00158c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002a94 l     O .bss	00000168 uxIdleTaskStack.10813
10002bfc l     O .bss	000005a0 uxTimerTaskStack.10820
1000319c l     O .bss	00000060 xIdleTaskTCB.10812
100031fc l     O .bss	00000060 xTimerTaskTCB.10819
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001b6c l     F .text	0000002c prvResetNextTaskUnblockTime
1a001b98 l     F .text	00000090 prvInitialiseNewTask
1a001c28 l     F .text	00000068 prvInitialiseTaskLists
1a001c90 l     F .text	000000ac prvAddNewTaskToReadyList
1a001d3c l     F .text	00000038 prvDeleteTCB
1a001d74 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001dc0 l     F .text	00000028 prvIdleTask
1a001de8 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10003260 l     O .bss	00000004 pxDelayedTaskList
10003264 l     O .bss	00000004 pxOverflowDelayedTaskList
10003268 l     O .bss	0000008c pxReadyTasksLists
100032f4 l     O .bss	00000004 uxCurrentNumberOfTasks
100032f8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100032fc l     O .bss	00000004 uxPendedTicks
10003300 l     O .bss	00000004 uxSchedulerSuspended
10003304 l     O .bss	00000004 uxTaskNumber
10003308 l     O .bss	00000004 uxTopReadyPriority
1000330c l     O .bss	00000014 xDelayedTaskList1
10003320 l     O .bss	00000014 xDelayedTaskList2
10003334 l     O .bss	00000004 xNextTaskUnblockTime
10003338 l     O .bss	00000004 xNumOfOverflows
1000333c l     O .bss	00000014 xPendingReadyList
10003350 l     O .bss	00000004 xSchedulerRunning
10003354 l     O .bss	00000014 xSuspendedTaskList
10003368 l     O .bss	00000014 xTasksWaitingTermination
1000337c l     O .bss	00000004 xTickCount
10003380 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002648 l     F .text	00000020 prvGetNextExpireTime
1a002668 l     F .text	00000048 prvInsertTimerInActiveList
1a0026b0 l     F .text	00000070 prvCheckForValidListAndQueue
1a002a64 l     F .text	00000016 prvTimerTask
1a0027f0 l     F .text	00000078 prvSwitchTimerLists
1a002868 l     F .text	0000002c prvSampleTimeNow
1a002894 l     F .text	00000060 prvProcessExpiredTimer
1a0028f4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002968 l     F .text	000000fc prvProcessReceivedCommands
10003384 l     O .bss	00000004 pxCurrentTimerList
10003388 l     O .bss	00000004 pxOverflowTimerList
1000338c l     O .bss	000000a0 ucStaticTimerQueueStorage.11914
1000342c l     O .bss	00000014 xActiveTimerList1
10003440 l     O .bss	00000014 xActiveTimerList2
10003454 l     O .bss	00000004 xLastTime.11863
10003458 l     O .bss	00000050 xStaticTimerQueue.11913
100034a8 l     O .bss	00000004 xTimerQueue
100034ac l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002a7c l     F .text	00000040 prvTaskExitError
1a002abc l     F .text	00000022 prvPortStartFirstTask
1a002ae4 l     F .text	0000000e vPortEnableVFP
1a002b50 l       .text	00000000 pxCurrentTCBConst2
1a002c30 l       .text	00000000 pxCurrentTCBConst
100034b0 l     O .bss	00000001 ucMaxSysCallPriority
100034b4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002e24 l     F .text	00000044 Board_LED_Init
1a002e68 l     F .text	00000040 Board_TEC_Init
1a002ea8 l     F .text	00000040 Board_GPIO_Init
1a002ee8 l     F .text	00000030 Board_ADC_Init
1a002f18 l     F .text	00000038 Board_SPI_Init
1a002f50 l     F .text	00000024 Board_I2C_Init
1a00bd38 l     O .text	00000008 GpioButtons
1a00bd40 l     O .text	0000000c GpioLeds
1a00bd4c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00bd64 l     O .text	00000004 InitClkStates
1a00bd68 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003310 l     F .text	0000002c Chip_UART_GetIndex
1a00bddc l     O .text	00000008 UART_BClock
1a00bde4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0034ac l     F .text	00000014 Chip_ADC_GetClockIndex
1a0034c0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003588 l     F .text	000000a0 pll_calc_divs
1a003628 l     F .text	0000010c pll_get_frac
1a003734 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0039a8 l     F .text	00000022 Chip_Clock_GetDivRate
100034bc l     O .bss	00000008 audio_usb_pll_freq
1a00bdf8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00be64 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003e40 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003e54 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sct.c
1a00beac l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a0041c6 l     F .text	0000000c pwmInitTimers
1a004220 l     F .text	00000034 pwmAttach
1a004254 l     F .text	0000001c pwmDetach
10000044 l     O .data	0000000b AttachedPWMList
1a00bf10 l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a004294 l     F .text	00000030 i2cHardwareInit
1a0042c4 l     F .text	00000040 i2cHardwareRead
1a004304 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a004392 l     F .text	00000002 errorOcurred
1a004394 l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0044a0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100034dc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a0048a8 l     F .text	00000038 pcf8574TGpioPortWrite
1a0048e0 l     F .text	00000028 pcf8574TGpioWrite
1a004908 l     F .text	00000008 lcdPinSet
1a004910 l     F .text	0000002e lcdSendNibble
1a00493e l     F .text	0000001c lcdEnablePulse
1a00495c l     F .text	0000002c pcf8574TGpioPortInit
1a004988 l     F .text	00000018 pcf8574TInit
100034e0 l     O .bss	0000000a lcd
100034ea l     O .bss	00000001 pcf8574TGpioPortDirections
100034eb l     O .bss	00000001 pcf8574TGpioPortValue
10000090 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a004b40 l     F .text	00000038 mpu9250ReadRegisters
100034f0 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250_freeRTOS.c
1a004e00 l     F .text	00000080 freeRTOS_mpu9250InitializeControlStructure
1a004e80 l     F .text	00000038 freeRTOS_mpu9250ReadRegisters
1a004eb8 l     F .text	00000020 freeRTOS_mpu9250WhoAmI
1a004ed8 l     F .text	00000048 freeRTOS_mpu9250WriteRegister
1a004f20 l     F .text	00000058 freeRTOS_mpu9250ReadAK8963Registers
1a004f78 l     F .text	00000020 freeRTOS_mpu9250WhoAmIAK8963
1a004f98 l     F .text	00000078 freeRTOS_mpu9250WriteAK8963Register
1a005010 l     F .text	00000094 freeRTOS_mpu9250SetGyroRange
1a0050a4 l     F .text	000000f8 freeRTOS_mpu9250SetDlpfBandwidth
1a00519c l     F .text	000000ac freeRTOS_mpu9250SetSrd
1a00526c l     F .text	00000158 freeRTOS_mpu9250CalibrateGyro
10003648 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a005670 l     F .text	00000010 clearInterrupt
1a005680 l     F .text	0000005c serveInterrupt
10000094 l     O .data	00000048 ultrasonicSensors
1a00c008 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0065cc l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtol.c
1a007800 l     F .text	00000110 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
1a00947c l     F .text	00000084 __sbprintf
1a00c154 l     O .text	00000010 blanks.8693
1a00c164 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a0095d0 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00c278 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a00b520 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000e0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00c298 l       .init_array	00000000 __init_array_end
1a00c294 l       .bss_RAM5	00000000 __preinit_array_end
1a00c294 l       .init_array	00000000 __init_array_start
1a00c294 l       .bss_RAM5	00000000 __preinit_array_start
1a00b848 g     F .text	0000002c .hidden __aeabi_dcmpun
1a0037cc g     F .text	0000001c Chip_Clock_GetDividerSource
1a00128c g     F .text	00000012 _isatty_r
1a003dfc g     F .text	0000000e Chip_I2CM_Xfer
1a005f6c g     F .text	00000012 .hidden __aeabi_dcmple
1a0075bc g     F .text	000000ba strcpy
1a007150 g     F .text	0000009c _puts_r
1a004418 g     F .text	00000044 TIMER2_IRQHandler
1a0040c0 g     F .text	00000014 uartRxRead
1a005ea8 g     F .text	0000007a .hidden __cmpdf2
1a004344 g     F .text	0000000e i2cInit
1a00129e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a005ea8 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
10003824 g     O .bss	0000002c lcd_data
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002b98 g     F .text	0000002c vPortExitCritical
1a005a18 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a005248 g     F .text	0000000c freeRTOS_mpu9250GetGyroX_rads
1a004164 g     F .text	0000001e uartReadByte
1a007128 g     F .text	00000028 printf
1a00300a g     F .text	00000008 __stdio_init
10003898 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00b7f8 g     F .text	00000034 _wcrtomb_r
1a007260 g     F .text	00000020 __sseek
1a006628 g     F .text	00000054 __sinit
1a00b748 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001a14 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0030e4 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a003566 g     F .text	0000000c Chip_ADC_SetResolution
1a00711c g     F .text	0000000c __malloc_unlock
1a002c34 g     F .text	0000002c SysTick_Handler
1a003390 g     F .text	00000040 Chip_UART_SetBaud
1000389c g     O .bss	00000001 __lock___arc4random_mutex
1a0011e8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002fac g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a00a9f0 g     F .text	000000ce memmove
1a002bd0 g     F .text	00000064 PendSV_Handler
1a0017c0 g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00aac0 g     F .text	0000004c _Balloc
1a00c2a0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000360 g     F .text	00000094 motor_init
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a003e2e g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a005e98 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a004352 g     F .text	00000028 i2cRead
1000325c g     O .bss	00000004 pxCurrentTCB
1a001282 g     F .text	0000000a _fstat_r
53ff66a2 g       *ABS*	00000000 __valid_user_code_checksum
1a000548 g     F .text	00000044 motorEnable
1a00c2a0 g       .ARM.exidx	00000000 _etext
1a005f34 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0024cc g     F .text	00000018 vTaskInternalSetTimeOutState
1a00445c g     F .text	00000044 TIMER3_IRQHandler
1a003a4a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002c98 g     F .text	00000110 xPortStartScheduler
1a006f3c g     F .text	00000134 memcpy
1a0023d8 g     F .text	00000030 vTaskPlaceOnEventList
1a005f24 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00661c g     F .text	0000000c _cleanup_r
1a0059a0 g     F .text	00000022 .hidden __floatsidf
1a002c60  w    F .text	00000038 vPortSetupTimerInterrupt
1a003290 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a005ea0 g     F .text	00000082 .hidden __ltdf2
1a0003f4 g     F .text	00000154 motorSpeed
1a006048 g     F .text	00000000 .hidden __aeabi_uldivmod
100038bc g       .noinit	00000000 _noinit
1a0071ec g     F .text	00000010 puts
10000003 g     O .data	00000001 estado
1a0013b0 g     F .text	00000016 vPortFree
1a00419c g     F .text	00000016 uartWriteString
10003890 g     O .bss	00000004 SystemCoreClock
1a00333c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002da8 g     F .text	0000005c vPortValidateInterruptPriority
1a00c1b0 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a003ac8 g     F .text	0000004c Chip_Clock_GetRate
1a001a82 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
100037d0 g     O .bss	00000004 __malloc_top_pad
1a00304c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000d64 g     F .text	00000060 itoa
1a005980 g     F .text	0000001e .hidden __aeabi_ui2d
1a00a854 g     F .text	00000008 _localeconv_r
1a000b08 g     F .text	00000082 lcd_display
1a00ac4c g     F .text	00000012 __i2b
1a00a54c g     F .text	00000308 __sfvwrite_r
1a003260 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a006078 g     F .text	000002d0 .hidden __udivmoddi4
1a0056fc g     F .text	00000000 .hidden __aeabi_drsub
1a001320 g     F .text	00000020 _sbrk_r
1a00bd34 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a003fa0 g     F .text	0000004c Sct_EnablePwmFor
1a000cd6 g     F .text	0000008c obtener_pwm
1a0012a8 g     F .text	0000004e _read_r
1a001a7c g     F .text	00000006 vListInitialiseItem
1a005f58 g     F .text	00000012 .hidden __aeabi_dcmplt
1a006354 g     F .text	000000ce _fclose_r
1a0056e6 g     F .text	0000000a GPIO1_IRQHandler
1a001890 g     F .text	0000015c xQueueReceive
10003850 g     O .bss	00000040 xQueueRegistry
100037c8 g     O .bss	00000004 __malloc_max_sbrked_mem
1a004a6a g     F .text	00000014 lcdCursorSet
1a0059c4 g     F .text	00000042 .hidden __extendsfdf2
1a005cc8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001b0c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005708 g     F .text	00000276 .hidden __adddf3
1a004090 g     F .text	00000018 uartRxReady
1a00c298 g       .ARM.exidx	00000000 __exidx_start
100038a0 g     O .bss	00000001 __lock___env_recursive_mutex
1a005a74 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
100038a4 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00b0d4 g     F .text	0000036c _realloc_r
1a006974 g     F .text	00000048 __libc_init_array
1a00b6ac g     F .text	00000064 _fputwc_r
1a00c188 g     O .text	00000028 __mprec_bigtens
1a005980 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00aee4 g     F .text	00000038 __mcmp
1a001340 g     F .text	00000070 pvPortMalloc
1a003f48 g     F .text	00000024 Sct_Init
1a002fc8 g     F .text	00000030 Board_Init
1a001276  w    F .text	00000002 _init
1a001a66 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a007910 g     F .text	00000018 strtol
1a005fa8 g     F .text	0000009e .hidden __aeabi_d2f
1a001ffc g     F .text	0000000c xTaskGetTickCount
1a001640 g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100038bc g       .bss	00000000 _ebss
1a004398 g     F .text	00000040 TIMER0_IRQHandler
1a0011ec g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003e0a g     F .text	00000024 Chip_I2CM_XferBlocking
1a00abac g     F .text	00000040 __hi0bits
1a003b58 g     F .text	0000004a Chip_SCTPWM_SetRate
1a003228 g     F .text	00000038 Chip_I2C_SetClockRate
1a00b874 g     F .text	0000004e .hidden __fixdfsi
1a002594 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003780 g     F .text	0000004c Chip_Clock_EnableCrystal
100038a8 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002440 g     F .text	0000008c xTaskRemoveFromEventList
1a0011c8 g     F .text	00000020 vApplicationMallocFailedHook
1a005708 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a005ea0 g     F .text	00000082 .hidden __ledf2
1a007288 g     F .text	0000003e strcat
1a00ad90 g     F .text	000000a0 __pow5mult
1a005a08 g     F .text	0000006a .hidden __aeabi_ul2d
1a0043d8 g     F .text	00000040 TIMER1_IRQHandler
1a003204 g     F .text	00000024 Chip_I2C_Init
1a0069c8 g     F .text	00000002 __retarget_lock_release_recursive
1a0041b2 g     F .text	0000000a UART2_IRQHandler
1a00393c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00bf1c g     O .text	000000e6 gpioPinsInit
1a001b24  w    F .text	0000002c vAssertCalled
1a000c5c g     F .text	00000040 fsmRobotInit
1a004182 g     F .text	0000001a uartWriteByte
1a003e6c g     F .text	00000012 Chip_SSP_SetClockRate
10003814 g     O .bss	00000010 led_data
1a005f94 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a004752 g     F .text	00000016 gpioToggle
1a0056f0 g     F .text	0000000a GPIO2_IRQHandler
1a00667c g     F .text	0000000c __sfp_lock_acquire
1a00a950 g     F .text	00000000 memchr
1a0024e4 g     F .text	00000084 xTaskCheckForTimeOut
1a006734 g     F .text	000001ec _free_r
1a003a24 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00b710 g     F .text	0000000c __locale_mb_cur_max
1a004a94 g     F .text	00000010 lcdClearAndHome
1a005f80 g     F .text	00000012 .hidden __aeabi_dcmpge
1a004aa4 g     F .text	0000009c lcdInit
10000a88 g       .bss	00000000 _bss
1a003534 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0053c4 g     F .text	000002ac freeRTOS_mpu9250Init
1a005704 g     F .text	0000027a .hidden __aeabi_dsub
10000910 g     O .data	00000004 __malloc_sbrk_base
100034b8 g     O .bss	00000004 freeRtosInterruptCallback
1a001fec g     F .text	00000010 vTaskSuspendAll
1a005a08 g     F .text	0000006a .hidden __floatundidf
1a00ae30 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003e7e g     F .text	0000003e Chip_SSP_SetBitRate
1a001acc g     F .text	00000026 uxListRemove
1a003e3e g     F .text	00000002 Chip_GPIO_Init
1a00775c g     F .text	000000a4 strncmp
1a00bd60 g     O .text	00000004 OscRateIn
1a0047f0 g     F .text	0000005a delayInaccurateMs
1a0040e8 g     F .text	0000007c uartInit
1a00ac60 g     F .text	00000130 __multiply
1a001e80 g     F .text	00000072 xTaskCreateStatic
1a005260 g     F .text	0000000c freeRTOS_mpu9250GetGyroZ_rads
100038bc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00b4ac g     F .text	00000072 strncpy
100037a0 g     O .bss	00000028 __malloc_current_mallinfo
1a00b014 g     F .text	000000be __d2b
1a00230c g     F .text	000000cc vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0049d8 g     F .text	00000030 lcdData
1a0015ae g     F .text	00000092 xQueueGenericCreateStatic
1a002408 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a005254 g     F .text	0000000c freeRTOS_mpu9250GetGyroY_rads
1a001278 g     F .text	0000000a _close_r
1a0059a0 g     F .text	00000022 .hidden __aeabi_i2d
100037d4 g     O .bss	0000000c motores
1a0044d4 g     F .text	000001ac gpioInit
1a000c10 g     F .text	0000004c task_lcd
1a000600 g     F .text	0000005c uart_esp01_init
1a001af4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0069c0 g     F .text	00000002 __retarget_lock_close_recursive
1a004270 g     F .text	00000024 pwmInit
1a002784 g     F .text	0000006c xTimerGenericCommand
1a009500 g     F .text	000000d0 __swsetup_r
1a001b50  w    F .text	0000001c vApplicationStackOverflowHook
1a006348  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005cc8 g     F .text	000001d0 .hidden __divdf3
1a0049a0 g     F .text	00000038 lcdCommand
1a000754 g     F .text	0000008c task_bumper_back
10000508 g     O .data	00000408 __malloc_av_
1a005a74 g     F .text	00000254 .hidden __muldf3
1a0071fc g     F .text	00000022 __sread
1a004768 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
10000002 g     O .data	00000001 addr
1a007110 g     F .text	0000000c __malloc_lock
1a002f98 g     F .text	00000014 Board_UARTPutChar
1a0032c0 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a006570 g     F .text	0000005a _fflush_r
1a00b5ac g     F .text	0000005e _calloc_r
1a000854 g     F .text	00000064 task_led1
1a0037e8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0069c4 g     F .text	00000002 __retarget_lock_acquire_recursive
1a007070 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000a24 g     F .text	000000e4 lcd_init
1a001198 g     F .text	00000030 main
1a0006c4 g     F .text	00000090 task_bumper_front
100037cc g     O .bss	00000004 __malloc_max_total_mem
1a0069bc g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001a98 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002b30 g     F .text	00000024 SVC_Handler
1a007280 g     F .text	00000008 __sclose
1a002720 g     F .text	00000064 xTimerCreateTimerTask
1a005fa8 g     F .text	0000009e .hidden __truncdfsf2
1a0096f8 g     F .text	00000e54 _dtoa_r
1a003f88 g     F .text	00000018 Sct_SetDutyCycle
1a0069cc g     F .text	00000570 _malloc_r
1a00b82c g     F .text	0000001a __ascii_wctomb
1a005a18 g     F .text	0000005a .hidden __aeabi_l2d
1a0040a8 g     F .text	00000018 uartTxReady
1a00221c g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003a58 g     F .text	0000003c Chip_Clock_EnableOpts
1a003002 g     F .text	00000008 __stdio_getchar
1a006694 g     F .text	000000a0 _malloc_trim_r
1a0005ec g     F .text	00000012 buffer_rx_clean
1a003804 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0072e8 g     F .text	000002dc strcmp
1a0038bc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000bd8 g     F .text	00000038 uInToChar
1a003ef4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a005ea8 g     F .text	0000007a .hidden __nedf2
1a00065c g     F .text	00000030 laser_init
1a004680 g     F .text	0000006a gpioWrite
1a001274  w    F .text	00000002 _fini
1a002120 g     F .text	000000fc xTaskResumeAll
1a001f58 g     F .text	00000094 vTaskStartScheduler
1a0034f4 g     F .text	00000040 Chip_ADC_Init
10003894 g     O .bss	00000004 g_pUsbApi
1a003014 g     F .text	00000038 Board_SetupMuxing
1a004a08 g     F .text	00000050 lcdGoToXY
1a0033d0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0012f6 g     F .text	00000028 _write_r
1a004b78 g     F .text	00000288 mpu9250Read
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100000dc g     O .data	00000004 _impure_ptr
1a006424 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00068c g     F .text	00000038 laser_set
1a003f6c g     F .text	0000001c Sct_Uint8ToTicks
1a0008b8 g     F .text	00000064 task_led2
1a004a7e g     F .text	00000016 lcdSendStringRaw
1a0040d4 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a003cfc g     F .text	00000100 Chip_I2CM_XferHandler
1a00b71c g     F .text	0000002a __ascii_mbtowc
1a0007e0 g     F .text	00000074 bumpers_init
10000000 g       .data	00000000 _data
1a002568 g     F .text	0000000c vTaskMissedYield
1a000c9c g     F .text	0000003a validar_dato_rx
100038bc g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003ebc g     F .text	00000038 Chip_SSP_Init
1a00091c g     F .text	00000088 led_init
1a000dd8 g     F .text	000002c4 comando
1a0032d8 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0019ec g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002008 g     F .text	00000118 xTaskIncrementTick
1a001154 g     F .text	00000044 task_robot
1a00a85c g     F .text	0000005c __swhatbuf_r
1a002e04 g     F .text	00000020 DAC_IRQHandler
1a00437a g     F .text	00000018 i2cWrite
1a002f74 g     F .text	00000024 Board_Debug_Init
1a005f44 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002ff8 g     F .text	0000000a __stdio_putchar
1a001508 g     F .text	00000084 xQueueGenericReset
10000a84 g       .data	00000000 _edata
1a000300 g     F .text	00000060 motorSpin
1a0030c4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00b60c g     F .text	0000009e __fputwc
100038ac g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0009a4 g     F .text	00000020 task_mpu9250
1a001ef2 g     F .text	00000066 xTaskCreate
1a003b14 g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a003ba4 g     F .text	00000158 Chip_SetupCoreClock
1a007220 g     F .text	0000003e __swrite
1a0056dc g     F .text	0000000a GPIO0_IRQHandler
10000914 g     O .data	00000004 __malloc_trim_threshold
1a000dc4 g     F .text	00000012 buffer_clean
1a000000 g     O .text	00000040 g_pfnVectors
1a006920 g     F .text	00000052 _fwalk_reent
1a003574 g     F .text	00000014 SystemCoreClockUpdate
1a00af1c g     F .text	000000f8 __mdiff
1a00b874 g     F .text	0000004e .hidden __aeabi_d2iz
1a0041d4 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0022c0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000b8c g     F .text	0000004c uInToChar_sig
1a006688 g     F .text	0000000c __sfp_lock_release
1a004a58 g     F .text	00000012 lcdClear
1a00634c g     F .text	00000008 atoi
1a002574 g     F .text	00000020 xTaskGetSchedulerState
1a00484a g     F .text	0000005c delayInaccurateUs
1a00c00c g     O .text	00000101 _ctype_
1a006348  w    F .text	00000002 .hidden __aeabi_idiv0
1a00b848 g     F .text	0000002c .hidden __unorddf2
1a00058c g     F .text	00000060 task_uart_232
1a0009c4 g     F .text	00000060 mpu9250_init
1a00017e  w    F .text	00000002 BusFault_Handler
100038b0 g     O .bss	00000001 __lock___dd_hash_mutex
1a00a8b8 g     F .text	00000094 __smakebuf_r
100038b4 g     O .bss	00000001 __lock___tz_mutex
1a007680 g     F .text	000000dc strlen
1a002af8 g     F .text	0000002c pxPortInitialiseStack
1a0041fc g     F .text	00000024 pwmWrite
1a003a94 g     F .text	00000034 Chip_Clock_Enable
1a005f34 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a005e98 g     F .text	0000008a .hidden __gedf2
1a0041bc g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00b598 g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0046ea g     F .text	00000068 gpioRead
1a0059c4 g     F .text	00000042 .hidden __aeabi_f2d
1a004784 g     F .text	0000006c boardInit
1a002b54 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
100037e0 g     O .bss	00000034 data_uart232_rx
1a00109c g     F .text	000000b8 fsmRobotUpdate
1a005704 g     F .text	0000027a .hidden __subdf3
1a007928 g     F .text	00001b54 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00abec g     F .text	00000060 __lo0bits
1a00b440 g     F .text	0000006c frexp
10000918 g     O .data	0000016c __global_locale
1a0039cc g     F .text	00000058 Chip_Clock_SetBaseClock
1a003f2c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100038b8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0030b8 g     F .text	0000000c Board_SystemInit
1a00ab20 g     F .text	0000008a __multadd
1a00ab0c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ed 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a2 66 ff 53     }............f.S
	...
1a00002c:	31 2b 00 1a 85 01 00 1a 00 00 00 00 d1 2b 00 1a     1+...........+..
1a00003c:	35 2c 00 1a                                         5,..

1a000040 <g_pfnVendorVectors>:
1a000040:	05 2e 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	69 47 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     iG..............
1a000070:	99 43 00 1a d9 43 00 1a 19 44 00 1a 5d 44 00 1a     .C...C...D..]D..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a b3 41 00 1a bd 41 00 1a     .........A...A..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	dd 56 00 1a e7 56 00 1a f1 56 00 1a bb 01 00 1a     .V...V...V......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00c2a0 	.word	0x1a00c2a0
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a84 	.word	0x00000a84
1a000120:	1a00c2a0 	.word	0x1a00c2a0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00c2a0 	.word	0x1a00c2a0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00c2a0 	.word	0x1a00c2a0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00c2a0 	.word	0x1a00c2a0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a88 	.word	0x10000a88
1a000154:	00002e34 	.word	0x00002e34
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 ff14 	bl	1a003fec <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <motorSpin>:
static uint8_t minVel=MIN_VELOCIDAD;

/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/
void motorSpin(spinMotor_t  spinMotor, numeroMotor_t numeroMotor){
1a000300:	b510      	push	{r4, lr}
1a000302:	4604      	mov	r4, r0
	switch (numeroMotor){
1a000304:	b111      	cbz	r1, 1a00030c <motorSpin+0xc>
1a000306:	2901      	cmp	r1, #1
1a000308:	d015      	beq.n	1a000336 <motorSpin+0x36>
				gpioWrite(M2_ENA1,OFF);
				gpioWrite(M2_ENA2,ON);
				}
			break;
		}
}
1a00030a:	bd10      	pop	{r4, pc}
			if(spinMotor == MOT_ADELANTE){
1a00030c:	b150      	cbz	r0, 1a000324 <motorSpin+0x24>
			if(spinMotor == MOT_ATRAS){
1a00030e:	2c01      	cmp	r4, #1
1a000310:	d1fb      	bne.n	1a00030a <motorSpin+0xa>
				gpioWrite(M1_ENA1,OFF);
1a000312:	2100      	movs	r1, #0
1a000314:	2002      	movs	r0, #2
1a000316:	f004 f9b3 	bl	1a004680 <gpioWrite>
				gpioWrite(M1_ENA2,ON);
1a00031a:	2101      	movs	r1, #1
1a00031c:	2003      	movs	r0, #3
1a00031e:	f004 f9af 	bl	1a004680 <gpioWrite>
1a000322:	e7f2      	b.n	1a00030a <motorSpin+0xa>
				gpioWrite(M1_ENA2,OFF);
1a000324:	2100      	movs	r1, #0
1a000326:	2003      	movs	r0, #3
1a000328:	f004 f9aa 	bl	1a004680 <gpioWrite>
				gpioWrite(M1_ENA1,ON);
1a00032c:	2101      	movs	r1, #1
1a00032e:	2002      	movs	r0, #2
1a000330:	f004 f9a6 	bl	1a004680 <gpioWrite>
1a000334:	e7eb      	b.n	1a00030e <motorSpin+0xe>
			if(spinMotor == MOT_ADELANTE){
1a000336:	b150      	cbz	r0, 1a00034e <motorSpin+0x4e>
			if(spinMotor == MOT_ATRAS){
1a000338:	2c01      	cmp	r4, #1
1a00033a:	d1e6      	bne.n	1a00030a <motorSpin+0xa>
				gpioWrite(M2_ENA1,OFF);
1a00033c:	2100      	movs	r1, #0
1a00033e:	2004      	movs	r0, #4
1a000340:	f004 f99e 	bl	1a004680 <gpioWrite>
				gpioWrite(M2_ENA2,ON);
1a000344:	2101      	movs	r1, #1
1a000346:	2006      	movs	r0, #6
1a000348:	f004 f99a 	bl	1a004680 <gpioWrite>
}
1a00034c:	e7dd      	b.n	1a00030a <motorSpin+0xa>
				gpioWrite(M2_ENA2,OFF);
1a00034e:	2100      	movs	r1, #0
1a000350:	2006      	movs	r0, #6
1a000352:	f004 f995 	bl	1a004680 <gpioWrite>
				gpioWrite(M2_ENA1,ON);
1a000356:	2101      	movs	r1, #1
1a000358:	2004      	movs	r0, #4
1a00035a:	f004 f991 	bl	1a004680 <gpioWrite>
1a00035e:	e7eb      	b.n	1a000338 <motorSpin+0x38>

1a000360 <motor_init>:


/*==================[external functions definition]==========================*/
// Función que inicializa la tarea
void motor_init( void ){
1a000360:	b508      	push	{r3, lr}
	/* Se configura los pines del sentido de giro
	 * IMPORTANTE: nunca deben estar los dos pines en nivel alto
	 */
	gpioInit(M1_ENA1, GPIO_OUTPUT);				//Motor derecho
1a000362:	2101      	movs	r1, #1
1a000364:	2002      	movs	r0, #2
1a000366:	f004 f8b5 	bl	1a0044d4 <gpioInit>
	gpioInit(M1_ENA2, GPIO_OUTPUT);
1a00036a:	2101      	movs	r1, #1
1a00036c:	2003      	movs	r0, #3
1a00036e:	f004 f8b1 	bl	1a0044d4 <gpioInit>
	gpioInit(M2_ENA1, GPIO_OUTPUT);				//Motor izquierdo
1a000372:	2101      	movs	r1, #1
1a000374:	2004      	movs	r0, #4
1a000376:	f004 f8ad 	bl	1a0044d4 <gpioInit>
	gpioInit(M2_ENA2, GPIO_OUTPUT);
1a00037a:	2101      	movs	r1, #1
1a00037c:	2006      	movs	r0, #6
1a00037e:	f004 f8a9 	bl	1a0044d4 <gpioInit>

	gpioWrite(M1_ENA1,OFF);
1a000382:	2100      	movs	r1, #0
1a000384:	2002      	movs	r0, #2
1a000386:	f004 f97b 	bl	1a004680 <gpioWrite>
	gpioWrite(M1_ENA2,OFF);
1a00038a:	2100      	movs	r1, #0
1a00038c:	2003      	movs	r0, #3
1a00038e:	f004 f977 	bl	1a004680 <gpioWrite>
	gpioWrite(M2_ENA1,OFF);
1a000392:	2100      	movs	r1, #0
1a000394:	2004      	movs	r0, #4
1a000396:	f004 f973 	bl	1a004680 <gpioWrite>
	gpioWrite(M2_ENA2,OFF);
1a00039a:	2100      	movs	r1, #0
1a00039c:	2006      	movs	r0, #6
1a00039e:	f004 f96f 	bl	1a004680 <gpioWrite>


   /* Se configura los PWMs */
   pwmConfig( 0, PWM_ENABLE );
1a0003a2:	2100      	movs	r1, #0
1a0003a4:	4608      	mov	r0, r1
1a0003a6:	f003 ff63 	bl	1a004270 <pwmInit>

   pwmInit(MOT_DER,PWM_ENABLE_OUTPUT );		//Motor derecho
1a0003aa:	2102      	movs	r1, #2
1a0003ac:	2000      	movs	r0, #0
1a0003ae:	f003 ff5f 	bl	1a004270 <pwmInit>
   pwmInit(MOT_IZQ,PWM_ENABLE_OUTPUT ); 	//Motor izquierdo
1a0003b2:	2102      	movs	r1, #2
1a0003b4:	2001      	movs	r0, #1
1a0003b6:	f003 ff5b 	bl	1a004270 <pwmInit>


   /* Se establece el valor de velocidad inicial */
   pwmWrite( MOT_DER,0 );				//Motor derecho
1a0003ba:	2100      	movs	r1, #0
1a0003bc:	4608      	mov	r0, r1
1a0003be:	f003 ff1d 	bl	1a0041fc <pwmWrite>
   pwmWrite( MOT_IZQ,0);				//Motor izquierdo
1a0003c2:	2100      	movs	r1, #0
1a0003c4:	2001      	movs	r0, #1
1a0003c6:	f003 ff19 	bl	1a0041fc <pwmWrite>

   motores.mot1_nombre=MOT_DER;
1a0003ca:	4b08      	ldr	r3, [pc, #32]	; (1a0003ec <motor_init+0x8c>)
1a0003cc:	2200      	movs	r2, #0
1a0003ce:	701a      	strb	r2, [r3, #0]
   motores.mot1_veloc=MAX_VELOCIDAD / 2;
1a0003d0:	217f      	movs	r1, #127	; 0x7f
1a0003d2:	8059      	strh	r1, [r3, #2]
   motores.mot1_ena=Motor_OFF;
1a0003d4:	711a      	strb	r2, [r3, #4]
   motores.mot1_spin=MOT_ADELANTE;
1a0003d6:	715a      	strb	r2, [r3, #5]
   motores.mot2_nombre=MOT_IZQ;
1a0003d8:	2001      	movs	r0, #1
1a0003da:	7198      	strb	r0, [r3, #6]
   motores.mot2_veloc=MAX_VELOCIDAD / 2;
1a0003dc:	8119      	strh	r1, [r3, #8]
   motores.mot2_ena=Motor_OFF;
1a0003de:	729a      	strb	r2, [r3, #10]
   motores.mot2_spin=MOT_ADELANTE;
1a0003e0:	72da      	strb	r2, [r3, #11]

   printf("Motores          --> inicializados correctamente.\r\n" );
1a0003e2:	4803      	ldr	r0, [pc, #12]	; (1a0003f0 <motor_init+0x90>)
1a0003e4:	f006 ff02 	bl	1a0071ec <puts>

}
1a0003e8:	bd08      	pop	{r3, pc}
1a0003ea:	bf00      	nop
1a0003ec:	100037d4 	.word	0x100037d4
1a0003f0:	1a00b8c4 	.word	0x1a00b8c4

1a0003f4 <motorSpeed>:

/*Esta función contempla la zona muerta del motor con los valores
* de las variables "maxVel" y "minVel"
*/
bool_t motorSpeed(int16_t velocidad, bool_t numeroMotor){
1a0003f4:	b570      	push	{r4, r5, r6, lr}
1a0003f6:	4604      	mov	r4, r0
	switch (numeroMotor){
1a0003f8:	460d      	mov	r5, r1
1a0003fa:	b111      	cbz	r1, 1a000402 <motorSpeed+0xe>
1a0003fc:	2901      	cmp	r1, #1
1a0003fe:	d04f      	beq.n	1a0004a0 <motorSpeed+0xac>
					}
				}
			if(velocidad==0) pwmWrite(MOT_IZQ,0);
			break;
	}
}
1a000400:	bd70      	pop	{r4, r5, r6, pc}
			if(velocidad>0){
1a000402:	2800      	cmp	r0, #0
1a000404:	dc08      	bgt.n	1a000418 <motorSpeed+0x24>
			if(velocidad<0){
1a000406:	2c00      	cmp	r4, #0
1a000408:	db26      	blt.n	1a000458 <motorSpeed+0x64>
			if(velocidad==0) pwmWrite(MOT_DER,0);
1a00040a:	2c00      	cmp	r4, #0
1a00040c:	d1f8      	bne.n	1a000400 <motorSpeed+0xc>
1a00040e:	2100      	movs	r1, #0
1a000410:	4608      	mov	r0, r1
1a000412:	f003 fef3 	bl	1a0041fc <pwmWrite>
1a000416:	e7f3      	b.n	1a000400 <motorSpeed+0xc>
				motorSpin(MOT_ADELANTE,numeroMotor);
1a000418:	2000      	movs	r0, #0
1a00041a:	f7ff ff71 	bl	1a000300 <motorSpin>
				if (velocidad<=maxVel && velocidad>=minVel){
1a00041e:	4626      	mov	r6, r4
1a000420:	4b47      	ldr	r3, [pc, #284]	; (1a000540 <motorSpeed+0x14c>)
1a000422:	7819      	ldrb	r1, [r3, #0]
1a000424:	428c      	cmp	r4, r1
1a000426:	dc03      	bgt.n	1a000430 <motorSpeed+0x3c>
1a000428:	4b46      	ldr	r3, [pc, #280]	; (1a000544 <motorSpeed+0x150>)
1a00042a:	781b      	ldrb	r3, [r3, #0]
1a00042c:	429c      	cmp	r4, r3
1a00042e:	da0a      	bge.n	1a000446 <motorSpeed+0x52>
						if(velocidad>maxVel) pwmWrite( MOT_DER,(uint8_t)maxVel);
1a000430:	428e      	cmp	r6, r1
1a000432:	dc0d      	bgt.n	1a000450 <motorSpeed+0x5c>
						if(velocidad<minVel) pwmWrite( MOT_DER,0);
1a000434:	4b43      	ldr	r3, [pc, #268]	; (1a000544 <motorSpeed+0x150>)
1a000436:	781b      	ldrb	r3, [r3, #0]
1a000438:	429e      	cmp	r6, r3
1a00043a:	dae4      	bge.n	1a000406 <motorSpeed+0x12>
1a00043c:	2100      	movs	r1, #0
1a00043e:	4608      	mov	r0, r1
1a000440:	f003 fedc 	bl	1a0041fc <pwmWrite>
1a000444:	e7df      	b.n	1a000406 <motorSpeed+0x12>
						pwmWrite( MOT_DER,(uint8_t)velocidad );
1a000446:	b2e1      	uxtb	r1, r4
1a000448:	2000      	movs	r0, #0
1a00044a:	f003 fed7 	bl	1a0041fc <pwmWrite>
1a00044e:	e7da      	b.n	1a000406 <motorSpeed+0x12>
						if(velocidad>maxVel) pwmWrite( MOT_DER,(uint8_t)maxVel);
1a000450:	2000      	movs	r0, #0
1a000452:	f003 fed3 	bl	1a0041fc <pwmWrite>
1a000456:	e7ed      	b.n	1a000434 <motorSpeed+0x40>
				motorSpin(MOT_ATRAS,numeroMotor);
1a000458:	4629      	mov	r1, r5
1a00045a:	2001      	movs	r0, #1
1a00045c:	f7ff ff50 	bl	1a000300 <motorSpin>
				velocidad=-velocidad;
1a000460:	4264      	negs	r4, r4
1a000462:	b2a3      	uxth	r3, r4
1a000464:	b21c      	sxth	r4, r3
				if (velocidad<=maxVel && velocidad>=minVel){
1a000466:	4625      	mov	r5, r4
1a000468:	4a35      	ldr	r2, [pc, #212]	; (1a000540 <motorSpeed+0x14c>)
1a00046a:	7811      	ldrb	r1, [r2, #0]
1a00046c:	428c      	cmp	r4, r1
1a00046e:	dc03      	bgt.n	1a000478 <motorSpeed+0x84>
1a000470:	4a34      	ldr	r2, [pc, #208]	; (1a000544 <motorSpeed+0x150>)
1a000472:	7812      	ldrb	r2, [r2, #0]
1a000474:	4294      	cmp	r4, r2
1a000476:	da0a      	bge.n	1a00048e <motorSpeed+0x9a>
						if(velocidad>maxVel) pwmWrite( MOT_DER,(uint8_t)maxVel);
1a000478:	428d      	cmp	r5, r1
1a00047a:	dc0d      	bgt.n	1a000498 <motorSpeed+0xa4>
						if(velocidad<minVel) pwmWrite( MOT_DER,0);
1a00047c:	4b31      	ldr	r3, [pc, #196]	; (1a000544 <motorSpeed+0x150>)
1a00047e:	781b      	ldrb	r3, [r3, #0]
1a000480:	429d      	cmp	r5, r3
1a000482:	dac2      	bge.n	1a00040a <motorSpeed+0x16>
1a000484:	2100      	movs	r1, #0
1a000486:	4608      	mov	r0, r1
1a000488:	f003 feb8 	bl	1a0041fc <pwmWrite>
1a00048c:	e7bd      	b.n	1a00040a <motorSpeed+0x16>
						pwmWrite( MOT_DER,(uint8_t)velocidad );
1a00048e:	b2d9      	uxtb	r1, r3
1a000490:	2000      	movs	r0, #0
1a000492:	f003 feb3 	bl	1a0041fc <pwmWrite>
1a000496:	e7b8      	b.n	1a00040a <motorSpeed+0x16>
						if(velocidad>maxVel) pwmWrite( MOT_DER,(uint8_t)maxVel);
1a000498:	2000      	movs	r0, #0
1a00049a:	f003 feaf 	bl	1a0041fc <pwmWrite>
1a00049e:	e7ed      	b.n	1a00047c <motorSpeed+0x88>
			if(velocidad>0){
1a0004a0:	2800      	cmp	r0, #0
1a0004a2:	dc08      	bgt.n	1a0004b6 <motorSpeed+0xc2>
			if(velocidad<0){
1a0004a4:	2c00      	cmp	r4, #0
1a0004a6:	db26      	blt.n	1a0004f6 <motorSpeed+0x102>
			if(velocidad==0) pwmWrite(MOT_IZQ,0);
1a0004a8:	2c00      	cmp	r4, #0
1a0004aa:	d1a9      	bne.n	1a000400 <motorSpeed+0xc>
1a0004ac:	2100      	movs	r1, #0
1a0004ae:	2001      	movs	r0, #1
1a0004b0:	f003 fea4 	bl	1a0041fc <pwmWrite>
1a0004b4:	e7a4      	b.n	1a000400 <motorSpeed+0xc>
				motorSpin(MOT_ADELANTE,numeroMotor);
1a0004b6:	2000      	movs	r0, #0
1a0004b8:	f7ff ff22 	bl	1a000300 <motorSpin>
				if (velocidad<=maxVel && velocidad>=minVel){
1a0004bc:	4626      	mov	r6, r4
1a0004be:	4b20      	ldr	r3, [pc, #128]	; (1a000540 <motorSpeed+0x14c>)
1a0004c0:	7819      	ldrb	r1, [r3, #0]
1a0004c2:	428c      	cmp	r4, r1
1a0004c4:	dc03      	bgt.n	1a0004ce <motorSpeed+0xda>
1a0004c6:	4b1f      	ldr	r3, [pc, #124]	; (1a000544 <motorSpeed+0x150>)
1a0004c8:	781b      	ldrb	r3, [r3, #0]
1a0004ca:	429c      	cmp	r4, r3
1a0004cc:	da0a      	bge.n	1a0004e4 <motorSpeed+0xf0>
						if (velocidad>maxVel) pwmWrite( MOT_IZQ,(uint8_t)maxVel);
1a0004ce:	428e      	cmp	r6, r1
1a0004d0:	dc0d      	bgt.n	1a0004ee <motorSpeed+0xfa>
						if(velocidad<minVel) pwmWrite( MOT_IZQ,0);
1a0004d2:	4b1c      	ldr	r3, [pc, #112]	; (1a000544 <motorSpeed+0x150>)
1a0004d4:	781b      	ldrb	r3, [r3, #0]
1a0004d6:	429e      	cmp	r6, r3
1a0004d8:	dae4      	bge.n	1a0004a4 <motorSpeed+0xb0>
1a0004da:	2100      	movs	r1, #0
1a0004dc:	2001      	movs	r0, #1
1a0004de:	f003 fe8d 	bl	1a0041fc <pwmWrite>
1a0004e2:	e7df      	b.n	1a0004a4 <motorSpeed+0xb0>
						pwmWrite( MOT_IZQ,(uint8_t)velocidad );
1a0004e4:	b2e1      	uxtb	r1, r4
1a0004e6:	2001      	movs	r0, #1
1a0004e8:	f003 fe88 	bl	1a0041fc <pwmWrite>
1a0004ec:	e7da      	b.n	1a0004a4 <motorSpeed+0xb0>
						if (velocidad>maxVel) pwmWrite( MOT_IZQ,(uint8_t)maxVel);
1a0004ee:	2001      	movs	r0, #1
1a0004f0:	f003 fe84 	bl	1a0041fc <pwmWrite>
1a0004f4:	e7ed      	b.n	1a0004d2 <motorSpeed+0xde>
				motorSpin(MOT_ATRAS,numeroMotor);
1a0004f6:	4629      	mov	r1, r5
1a0004f8:	2001      	movs	r0, #1
1a0004fa:	f7ff ff01 	bl	1a000300 <motorSpin>
				velocidad=-velocidad;
1a0004fe:	4264      	negs	r4, r4
1a000500:	b2a3      	uxth	r3, r4
1a000502:	b21c      	sxth	r4, r3
				if (velocidad<=maxVel && velocidad>=minVel){
1a000504:	4625      	mov	r5, r4
1a000506:	4a0e      	ldr	r2, [pc, #56]	; (1a000540 <motorSpeed+0x14c>)
1a000508:	7811      	ldrb	r1, [r2, #0]
1a00050a:	428c      	cmp	r4, r1
1a00050c:	dc03      	bgt.n	1a000516 <motorSpeed+0x122>
1a00050e:	4a0d      	ldr	r2, [pc, #52]	; (1a000544 <motorSpeed+0x150>)
1a000510:	7812      	ldrb	r2, [r2, #0]
1a000512:	4294      	cmp	r4, r2
1a000514:	da0a      	bge.n	1a00052c <motorSpeed+0x138>
						if(velocidad>maxVel) pwmWrite( MOT_IZQ,(uint8_t)maxVel);
1a000516:	428d      	cmp	r5, r1
1a000518:	dc0d      	bgt.n	1a000536 <motorSpeed+0x142>
						if(velocidad<minVel) pwmWrite( MOT_IZQ,0);
1a00051a:	4b0a      	ldr	r3, [pc, #40]	; (1a000544 <motorSpeed+0x150>)
1a00051c:	781b      	ldrb	r3, [r3, #0]
1a00051e:	429d      	cmp	r5, r3
1a000520:	dac2      	bge.n	1a0004a8 <motorSpeed+0xb4>
1a000522:	2100      	movs	r1, #0
1a000524:	2001      	movs	r0, #1
1a000526:	f003 fe69 	bl	1a0041fc <pwmWrite>
1a00052a:	e7bd      	b.n	1a0004a8 <motorSpeed+0xb4>
						pwmWrite( MOT_IZQ,(uint8_t)velocidad );
1a00052c:	b2d9      	uxtb	r1, r3
1a00052e:	2001      	movs	r0, #1
1a000530:	f003 fe64 	bl	1a0041fc <pwmWrite>
1a000534:	e7b8      	b.n	1a0004a8 <motorSpeed+0xb4>
						if(velocidad>maxVel) pwmWrite( MOT_IZQ,(uint8_t)maxVel);
1a000536:	2001      	movs	r0, #1
1a000538:	f003 fe60 	bl	1a0041fc <pwmWrite>
1a00053c:	e7ed      	b.n	1a00051a <motorSpeed+0x126>
1a00053e:	bf00      	nop
1a000540:	10000000 	.word	0x10000000
1a000544:	10000001 	.word	0x10000001

1a000548 <motorEnable>:


void motorEnable(enableDisable_t enableDisable, numeroMotor_t numeroMotor){
1a000548:	b510      	push	{r4, lr}
1a00054a:	4604      	mov	r4, r0
	switch (numeroMotor){
1a00054c:	b111      	cbz	r1, 1a000554 <motorEnable+0xc>
1a00054e:	2901      	cmp	r1, #1
1a000550:	d00e      	beq.n	1a000570 <motorEnable+0x28>
		case MOT_IZQ:
			if(enableDisable == Motor_ON) pwmInit( MOT_IZQ, PWM_ENABLE_OUTPUT);
			if(enableDisable == Motor_OFF)pwmInit( MOT_IZQ, PWM_DISABLE_OUTPUT);
			break;
		}
}
1a000552:	bd10      	pop	{r4, pc}
			if(enableDisable == Motor_ON) pwmInit( MOT_DER, PWM_ENABLE_OUTPUT);
1a000554:	2801      	cmp	r0, #1
1a000556:	d006      	beq.n	1a000566 <motorEnable+0x1e>
			if(enableDisable == Motor_OFF)pwmInit( MOT_DER, PWM_DISABLE_OUTPUT);
1a000558:	2c00      	cmp	r4, #0
1a00055a:	d1fa      	bne.n	1a000552 <motorEnable+0xa>
1a00055c:	2103      	movs	r1, #3
1a00055e:	2000      	movs	r0, #0
1a000560:	f003 fe86 	bl	1a004270 <pwmInit>
1a000564:	e7f5      	b.n	1a000552 <motorEnable+0xa>
			if(enableDisable == Motor_ON) pwmInit( MOT_DER, PWM_ENABLE_OUTPUT);
1a000566:	2102      	movs	r1, #2
1a000568:	2000      	movs	r0, #0
1a00056a:	f003 fe81 	bl	1a004270 <pwmInit>
1a00056e:	e7f3      	b.n	1a000558 <motorEnable+0x10>
			if(enableDisable == Motor_ON) pwmInit( MOT_IZQ, PWM_ENABLE_OUTPUT);
1a000570:	2801      	cmp	r0, #1
1a000572:	d006      	beq.n	1a000582 <motorEnable+0x3a>
			if(enableDisable == Motor_OFF)pwmInit( MOT_IZQ, PWM_DISABLE_OUTPUT);
1a000574:	2c00      	cmp	r4, #0
1a000576:	d1ec      	bne.n	1a000552 <motorEnable+0xa>
1a000578:	2103      	movs	r1, #3
1a00057a:	2001      	movs	r0, #1
1a00057c:	f003 fe78 	bl	1a004270 <pwmInit>
}
1a000580:	e7e7      	b.n	1a000552 <motorEnable+0xa>
			if(enableDisable == Motor_ON) pwmInit( MOT_IZQ, PWM_ENABLE_OUTPUT);
1a000582:	2102      	movs	r1, #2
1a000584:	2001      	movs	r0, #1
1a000586:	f003 fe73 	bl	1a004270 <pwmInit>
1a00058a:	e7f3      	b.n	1a000574 <motorEnable+0x2c>

1a00058c <task_uart_232>:
		printf("UART232        --> inicializada correctamente.\r\n" );
}


void task_uart_232( void* taskParmPtr )
{
1a00058c:	b510      	push	{r4, lr}
1a00058e:	b082      	sub	sp, #8
	TickType_t xPeriodicity = pdMS_TO_TICKS(UART232_MS); // Tarea periodica
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a000590:	f001 fd34 	bl	1a001ffc <xTaskGetTickCount>
1a000594:	9001      	str	r0, [sp, #4]
1a000596:	e009      	b.n	1a0005ac <task_uart_232+0x20>
			taskENTER_CRITICAL();		    // disable ISR
			while(uartRxReady(UART_232)){
						uartReadByte(UART_232,&data_uart232_rx.buffer_rx[data_uart232_rx.cuenta]);
						data_uart232_rx.cuenta++;
					}
			taskEXIT_CRITICAL();		   // enable ISR
1a000598:	f002 fafe 	bl	1a002b98 <vPortExitCritical>
			//gpioToggle(LED3);
			data_uart232_rx.status=DATO_RCV;
1a00059c:	4b12      	ldr	r3, [pc, #72]	; (1a0005e8 <task_uart_232+0x5c>)
1a00059e:	2201      	movs	r2, #1
1a0005a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0005a4:	2164      	movs	r1, #100	; 0x64
1a0005a6:	a801      	add	r0, sp, #4
1a0005a8:	f001 fe38 	bl	1a00221c <vTaskDelayUntil>
		if(uartRxReady(UART_232)){
1a0005ac:	2005      	movs	r0, #5
1a0005ae:	f003 fd6f 	bl	1a004090 <uartRxReady>
1a0005b2:	2800      	cmp	r0, #0
1a0005b4:	d0f6      	beq.n	1a0005a4 <task_uart_232+0x18>
			data_uart232_rx.cuenta=0;
1a0005b6:	4b0c      	ldr	r3, [pc, #48]	; (1a0005e8 <task_uart_232+0x5c>)
1a0005b8:	2200      	movs	r2, #0
1a0005ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			taskENTER_CRITICAL();		    // disable ISR
1a0005be:	f002 fac9 	bl	1a002b54 <vPortEnterCritical>
			while(uartRxReady(UART_232)){
1a0005c2:	2005      	movs	r0, #5
1a0005c4:	f003 fd64 	bl	1a004090 <uartRxReady>
1a0005c8:	2800      	cmp	r0, #0
1a0005ca:	d0e5      	beq.n	1a000598 <task_uart_232+0xc>
						uartReadByte(UART_232,&data_uart232_rx.buffer_rx[data_uart232_rx.cuenta]);
1a0005cc:	4c06      	ldr	r4, [pc, #24]	; (1a0005e8 <task_uart_232+0x5c>)
1a0005ce:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
1a0005d2:	4421      	add	r1, r4
1a0005d4:	2005      	movs	r0, #5
1a0005d6:	f003 fdc5 	bl	1a004164 <uartReadByte>
						data_uart232_rx.cuenta++;
1a0005da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
1a0005de:	3301      	adds	r3, #1
1a0005e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
1a0005e4:	e7ed      	b.n	1a0005c2 <task_uart_232+0x36>
1a0005e6:	bf00      	nop
1a0005e8:	100037e0 	.word	0x100037e0

1a0005ec <buffer_rx_clean>:

void buffer_rx_clean(uint8_t *buffer1)
{
	uint8_t index;
	if(&buffer1==&data_uart232_rx.buffer_rx) data_uart232_rx.cuenta=0;
	for (index=0;index<LONG_BUFFER_RX;index++){
1a0005ec:	2300      	movs	r3, #0
1a0005ee:	2b31      	cmp	r3, #49	; 0x31
1a0005f0:	d804      	bhi.n	1a0005fc <buffer_rx_clean+0x10>
		buffer1[index]=' ';
1a0005f2:	2220      	movs	r2, #32
1a0005f4:	54c2      	strb	r2, [r0, r3]
	for (index=0;index<LONG_BUFFER_RX;index++){
1a0005f6:	3301      	adds	r3, #1
1a0005f8:	b2db      	uxtb	r3, r3
1a0005fa:	e7f8      	b.n	1a0005ee <buffer_rx_clean+0x2>
	}
}
1a0005fc:	4770      	bx	lr
1a0005fe:	Address 0x000000001a0005fe is out of bounds.


1a000600 <uart_esp01_init>:
{
1a000600:	b510      	push	{r4, lr}
1a000602:	b082      	sub	sp, #8
	uartConfig(UART_232, 115200);
1a000604:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000608:	2005      	movs	r0, #5
1a00060a:	f003 fd6d 	bl	1a0040e8 <uartInit>
	buffer_rx_clean(data_uart232_rx.buffer_rx);
1a00060e:	4c0f      	ldr	r4, [pc, #60]	; (1a00064c <uart_esp01_init+0x4c>)
1a000610:	4620      	mov	r0, r4
1a000612:	f7ff ffeb 	bl	1a0005ec <buffer_rx_clean>
	data_uart232_rx.status=SIN_DATOS;
1a000616:	2300      	movs	r3, #0
1a000618:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
		res1 = xTaskCreate (
1a00061c:	9301      	str	r3, [sp, #4]
1a00061e:	2201      	movs	r2, #1
1a000620:	9200      	str	r2, [sp, #0]
1a000622:	22b4      	movs	r2, #180	; 0xb4
1a000624:	490a      	ldr	r1, [pc, #40]	; (1a000650 <uart_esp01_init+0x50>)
1a000626:	480b      	ldr	r0, [pc, #44]	; (1a000654 <uart_esp01_init+0x54>)
1a000628:	f001 fc63 	bl	1a001ef2 <xTaskCreate>
		configASSERT( (res1 == pdPASS));
1a00062c:	2801      	cmp	r0, #1
1a00062e:	d008      	beq.n	1a000642 <uart_esp01_init+0x42>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000630:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000634:	f383 8811 	msr	BASEPRI, r3
1a000638:	f3bf 8f6f 	isb	sy
1a00063c:	f3bf 8f4f 	dsb	sy
1a000640:	e7fe      	b.n	1a000640 <uart_esp01_init+0x40>
		printf("UART232        --> inicializada correctamente.\r\n" );
1a000642:	4805      	ldr	r0, [pc, #20]	; (1a000658 <uart_esp01_init+0x58>)
1a000644:	f006 fdd2 	bl	1a0071ec <puts>
}
1a000648:	b002      	add	sp, #8
1a00064a:	bd10      	pop	{r4, pc}
1a00064c:	100037e0 	.word	0x100037e0
1a000650:	1a00b8f8 	.word	0x1a00b8f8
1a000654:	1a00058d 	.word	0x1a00058d
1a000658:	1a00b908 	.word	0x1a00b908

1a00065c <laser_init>:

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/
// Función que inicializa la tarea
void laser_init( void ){
1a00065c:	b508      	push	{r3, lr}
	// Seteo como puertos de salida
	gpioConfig(LASER_DER, GPIO_OUTPUT);				//Motor derecho<-----------------------
1a00065e:	2101      	movs	r1, #1
1a000660:	200e      	movs	r0, #14
1a000662:	f003 ff37 	bl	1a0044d4 <gpioInit>
	gpioConfig(LASER_IZQ, GPIO_OUTPUT);
1a000666:	2101      	movs	r1, #1
1a000668:	200d      	movs	r0, #13
1a00066a:	f003 ff33 	bl	1a0044d4 <gpioInit>
	// Apago los lasers
	gpioWrite(LASER_DER,OFF);
1a00066e:	2100      	movs	r1, #0
1a000670:	200e      	movs	r0, #14
1a000672:	f004 f805 	bl	1a004680 <gpioWrite>
	gpioWrite(LASER_IZQ,OFF);
1a000676:	2100      	movs	r1, #0
1a000678:	200d      	movs	r0, #13
1a00067a:	f004 f801 	bl	1a004680 <gpioWrite>

	printf("Laser              --> inicializado correctamente.\r\n" );
1a00067e:	4802      	ldr	r0, [pc, #8]	; (1a000688 <laser_init+0x2c>)
1a000680:	f006 fdb4 	bl	1a0071ec <puts>
}
1a000684:	bd08      	pop	{r3, pc}
1a000686:	bf00      	nop
1a000688:	1a00b938 	.word	0x1a00b938

1a00068c <laser_set>:


void laser_set(uint8_t *laser, bool_t valor)
{
1a00068c:	b538      	push	{r3, r4, r5, lr}
1a00068e:	4604      	mov	r4, r0
1a000690:	460d      	mov	r5, r1
	if(!strcmp(laser,"LASER_DER")) {
1a000692:	490a      	ldr	r1, [pc, #40]	; (1a0006bc <laser_set+0x30>)
1a000694:	f006 fe28 	bl	1a0072e8 <strcmp>
1a000698:	b128      	cbz	r0, 1a0006a6 <laser_set+0x1a>
		gpioWrite(LASER_DER,valor);
	   }
	if(!strcmp(laser,"LASER_IZQ")) {
1a00069a:	4909      	ldr	r1, [pc, #36]	; (1a0006c0 <laser_set+0x34>)
1a00069c:	4620      	mov	r0, r4
1a00069e:	f006 fe23 	bl	1a0072e8 <strcmp>
1a0006a2:	b128      	cbz	r0, 1a0006b0 <laser_set+0x24>
		gpioWrite(LASER_IZQ,valor);
	}
}
1a0006a4:	bd38      	pop	{r3, r4, r5, pc}
		gpioWrite(LASER_DER,valor);
1a0006a6:	4629      	mov	r1, r5
1a0006a8:	200e      	movs	r0, #14
1a0006aa:	f003 ffe9 	bl	1a004680 <gpioWrite>
1a0006ae:	e7f4      	b.n	1a00069a <laser_set+0xe>
		gpioWrite(LASER_IZQ,valor);
1a0006b0:	4629      	mov	r1, r5
1a0006b2:	200d      	movs	r0, #13
1a0006b4:	f003 ffe4 	bl	1a004680 <gpioWrite>
}
1a0006b8:	e7f4      	b.n	1a0006a4 <laser_set+0x18>
1a0006ba:	bf00      	nop
1a0006bc:	1a00b96c 	.word	0x1a00b96c
1a0006c0:	1a00b978 	.word	0x1a00b978

1a0006c4 <task_bumper_front>:
	printf("Bumper's        --> inicializado correctamente.\r\n" );
}


void task_bumper_front( void* taskParmPtr )
{
1a0006c4:	b500      	push	{lr}
1a0006c6:	b083      	sub	sp, #12
	TickType_t xPeriodicity = pdMS_TO_TICKS(PERIODE_TEST_MSEG); // Tarea periódica
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a0006c8:	f001 fc98 	bl	1a001ffc <xTaskGetTickCount>
1a0006cc:	9001      	str	r0, [sp, #4]
1a0006ce:	e003      	b.n	1a0006d8 <task_bumper_front+0x14>
			motorEnable(Motor_ON,MOT_IZQ);

		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0006d0:	21fa      	movs	r1, #250	; 0xfa
1a0006d2:	a801      	add	r0, sp, #4
1a0006d4:	f001 fda2 	bl	1a00221c <vTaskDelayUntil>
		taskENTER_CRITICAL();				// disable ISR
1a0006d8:	f002 fa3c 	bl	1a002b54 <vPortEnterCritical>
		taskEXIT_CRITICAL();				// enable ISR
1a0006dc:	f002 fa5c 	bl	1a002b98 <vPortExitCritical>
		if(!gpioRead( STOP_FRONT )) {
1a0006e0:	200c      	movs	r0, #12
1a0006e2:	f004 f802 	bl	1a0046ea <gpioRead>
1a0006e6:	2800      	cmp	r0, #0
1a0006e8:	d1f2      	bne.n	1a0006d0 <task_bumper_front+0xc>
			estado=BUMBERS_FRONT;
1a0006ea:	4b19      	ldr	r3, [pc, #100]	; (1a000750 <task_bumper_front+0x8c>)
1a0006ec:	2205      	movs	r2, #5
1a0006ee:	701a      	strb	r2, [r3, #0]
			motorEnable(Motor_OFF,MOT_DER);
1a0006f0:	2100      	movs	r1, #0
1a0006f2:	4608      	mov	r0, r1
1a0006f4:	f7ff ff28 	bl	1a000548 <motorEnable>
			motorEnable(Motor_OFF,MOT_IZQ);
1a0006f8:	2101      	movs	r1, #1
1a0006fa:	2000      	movs	r0, #0
1a0006fc:	f7ff ff24 	bl	1a000548 <motorEnable>
			motorSpeed(-VEL_ESCAPE, MOT_DER);
1a000700:	2100      	movs	r1, #0
1a000702:	f06f 0063 	mvn.w	r0, #99	; 0x63
1a000706:	f7ff fe75 	bl	1a0003f4 <motorSpeed>
			motorSpeed(-VEL_ESCAPE, MOT_IZQ);
1a00070a:	2101      	movs	r1, #1
1a00070c:	f06f 0063 	mvn.w	r0, #99	; 0x63
1a000710:	f7ff fe70 	bl	1a0003f4 <motorSpeed>
			motorEnable(Motor_ON,MOT_DER);
1a000714:	2100      	movs	r1, #0
1a000716:	2001      	movs	r0, #1
1a000718:	f7ff ff16 	bl	1a000548 <motorEnable>
			motorEnable(Motor_ON,MOT_IZQ);
1a00071c:	2101      	movs	r1, #1
1a00071e:	4608      	mov	r0, r1
1a000720:	f7ff ff12 	bl	1a000548 <motorEnable>
			vTaskDelay(500/portTICK_PERIOD_MS);
1a000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000728:	f001 fdca 	bl	1a0022c0 <vTaskDelay>
			motorSpeed(0, MOT_DER);
1a00072c:	2100      	movs	r1, #0
1a00072e:	4608      	mov	r0, r1
1a000730:	f7ff fe60 	bl	1a0003f4 <motorSpeed>
			motorSpeed(0, MOT_IZQ);
1a000734:	2101      	movs	r1, #1
1a000736:	2000      	movs	r0, #0
1a000738:	f7ff fe5c 	bl	1a0003f4 <motorSpeed>
			motorEnable(Motor_ON,MOT_DER);
1a00073c:	2100      	movs	r1, #0
1a00073e:	2001      	movs	r0, #1
1a000740:	f7ff ff02 	bl	1a000548 <motorEnable>
			motorEnable(Motor_ON,MOT_IZQ);
1a000744:	2101      	movs	r1, #1
1a000746:	4608      	mov	r0, r1
1a000748:	f7ff fefe 	bl	1a000548 <motorEnable>
1a00074c:	e7c0      	b.n	1a0006d0 <task_bumper_front+0xc>
1a00074e:	bf00      	nop
1a000750:	10000003 	.word	0x10000003

1a000754 <task_bumper_back>:
	}
}

void task_bumper_back( void* taskParmPtr )
{
1a000754:	b500      	push	{lr}
1a000756:	b083      	sub	sp, #12
	TickType_t xPeriodicity = pdMS_TO_TICKS( PERIODE_TEST_MSEG ); // Tarea periódica
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a000758:	f001 fc50 	bl	1a001ffc <xTaskGetTickCount>
1a00075c:	9001      	str	r0, [sp, #4]
1a00075e:	e003      	b.n	1a000768 <task_bumper_back+0x14>
			motorEnable(Motor_ON,MOT_DER);
			motorEnable(Motor_ON,MOT_IZQ);
		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000760:	21fa      	movs	r1, #250	; 0xfa
1a000762:	a801      	add	r0, sp, #4
1a000764:	f001 fd5a 	bl	1a00221c <vTaskDelayUntil>
		taskENTER_CRITICAL();				// disable ISR
1a000768:	f002 f9f4 	bl	1a002b54 <vPortEnterCritical>
		taskEXIT_CRITICAL();				// enable ISR
1a00076c:	f002 fa14 	bl	1a002b98 <vPortExitCritical>
		if(!gpioRead( STOP_BACK )){
1a000770:	200b      	movs	r0, #11
1a000772:	f003 ffba 	bl	1a0046ea <gpioRead>
1a000776:	2800      	cmp	r0, #0
1a000778:	d1f2      	bne.n	1a000760 <task_bumper_back+0xc>
			estado=BUMPERS_BACK;
1a00077a:	4b18      	ldr	r3, [pc, #96]	; (1a0007dc <task_bumper_back+0x88>)
1a00077c:	2204      	movs	r2, #4
1a00077e:	701a      	strb	r2, [r3, #0]
			motorEnable(Motor_OFF,MOT_DER);
1a000780:	2100      	movs	r1, #0
1a000782:	4608      	mov	r0, r1
1a000784:	f7ff fee0 	bl	1a000548 <motorEnable>
			motorEnable(Motor_OFF,MOT_IZQ);
1a000788:	2101      	movs	r1, #1
1a00078a:	2000      	movs	r0, #0
1a00078c:	f7ff fedc 	bl	1a000548 <motorEnable>
			motorSpeed(VEL_ESCAPE, MOT_DER);
1a000790:	2100      	movs	r1, #0
1a000792:	2064      	movs	r0, #100	; 0x64
1a000794:	f7ff fe2e 	bl	1a0003f4 <motorSpeed>
			motorSpeed(VEL_ESCAPE, MOT_IZQ);
1a000798:	2101      	movs	r1, #1
1a00079a:	2064      	movs	r0, #100	; 0x64
1a00079c:	f7ff fe2a 	bl	1a0003f4 <motorSpeed>
			motorEnable(Motor_ON,MOT_DER);
1a0007a0:	2100      	movs	r1, #0
1a0007a2:	2001      	movs	r0, #1
1a0007a4:	f7ff fed0 	bl	1a000548 <motorEnable>
			motorEnable(Motor_ON,MOT_IZQ);
1a0007a8:	2101      	movs	r1, #1
1a0007aa:	4608      	mov	r0, r1
1a0007ac:	f7ff fecc 	bl	1a000548 <motorEnable>
			vTaskDelay(500/portTICK_PERIOD_MS);
1a0007b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0007b4:	f001 fd84 	bl	1a0022c0 <vTaskDelay>
			motorSpeed(0, MOT_DER);
1a0007b8:	2100      	movs	r1, #0
1a0007ba:	4608      	mov	r0, r1
1a0007bc:	f7ff fe1a 	bl	1a0003f4 <motorSpeed>
			motorSpeed(0, MOT_IZQ);
1a0007c0:	2101      	movs	r1, #1
1a0007c2:	2000      	movs	r0, #0
1a0007c4:	f7ff fe16 	bl	1a0003f4 <motorSpeed>
			motorEnable(Motor_ON,MOT_DER);
1a0007c8:	2100      	movs	r1, #0
1a0007ca:	2001      	movs	r0, #1
1a0007cc:	f7ff febc 	bl	1a000548 <motorEnable>
			motorEnable(Motor_ON,MOT_IZQ);
1a0007d0:	2101      	movs	r1, #1
1a0007d2:	4608      	mov	r0, r1
1a0007d4:	f7ff feb8 	bl	1a000548 <motorEnable>
1a0007d8:	e7c2      	b.n	1a000760 <task_bumper_back+0xc>
1a0007da:	bf00      	nop
1a0007dc:	10000003 	.word	0x10000003

1a0007e0 <bumpers_init>:
{
1a0007e0:	b570      	push	{r4, r5, r6, lr}
1a0007e2:	b082      	sub	sp, #8
	gpioConfig(STOP_FRONT, GPIO_INPUT);				//Motor derecho<-----------------------
1a0007e4:	2100      	movs	r1, #0
1a0007e6:	200c      	movs	r0, #12
1a0007e8:	f003 fe74 	bl	1a0044d4 <gpioInit>
	gpioConfig(STOP_BACK, GPIO_INPUT);
1a0007ec:	2100      	movs	r1, #0
1a0007ee:	200b      	movs	r0, #11
1a0007f0:	f003 fe70 	bl	1a0044d4 <gpioInit>
	res1 = xTaskCreate (
1a0007f4:	2400      	movs	r4, #0
1a0007f6:	9401      	str	r4, [sp, #4]
1a0007f8:	2501      	movs	r5, #1
1a0007fa:	9500      	str	r5, [sp, #0]
1a0007fc:	4623      	mov	r3, r4
1a0007fe:	22b4      	movs	r2, #180	; 0xb4
1a000800:	490f      	ldr	r1, [pc, #60]	; (1a000840 <bumpers_init+0x60>)
1a000802:	4810      	ldr	r0, [pc, #64]	; (1a000844 <bumpers_init+0x64>)
1a000804:	f001 fb75 	bl	1a001ef2 <xTaskCreate>
1a000808:	4606      	mov	r6, r0
	res2 = xTaskCreate (
1a00080a:	9401      	str	r4, [sp, #4]
1a00080c:	9500      	str	r5, [sp, #0]
1a00080e:	4623      	mov	r3, r4
1a000810:	22b4      	movs	r2, #180	; 0xb4
1a000812:	490d      	ldr	r1, [pc, #52]	; (1a000848 <bumpers_init+0x68>)
1a000814:	480d      	ldr	r0, [pc, #52]	; (1a00084c <bumpers_init+0x6c>)
1a000816:	f001 fb6c 	bl	1a001ef2 <xTaskCreate>
	configASSERT( (res1 == pdPASS)|| (res2 == pdPASS));
1a00081a:	42ae      	cmp	r6, r5
1a00081c:	d00a      	beq.n	1a000834 <bumpers_init+0x54>
1a00081e:	42a8      	cmp	r0, r5
1a000820:	d008      	beq.n	1a000834 <bumpers_init+0x54>
1a000822:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000826:	f383 8811 	msr	BASEPRI, r3
1a00082a:	f3bf 8f6f 	isb	sy
1a00082e:	f3bf 8f4f 	dsb	sy
1a000832:	e7fe      	b.n	1a000832 <bumpers_init+0x52>
	printf("Bumper's        --> inicializado correctamente.\r\n" );
1a000834:	4806      	ldr	r0, [pc, #24]	; (1a000850 <bumpers_init+0x70>)
1a000836:	f006 fcd9 	bl	1a0071ec <puts>
}
1a00083a:	b002      	add	sp, #8
1a00083c:	bd70      	pop	{r4, r5, r6, pc}
1a00083e:	bf00      	nop
1a000840:	1a00b984 	.word	0x1a00b984
1a000844:	1a0006c5 	.word	0x1a0006c5
1a000848:	1a00b998 	.word	0x1a00b998
1a00084c:	1a000755 	.word	0x1a000755
1a000850:	1a00b9ac 	.word	0x1a00b9ac

1a000854 <task_led1>:
	printf("LED's              --> inicializados correctamente.\r\n" );
}


void task_led1( void* taskParmPtr )
{
1a000854:	b570      	push	{r4, r5, r6, lr}
1a000856:	b082      	sub	sp, #8
	TickType_t xPeriodicity = pdMS_TO_TICKS( led_data[0].periodo ); // Tarea periodica
	TickType_t xTLed_on=pdMS_TO_TICKS(led_data[0].t_on);

	TickType_t xLastWakeTime = xTaskGetTickCount();
1a000858:	f001 fbd0 	bl	1a001ffc <xTaskGetTickCount>
1a00085c:	9001      	str	r0, [sp, #4]
1a00085e:	e003      	b.n	1a000868 <task_led1+0x14>
			vTaskDelay(xTLed_on);
			gpioWrite( LED1, OFF );
		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000860:	4621      	mov	r1, r4
1a000862:	a801      	add	r0, sp, #4
1a000864:	f001 fcda 	bl	1a00221c <vTaskDelayUntil>
		taskENTER_CRITICAL();				// disable ISR
1a000868:	f002 f974 	bl	1a002b54 <vPortEnterCritical>
		xPeriodicity = pdMS_TO_TICKS( led_data[0].periodo );
1a00086c:	4b10      	ldr	r3, [pc, #64]	; (1a0008b0 <task_led1+0x5c>)
1a00086e:	681c      	ldr	r4, [r3, #0]
1a000870:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
1a000874:	fb06 f404 	mul.w	r4, r6, r4
1a000878:	480e      	ldr	r0, [pc, #56]	; (1a0008b4 <task_led1+0x60>)
1a00087a:	fba0 2404 	umull	r2, r4, r0, r4
1a00087e:	09a4      	lsrs	r4, r4, #6
		xTLed_on = pdMS_TO_TICKS( led_data[0].t_on );
1a000880:	685b      	ldr	r3, [r3, #4]
1a000882:	fb06 f603 	mul.w	r6, r6, r3
1a000886:	fba0 3006 	umull	r3, r0, r0, r6
1a00088a:	0985      	lsrs	r5, r0, #6
		taskEXIT_CRITICAL();				// enable ISR
1a00088c:	f002 f984 	bl	1a002b98 <vPortExitCritical>
		if( (xTLed_on) > 0 ){
1a000890:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
1a000894:	d3e4      	bcc.n	1a000860 <task_led1+0xc>
			gpioWrite( LED1, ON );
1a000896:	2101      	movs	r1, #1
1a000898:	202b      	movs	r0, #43	; 0x2b
1a00089a:	f003 fef1 	bl	1a004680 <gpioWrite>
			vTaskDelay(xTLed_on);
1a00089e:	4628      	mov	r0, r5
1a0008a0:	f001 fd0e 	bl	1a0022c0 <vTaskDelay>
			gpioWrite( LED1, OFF );
1a0008a4:	2100      	movs	r1, #0
1a0008a6:	202b      	movs	r0, #43	; 0x2b
1a0008a8:	f003 feea 	bl	1a004680 <gpioWrite>
1a0008ac:	e7d8      	b.n	1a000860 <task_led1+0xc>
1a0008ae:	bf00      	nop
1a0008b0:	10003814 	.word	0x10003814
1a0008b4:	10624dd3 	.word	0x10624dd3

1a0008b8 <task_led2>:
	}
}

void task_led2( void* taskParmPtr )
{
1a0008b8:	b570      	push	{r4, r5, r6, lr}
1a0008ba:	b082      	sub	sp, #8
	TickType_t xPeriodicity = pdMS_TO_TICKS( led_data[1].periodo ); // Tarea periodica
	TickType_t xTLed_on=pdMS_TO_TICKS(led_data[1].t_on);

	TickType_t xLastWakeTime = xTaskGetTickCount();
1a0008bc:	f001 fb9e 	bl	1a001ffc <xTaskGetTickCount>
1a0008c0:	9001      	str	r0, [sp, #4]
1a0008c2:	e003      	b.n	1a0008cc <task_led2+0x14>
			vTaskDelay(xTLed_on);
			gpioWrite( LED2, OFF );
		}

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0008c4:	4621      	mov	r1, r4
1a0008c6:	a801      	add	r0, sp, #4
1a0008c8:	f001 fca8 	bl	1a00221c <vTaskDelayUntil>
		taskENTER_CRITICAL();				// disable ISR
1a0008cc:	f002 f942 	bl	1a002b54 <vPortEnterCritical>
		xPeriodicity = pdMS_TO_TICKS( led_data[1].periodo );
1a0008d0:	4b10      	ldr	r3, [pc, #64]	; (1a000914 <task_led2+0x5c>)
1a0008d2:	689c      	ldr	r4, [r3, #8]
1a0008d4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
1a0008d8:	fb06 f404 	mul.w	r4, r6, r4
1a0008dc:	480e      	ldr	r0, [pc, #56]	; (1a000918 <task_led2+0x60>)
1a0008de:	fba0 2404 	umull	r2, r4, r0, r4
1a0008e2:	09a4      	lsrs	r4, r4, #6
		xTLed_on = pdMS_TO_TICKS( led_data[1].t_on );
1a0008e4:	68db      	ldr	r3, [r3, #12]
1a0008e6:	fb06 f603 	mul.w	r6, r6, r3
1a0008ea:	fba0 3006 	umull	r3, r0, r0, r6
1a0008ee:	0985      	lsrs	r5, r0, #6
		taskEXIT_CRITICAL();				// enable ISR
1a0008f0:	f002 f952 	bl	1a002b98 <vPortExitCritical>
		if( (xTLed_on) > 0 ){
1a0008f4:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
1a0008f8:	d3e4      	bcc.n	1a0008c4 <task_led2+0xc>
			gpioWrite( LED2, ON );
1a0008fa:	2101      	movs	r1, #1
1a0008fc:	202c      	movs	r0, #44	; 0x2c
1a0008fe:	f003 febf 	bl	1a004680 <gpioWrite>
			vTaskDelay(xTLed_on);
1a000902:	4628      	mov	r0, r5
1a000904:	f001 fcdc 	bl	1a0022c0 <vTaskDelay>
			gpioWrite( LED2, OFF );
1a000908:	2100      	movs	r1, #0
1a00090a:	202c      	movs	r0, #44	; 0x2c
1a00090c:	f003 feb8 	bl	1a004680 <gpioWrite>
1a000910:	e7d8      	b.n	1a0008c4 <task_led2+0xc>
1a000912:	bf00      	nop
1a000914:	10003814 	.word	0x10003814
1a000918:	10624dd3 	.word	0x10624dd3

1a00091c <led_init>:
{
1a00091c:	b570      	push	{r4, r5, r6, lr}
1a00091e:	b082      	sub	sp, #8
	for(i = 0 ; i < N_LED ; i++)
1a000920:	2300      	movs	r3, #0
1a000922:	e00b      	b.n	1a00093c <led_init+0x20>
		led_data[i].periodo	= PERIODE_LED2_MSEG;
1a000924:	4a19      	ldr	r2, [pc, #100]	; (1a00098c <led_init+0x70>)
1a000926:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a00092a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		led_data[i].t_on 	=PERIODE_LED2_MSEG*DUTY_CYCLE_LED1;
1a00092e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
1a000932:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000936:	6051      	str	r1, [r2, #4]
	for(i = 0 ; i < N_LED ; i++)
1a000938:	3301      	adds	r3, #1
1a00093a:	b2db      	uxtb	r3, r3
1a00093c:	2b01      	cmp	r3, #1
1a00093e:	d9f1      	bls.n	1a000924 <led_init+0x8>
	res1 = xTaskCreate (
1a000940:	2400      	movs	r4, #0
1a000942:	9401      	str	r4, [sp, #4]
1a000944:	2501      	movs	r5, #1
1a000946:	9500      	str	r5, [sp, #0]
1a000948:	4623      	mov	r3, r4
1a00094a:	22b4      	movs	r2, #180	; 0xb4
1a00094c:	4910      	ldr	r1, [pc, #64]	; (1a000990 <led_init+0x74>)
1a00094e:	4811      	ldr	r0, [pc, #68]	; (1a000994 <led_init+0x78>)
1a000950:	f001 facf 	bl	1a001ef2 <xTaskCreate>
1a000954:	4606      	mov	r6, r0
	res2 = xTaskCreate (
1a000956:	9401      	str	r4, [sp, #4]
1a000958:	9500      	str	r5, [sp, #0]
1a00095a:	4623      	mov	r3, r4
1a00095c:	22b4      	movs	r2, #180	; 0xb4
1a00095e:	490e      	ldr	r1, [pc, #56]	; (1a000998 <led_init+0x7c>)
1a000960:	480e      	ldr	r0, [pc, #56]	; (1a00099c <led_init+0x80>)
1a000962:	f001 fac6 	bl	1a001ef2 <xTaskCreate>
	configASSERT( (res1 == pdPASS)|| (res2 == pdPASS));
1a000966:	42ae      	cmp	r6, r5
1a000968:	d00a      	beq.n	1a000980 <led_init+0x64>
1a00096a:	42a8      	cmp	r0, r5
1a00096c:	d008      	beq.n	1a000980 <led_init+0x64>
1a00096e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000972:	f383 8811 	msr	BASEPRI, r3
1a000976:	f3bf 8f6f 	isb	sy
1a00097a:	f3bf 8f4f 	dsb	sy
1a00097e:	e7fe      	b.n	1a00097e <led_init+0x62>
	printf("LED's              --> inicializados correctamente.\r\n" );
1a000980:	4807      	ldr	r0, [pc, #28]	; (1a0009a0 <led_init+0x84>)
1a000982:	f006 fc33 	bl	1a0071ec <puts>
}
1a000986:	b002      	add	sp, #8
1a000988:	bd70      	pop	{r4, r5, r6, pc}
1a00098a:	bf00      	nop
1a00098c:	10003814 	.word	0x10003814
1a000990:	1a00b9e0 	.word	0x1a00b9e0
1a000994:	1a000855 	.word	0x1a000855
1a000998:	1a00b9ec 	.word	0x1a00b9ec
1a00099c:	1a0008b9 	.word	0x1a0008b9
1a0009a0:	1a00b9f8 	.word	0x1a00b9f8

1a0009a4 <task_mpu9250>:

   }


void task_mpu9250( void* taskParmPtr )
{
1a0009a4:	b500      	push	{lr}
1a0009a6:	b083      	sub	sp, #12
	TickType_t xPeriodicity = pdMS_TO_TICKS( MPU9250_MS ); // Tarea periodica
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a0009a8:	f001 fb28 	bl	1a001ffc <xTaskGetTickCount>
1a0009ac:	9001      	str	r0, [sp, #4]

	while( 1 )
	{
		taskENTER_CRITICAL();				// disable ISR
1a0009ae:	f002 f8d1 	bl	1a002b54 <vPortEnterCritical>
		//Leer el sensor y guardar en estructura de control
		mpu9250Read();
1a0009b2:	f004 f8e1 	bl	1a004b78 <mpu9250Read>
		//            mpu9250GetTemperature_C()
		//          );
		//


		taskEXIT_CRITICAL();				// enable ISR
1a0009b6:	f002 f8ef 	bl	1a002b98 <vPortExitCritical>

		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0009ba:	21c8      	movs	r1, #200	; 0xc8
1a0009bc:	a801      	add	r0, sp, #4
1a0009be:	f001 fc2d 	bl	1a00221c <vTaskDelayUntil>
1a0009c2:	e7f4      	b.n	1a0009ae <task_mpu9250+0xa>

1a0009c4 <mpu9250_init>:
{
1a0009c4:	b500      	push	{lr}
1a0009c6:	b083      	sub	sp, #12
	status = freeRTOS_mpu9250Init(addr);
1a0009c8:	4b11      	ldr	r3, [pc, #68]	; (1a000a10 <mpu9250_init+0x4c>)
1a0009ca:	7818      	ldrb	r0, [r3, #0]
1a0009cc:	f004 fcfa 	bl	1a0053c4 <freeRTOS_mpu9250Init>
	if( status < 0 ){
1a0009d0:	2800      	cmp	r0, #0
1a0009d2:	db16      	blt.n	1a000a02 <mpu9250_init+0x3e>
		printf("IMU MPU9250--> inicializado correctamente.\r\n" );
1a0009d4:	480f      	ldr	r0, [pc, #60]	; (1a000a14 <mpu9250_init+0x50>)
1a0009d6:	f006 fc09 	bl	1a0071ec <puts>
	res1 = xTaskCreate (
1a0009da:	2300      	movs	r3, #0
1a0009dc:	9301      	str	r3, [sp, #4]
1a0009de:	2201      	movs	r2, #1
1a0009e0:	9200      	str	r2, [sp, #0]
1a0009e2:	22b4      	movs	r2, #180	; 0xb4
1a0009e4:	490c      	ldr	r1, [pc, #48]	; (1a000a18 <mpu9250_init+0x54>)
1a0009e6:	480d      	ldr	r0, [pc, #52]	; (1a000a1c <mpu9250_init+0x58>)
1a0009e8:	f001 fa83 	bl	1a001ef2 <xTaskCreate>
	configASSERT( (res1 == pdPASS));
1a0009ec:	2801      	cmp	r0, #1
1a0009ee:	d00c      	beq.n	1a000a0a <mpu9250_init+0x46>
1a0009f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f4:	f383 8811 	msr	BASEPRI, r3
1a0009f8:	f3bf 8f6f 	isb	sy
1a0009fc:	f3bf 8f4f 	dsb	sy
1a000a00:	e7fe      	b.n	1a000a00 <mpu9250_init+0x3c>
		printf("IMU MPU9250--> inicializado NO fue inicializada.\r\n" );
1a000a02:	4807      	ldr	r0, [pc, #28]	; (1a000a20 <mpu9250_init+0x5c>)
1a000a04:	f006 fbf2 	bl	1a0071ec <puts>
		while(1);
1a000a08:	e7fe      	b.n	1a000a08 <mpu9250_init+0x44>
   }
1a000a0a:	b003      	add	sp, #12
1a000a0c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a10:	10000002 	.word	0x10000002
1a000a14:	1a00ba64 	.word	0x1a00ba64
1a000a18:	1a00ba90 	.word	0x1a00ba90
1a000a1c:	1a0009a5 	.word	0x1a0009a5
1a000a20:	1a00ba30 	.word	0x1a00ba30

1a000a24 <lcd_init>:
void uInToChar_sig(int16_t , char *,uint8_t);
void uInToChar(int16_t , char *,uint8_t);
/*==================[declaraciones de funciones externas]====================*/

void lcd_init(t_lcd_data * display)
{
1a000a24:	b570      	push	{r4, r5, r6, lr}
1a000a26:	b082      	sub	sp, #8
1a000a28:	4604      	mov	r4, r0

	BaseType_t res=0;

	taskENTER_CRITICAL();		    // disable ISR
1a000a2a:	f002 f893 	bl	1a002b54 <vPortEnterCritical>
   //i2cInit( I2C0, CLOCK_RATE_I2C ); // El I2C ho habilita el mòdulo acelerómetro

   //delay( LCD_STARTUP_WAIT_MS );   // Wait for stable power (some LCD need that)

   // Inicializar LCD de 16x2 (caracteres x lineas) con cada caracter de 5x8 pixeles
   lcdInit( 16, 2, 5, 8 );
1a000a2e:	2308      	movs	r3, #8
1a000a30:	2205      	movs	r2, #5
1a000a32:	2102      	movs	r1, #2
1a000a34:	2010      	movs	r0, #16
1a000a36:	f004 f835 	bl	1a004aa4 <lcdInit>
   lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a000a3a:	2000      	movs	r0, #0
1a000a3c:	f004 f815 	bl	1a004a6a <lcdCursorSet>
   lcdClear();                     // Borrar la pantalla
1a000a40:	f004 f80a 	bl	1a004a58 <lcdClear>
   taskEXIT_CRITICAL();		   // enable ISR
1a000a44:	f002 f8a8 	bl	1a002b98 <vPortExitCritical>


	display->tOkString[0]='T';
1a000a48:	2354      	movs	r3, #84	; 0x54
1a000a4a:	7023      	strb	r3, [r4, #0]
	display->tOkString[1]='_';
1a000a4c:	235f      	movs	r3, #95	; 0x5f
1a000a4e:	7063      	strb	r3, [r4, #1]
	display->tOkString[2]='O';
1a000a50:	234f      	movs	r3, #79	; 0x4f
1a000a52:	70a3      	strb	r3, [r4, #2]
	display->tOkString[3]='K';
1a000a54:	234b      	movs	r3, #75	; 0x4b
1a000a56:	70e3      	strb	r3, [r4, #3]
	display->tOkString[4]=':';
1a000a58:	203a      	movs	r0, #58	; 0x3a
1a000a5a:	7120      	strb	r0, [r4, #4]
	display->tOkString[5]='\0';
1a000a5c:	2300      	movs	r3, #0
1a000a5e:	7163      	strb	r3, [r4, #5]
	display->countsOk[0]=' ';
1a000a60:	2220      	movs	r2, #32
1a000a62:	71a2      	strb	r2, [r4, #6]
	display->countsOk[1]=' ';
1a000a64:	71e2      	strb	r2, [r4, #7]
	display->countsOk[2]='0';
1a000a66:	2130      	movs	r1, #48	; 0x30
1a000a68:	7221      	strb	r1, [r4, #8]
	display->countsOk[3]=' ';
1a000a6a:	7262      	strb	r2, [r4, #9]
	display->countsOk[4]='\0';
1a000a6c:	72a3      	strb	r3, [r4, #10]
	display->cmdString[0]='C';
1a000a6e:	2543      	movs	r5, #67	; 0x43
1a000a70:	73a5      	strb	r5, [r4, #14]
	display->cmdString[1]='M';
1a000a72:	254d      	movs	r5, #77	; 0x4d
1a000a74:	73e5      	strb	r5, [r4, #15]
	display->cmdString[2]='D';
1a000a76:	2644      	movs	r6, #68	; 0x44
1a000a78:	7426      	strb	r6, [r4, #16]
	display->cmdString[3]=' ';
1a000a7a:	7462      	strb	r2, [r4, #17]
	display->cmdString[4]=':';
1a000a7c:	74a0      	strb	r0, [r4, #18]
	display->cmdString[5]='\0';
1a000a7e:	74e3      	strb	r3, [r4, #19]
	display->comamdo[0]='N';
1a000a80:	264e      	movs	r6, #78	; 0x4e
1a000a82:	7526      	strb	r6, [r4, #20]
	display->comamdo[1]='N';
1a000a84:	7566      	strb	r6, [r4, #21]
	display->comamdo[2]='N';
1a000a86:	75a6      	strb	r6, [r4, #22]
	display->comamdo[3]=' ';
1a000a88:	75e2      	strb	r2, [r4, #23]
	display->comamdo[4]='\0';
1a000a8a:	7623      	strb	r3, [r4, #24]
	display->motor0String[0]='M';
1a000a8c:	7665      	strb	r5, [r4, #25]
	display->motor0String[1]='0';
1a000a8e:	76a1      	strb	r1, [r4, #26]
	display->motor0String[2]=':';
1a000a90:	76e0      	strb	r0, [r4, #27]
	display->motor0String[3]='\0';
1a000a92:	7723      	strb	r3, [r4, #28]
	display->speedM0[0]=' ';
1a000a94:	7762      	strb	r2, [r4, #29]
	display->speedM0[1]=' ';
1a000a96:	77a2      	strb	r2, [r4, #30]
	display->speedM0[2]='0';
1a000a98:	77e1      	strb	r1, [r4, #31]
	display->speedM0[3]='+';
1a000a9a:	262b      	movs	r6, #43	; 0x2b
1a000a9c:	f884 6020 	strb.w	r6, [r4, #32]
	display->speedM0[4]='\0';
1a000aa0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	display->motor1String[0]='M';
1a000aa4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	display->motor1String[1]='1';
1a000aa8:	2531      	movs	r5, #49	; 0x31
1a000aaa:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
	display->motor1String[2]=':';
1a000aae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	display->motor1String[3]='\0';
1a000ab2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	display->speedM1[0]=' ';
1a000ab6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	display->speedM1[1]=' ';
1a000aba:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	display->speedM1[2]='0';
1a000abe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
	display->speedM1[3]='+';
1a000ac2:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
	display->speedM1[4]='\0';
1a000ac6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a


	//uInToChar(motores.mot1_veloc, display->countsOk,3);

	// Crear tareas en freeRTOS
	res = xTaskCreate (
1a000aca:	9301      	str	r3, [sp, #4]
1a000acc:	2301      	movs	r3, #1
1a000ace:	9300      	str	r3, [sp, #0]
1a000ad0:	4623      	mov	r3, r4
1a000ad2:	22b4      	movs	r2, #180	; 0xb4
1a000ad4:	4909      	ldr	r1, [pc, #36]	; (1a000afc <lcd_init+0xd8>)
1a000ad6:	480a      	ldr	r0, [pc, #40]	; (1a000b00 <lcd_init+0xdc>)
1a000ad8:	f001 fa0b 	bl	1a001ef2 <xTaskCreate>
			  tskIDLE_PRIORITY+1,			// Prioridad de la tarea
			  0								// Puntero a la tarea creada en el sistema
		  );

	// Gestion de errores
	configASSERT( (res == pdPASS));
1a000adc:	2801      	cmp	r0, #1
1a000ade:	d008      	beq.n	1a000af2 <lcd_init+0xce>
1a000ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae4:	f383 8811 	msr	BASEPRI, r3
1a000ae8:	f3bf 8f6f 	isb	sy
1a000aec:	f3bf 8f4f 	dsb	sy
1a000af0:	e7fe      	b.n	1a000af0 <lcd_init+0xcc>

	printf("LCD                --> inicializado correctamente.\r\n" );
1a000af2:	4804      	ldr	r0, [pc, #16]	; (1a000b04 <lcd_init+0xe0>)
1a000af4:	f006 fb7a 	bl	1a0071ec <puts>
}
1a000af8:	b002      	add	sp, #8
1a000afa:	bd70      	pop	{r4, r5, r6, pc}
1a000afc:	1a00baa0 	.word	0x1a00baa0
1a000b00:	1a000c11 	.word	0x1a000c11
1a000b04:	1a00baac 	.word	0x1a00baac

1a000b08 <lcd_display>:
		// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
	}
}

void lcd_display( t_lcd_data * display){
1a000b08:	b510      	push	{r4, lr}
1a000b0a:	4604      	mov	r4, r0
	lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a000b0c:	2100      	movs	r1, #0
1a000b0e:	4608      	mov	r0, r1
1a000b10:	f003 ff7a 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw(display->tOkString);
1a000b14:	4620      	mov	r0, r4
1a000b16:	f003 ffb2 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY( 5, 0 );
1a000b1a:	2100      	movs	r1, #0
1a000b1c:	2005      	movs	r0, #5
1a000b1e:	f003 ff73 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw(display->countsOk);
1a000b22:	1da0      	adds	r0, r4, #6
1a000b24:	f003 ffab 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY( 0, 1 );
1a000b28:	2101      	movs	r1, #1
1a000b2a:	2000      	movs	r0, #0
1a000b2c:	f003 ff6c 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw( display->cmdString);
1a000b30:	f104 000e 	add.w	r0, r4, #14
1a000b34:	f003 ffa3 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY( 5, 1 );
1a000b38:	2101      	movs	r1, #1
1a000b3a:	2005      	movs	r0, #5
1a000b3c:	f003 ff64 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw(display->comamdo);
1a000b40:	f104 0014 	add.w	r0, r4, #20
1a000b44:	f003 ff9b 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY( 9 , 0 );
1a000b48:	2100      	movs	r1, #0
1a000b4a:	2009      	movs	r0, #9
1a000b4c:	f003 ff5c 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw( display->motor0String );
1a000b50:	f104 0019 	add.w	r0, r4, #25
1a000b54:	f003 ff93 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY(12 , 0 );
1a000b58:	2100      	movs	r1, #0
1a000b5a:	200c      	movs	r0, #12
1a000b5c:	f003 ff54 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw(display->speedM0);
1a000b60:	f104 001d 	add.w	r0, r4, #29
1a000b64:	f003 ff8b 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY( 9 , 1 );
1a000b68:	2101      	movs	r1, #1
1a000b6a:	2009      	movs	r0, #9
1a000b6c:	f003 ff4c 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw( display->motor1String );
1a000b70:	f104 0022 	add.w	r0, r4, #34	; 0x22
1a000b74:	f003 ff83 	bl	1a004a7e <lcdSendStringRaw>
	lcdGoToXY(12 , 1 );
1a000b78:	2101      	movs	r1, #1
1a000b7a:	200c      	movs	r0, #12
1a000b7c:	f003 ff44 	bl	1a004a08 <lcdGoToXY>
	lcdSendStringRaw(display->speedM1);
1a000b80:	f104 0026 	add.w	r0, r4, #38	; 0x26
1a000b84:	f003 ff7b 	bl	1a004a7e <lcdSendStringRaw>
}
1a000b88:	bd10      	pop	{r4, pc}
1a000b8a:	Address 0x000000001a000b8a is out of bounds.


1a000b8c <uInToChar_sig>:

void uInToChar_sig(int16_t value, char *str,uint8_t cant)
{
1a000b8c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t i,j=cant-1;
1a000b8e:	1e54      	subs	r4, r2, #1
1a000b90:	b2e4      	uxtb	r4, r4

	//evaluo el signo
	str[cant]='+';
1a000b92:	232b      	movs	r3, #43	; 0x2b
1a000b94:	548b      	strb	r3, [r1, r2]
    if(value<0){
1a000b96:	2800      	cmp	r0, #0
1a000b98:	db14      	blt.n	1a000bc4 <uInToChar_sig+0x38>
{
1a000b9a:	2500      	movs	r5, #0
    str[cant]='-';
    value=-value;
    }

	for(i=0;i<cant;i++){
1a000b9c:	4295      	cmp	r5, r2
1a000b9e:	d216      	bcs.n	1a000bce <uInToChar_sig+0x42>
		str[j]=(value%10)+'0';
1a000ba0:	4e0c      	ldr	r6, [pc, #48]	; (1a000bd4 <uInToChar_sig+0x48>)
1a000ba2:	fb86 3600 	smull	r3, r6, r6, r0
1a000ba6:	17c3      	asrs	r3, r0, #31
1a000ba8:	ebc3 03a6 	rsb	r3, r3, r6, asr #2
1a000bac:	eb03 0783 	add.w	r7, r3, r3, lsl #2
1a000bb0:	007e      	lsls	r6, r7, #1
1a000bb2:	1b80      	subs	r0, r0, r6
1a000bb4:	3030      	adds	r0, #48	; 0x30
1a000bb6:	5508      	strb	r0, [r1, r4]
		value=value/10;
1a000bb8:	b218      	sxth	r0, r3
		j--;
1a000bba:	3c01      	subs	r4, #1
1a000bbc:	b2e4      	uxtb	r4, r4
	for(i=0;i<cant;i++){
1a000bbe:	3501      	adds	r5, #1
1a000bc0:	b2ed      	uxtb	r5, r5
1a000bc2:	e7eb      	b.n	1a000b9c <uInToChar_sig+0x10>
    str[cant]='-';
1a000bc4:	232d      	movs	r3, #45	; 0x2d
1a000bc6:	548b      	strb	r3, [r1, r2]
    value=-value;
1a000bc8:	4240      	negs	r0, r0
1a000bca:	b200      	sxth	r0, r0
1a000bcc:	e7e5      	b.n	1a000b9a <uInToChar_sig+0xe>
	}

}
1a000bce:	bcf0      	pop	{r4, r5, r6, r7}
1a000bd0:	4770      	bx	lr
1a000bd2:	bf00      	nop
1a000bd4:	66666667 	.word	0x66666667

1a000bd8 <uInToChar>:

void uInToChar(int16_t value, char *str,uint8_t cant)
{
1a000bd8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t i,j=cant-1;
1a000bda:	1e55      	subs	r5, r2, #1
1a000bdc:	b2ed      	uxtb	r5, r5

	for(i=0;i<cant;i++){
1a000bde:	2600      	movs	r6, #0
1a000be0:	4296      	cmp	r6, r2
1a000be2:	d211      	bcs.n	1a000c08 <uInToChar+0x30>
		str[j]=(value%10)+'0';
1a000be4:	4b09      	ldr	r3, [pc, #36]	; (1a000c0c <uInToChar+0x34>)
1a000be6:	fb83 4300 	smull	r4, r3, r3, r0
1a000bea:	17c4      	asrs	r4, r0, #31
1a000bec:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
1a000bf0:	eb04 0784 	add.w	r7, r4, r4, lsl #2
1a000bf4:	007b      	lsls	r3, r7, #1
1a000bf6:	1ac3      	subs	r3, r0, r3
1a000bf8:	3330      	adds	r3, #48	; 0x30
1a000bfa:	554b      	strb	r3, [r1, r5]
		value=value/10;
1a000bfc:	b220      	sxth	r0, r4
		j--;
1a000bfe:	3d01      	subs	r5, #1
1a000c00:	b2ed      	uxtb	r5, r5
	for(i=0;i<cant;i++){
1a000c02:	3601      	adds	r6, #1
1a000c04:	b2f6      	uxtb	r6, r6
1a000c06:	e7eb      	b.n	1a000be0 <uInToChar+0x8>
	}

}
1a000c08:	bcf0      	pop	{r4, r5, r6, r7}
1a000c0a:	4770      	bx	lr
1a000c0c:	66666667 	.word	0x66666667

1a000c10 <task_lcd>:
{
1a000c10:	b530      	push	{r4, r5, lr}
1a000c12:	b083      	sub	sp, #12
1a000c14:	4604      	mov	r4, r0
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a000c16:	f001 f9f1 	bl	1a001ffc <xTaskGetTickCount>
1a000c1a:	9001      	str	r0, [sp, #4]
		uInToChar_sig(motores.mot1_veloc, ptr_lcd_data->speedM0,3);
1a000c1c:	4d0e      	ldr	r5, [pc, #56]	; (1a000c58 <task_lcd+0x48>)
1a000c1e:	2203      	movs	r2, #3
1a000c20:	f104 011d 	add.w	r1, r4, #29
1a000c24:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
1a000c28:	f7ff ffb0 	bl	1a000b8c <uInToChar_sig>
		uInToChar_sig(motores.mot2_veloc, ptr_lcd_data->speedM1,3);
1a000c2c:	2203      	movs	r2, #3
1a000c2e:	f104 0126 	add.w	r1, r4, #38	; 0x26
1a000c32:	f9b5 0008 	ldrsh.w	r0, [r5, #8]
1a000c36:	f7ff ffa9 	bl	1a000b8c <uInToChar_sig>
		uInToChar(ptr_lcd_data->cuenta, ptr_lcd_data->countsOk,3);
1a000c3a:	2203      	movs	r2, #3
1a000c3c:	1da1      	adds	r1, r4, #6
1a000c3e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
1a000c42:	f7ff ffc9 	bl	1a000bd8 <uInToChar>
		lcd_display(ptr_lcd_data);
1a000c46:	4620      	mov	r0, r4
1a000c48:	f7ff ff5e 	bl	1a000b08 <lcd_display>
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000c50:	a801      	add	r0, sp, #4
1a000c52:	f001 fae3 	bl	1a00221c <vTaskDelayUntil>
1a000c56:	e7e1      	b.n	1a000c1c <task_lcd+0xc>
1a000c58:	100037d4 	.word	0x100037d4

1a000c5c <fsmRobotInit>:
extern estadoMotores_t motores;
extern uart232_rx_t data_uart232_rx;
/*==================[internal functions definition]==========================*/
void buffer_clean(uint8_t *buffer1);
/*==================[external functions definition]==========================*/
void fsmRobotInit(void* taskParam){
1a000c5c:	b500      	push	{lr}
1a000c5e:	b083      	sub	sp, #12
1a000c60:	4603      	mov	r3, r0
	BaseType_t res=0;
	estadoRobot_t * ptr_estado;
	ptr_estado=(estadoRobot_t*)taskParam;

	*ptr_estado=ESPERA;		// Condici�n inicial del Robot
1a000c62:	2200      	movs	r2, #0
1a000c64:	7002      	strb	r2, [r0, #0]


	// Crear tareas en freeRTOS
	res = xTaskCreate (
1a000c66:	9201      	str	r2, [sp, #4]
1a000c68:	2201      	movs	r2, #1
1a000c6a:	9200      	str	r2, [sp, #0]
1a000c6c:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a000c70:	4908      	ldr	r1, [pc, #32]	; (1a000c94 <fsmRobotInit+0x38>)
1a000c72:	4809      	ldr	r0, [pc, #36]	; (1a000c98 <fsmRobotInit+0x3c>)
1a000c74:	f001 f93d 	bl	1a001ef2 <xTaskCreate>
			  tskIDLE_PRIORITY+1,			// Prioridad de la tarea
			  0								// Puntero a la tarea creada en el sistema
		  );

	// Gestion de errores
	configASSERT( (res == pdPASS));
1a000c78:	2801      	cmp	r0, #1
1a000c7a:	d008      	beq.n	1a000c8e <fsmRobotInit+0x32>
1a000c7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c80:	f383 8811 	msr	BASEPRI, r3
1a000c84:	f3bf 8f6f 	isb	sy
1a000c88:	f3bf 8f4f 	dsb	sy
1a000c8c:	e7fe      	b.n	1a000c8c <fsmRobotInit+0x30>
}
1a000c8e:	b003      	add	sp, #12
1a000c90:	f85d fb04 	ldr.w	pc, [sp], #4
1a000c94:	1a00bbe4 	.word	0x1a00bbe4
1a000c98:	1a001155 	.word	0x1a001155

1a000c9c <validar_dato_rx>:
uint8_t validar_dato_rx(uint8_t *buffer){
	uint8_t flag=0;
	uint8_t flag_stop;
	// Verifico el fin de la trama que debe ser "_55"
	//Busco el último '5'
	for (flag_stop=LONG_BUFFER_RX;flag_stop>3;flag_stop--){
1a000c9c:	2332      	movs	r3, #50	; 0x32
1a000c9e:	2b03      	cmp	r3, #3
1a000ca0:	d905      	bls.n	1a000cae <validar_dato_rx+0x12>
		if(buffer[flag_stop]=='5') break;
1a000ca2:	5cc2      	ldrb	r2, [r0, r3]
1a000ca4:	2a35      	cmp	r2, #53	; 0x35
1a000ca6:	d002      	beq.n	1a000cae <validar_dato_rx+0x12>
	for (flag_stop=LONG_BUFFER_RX;flag_stop>3;flag_stop--){
1a000ca8:	3b01      	subs	r3, #1
1a000caa:	b2db      	uxtb	r3, r3
1a000cac:	e7f7      	b.n	1a000c9e <validar_dato_rx+0x2>
		}
	if(flag_stop>=3){
1a000cae:	2b02      	cmp	r3, #2
1a000cb0:	d90d      	bls.n	1a000cce <validar_dato_rx+0x32>
		flag_stop--;
1a000cb2:	1e5a      	subs	r2, r3, #1
1a000cb4:	b2d2      	uxtb	r2, r2
		if(buffer[flag_stop]=='5'){
1a000cb6:	5c82      	ldrb	r2, [r0, r2]
1a000cb8:	2a35      	cmp	r2, #53	; 0x35
1a000cba:	d001      	beq.n	1a000cc0 <validar_dato_rx+0x24>
	uint8_t flag=0;
1a000cbc:	2000      	movs	r0, #0
1a000cbe:	4770      	bx	lr
			flag_stop--;
1a000cc0:	3b02      	subs	r3, #2
1a000cc2:	b2db      	uxtb	r3, r3
			if(buffer[flag_stop]=='_') flag=1;
1a000cc4:	5cc3      	ldrb	r3, [r0, r3]
1a000cc6:	2b5f      	cmp	r3, #95	; 0x5f
1a000cc8:	d003      	beq.n	1a000cd2 <validar_dato_rx+0x36>
	uint8_t flag=0;
1a000cca:	2000      	movs	r0, #0
1a000ccc:	4770      	bx	lr
1a000cce:	2000      	movs	r0, #0
1a000cd0:	4770      	bx	lr
			if(buffer[flag_stop]=='_') flag=1;
1a000cd2:	2001      	movs	r0, #1
			}
		}
	return flag;
}
1a000cd4:	4770      	bx	lr

1a000cd6 <obtener_pwm>:

// obtener_pwm devuelve un entero sin signo con el
// valor del pwm
uint8_t obtener_pwm(uint8_t *buffer ){
1a000cd6:	b530      	push	{r4, r5, lr}
1a000cd8:	b083      	sub	sp, #12
1a000cda:	4605      	mov	r5, r0
	uint8_t dato_str_pwm[3];
	uint8_t dato_pwm;
	uint8_t flag_stop;
	// Verifico el fin de la trama que debe ser "_55"
	//En flag_stop me queda el '_'
	for (flag_stop=LONG_BUFFER_RX;flag_stop>3;flag_stop--){
1a000cdc:	2332      	movs	r3, #50	; 0x32
1a000cde:	2b03      	cmp	r3, #3
1a000ce0:	d905      	bls.n	1a000cee <obtener_pwm+0x18>
		if(buffer[flag_stop]=='5') break;
1a000ce2:	5cea      	ldrb	r2, [r5, r3]
1a000ce4:	2a35      	cmp	r2, #53	; 0x35
1a000ce6:	d002      	beq.n	1a000cee <obtener_pwm+0x18>
	for (flag_stop=LONG_BUFFER_RX;flag_stop>3;flag_stop--){
1a000ce8:	3b01      	subs	r3, #1
1a000cea:	b2db      	uxtb	r3, r3
1a000cec:	e7f7      	b.n	1a000cde <obtener_pwm+0x8>
		}
	if(flag_stop>=3){
1a000cee:	2b02      	cmp	r3, #2
1a000cf0:	d905      	bls.n	1a000cfe <obtener_pwm+0x28>
		flag_stop--;
1a000cf2:	1e5a      	subs	r2, r3, #1
1a000cf4:	b2d2      	uxtb	r2, r2
		if(buffer[flag_stop]=='5'){
1a000cf6:	5ca8      	ldrb	r0, [r5, r2]
1a000cf8:	2835      	cmp	r0, #53	; 0x35
1a000cfa:	d009      	beq.n	1a000d10 <obtener_pwm+0x3a>
		flag_stop--;
1a000cfc:	4613      	mov	r3, r2
			flag_stop--;
			}
		}
	flag_stop--;
1a000cfe:	3b01      	subs	r3, #1
1a000d00:	b2dc      	uxtb	r4, r3
	if(flag_stop==8){		// Son tres caracteres
1a000d02:	2c08      	cmp	r4, #8
1a000d04:	d007      	beq.n	1a000d16 <obtener_pwm+0x40>
			dato_str_pwm[i-flag_stop+3]=buffer[i];
			}
		// Conversión a entero
		dato_pwm=atoi(dato_str_pwm);
	}
	if(flag_stop==7){		// Son dos caracteres
1a000d06:	2c07      	cmp	r4, #7
1a000d08:	d018      	beq.n	1a000d3c <obtener_pwm+0x66>
			}
		// Conversión a entero
		dato_pwm=atoi(dato_str_pwm);
	}
	return dato_pwm;
}
1a000d0a:	4608      	mov	r0, r1
1a000d0c:	b003      	add	sp, #12
1a000d0e:	bd30      	pop	{r4, r5, pc}
			flag_stop--;
1a000d10:	3b02      	subs	r3, #2
1a000d12:	b2db      	uxtb	r3, r3
1a000d14:	e7f3      	b.n	1a000cfe <obtener_pwm+0x28>
		for (i=flag_stop;i>(flag_stop-3);i--){
1a000d16:	4623      	mov	r3, r4
1a000d18:	1ea2      	subs	r2, r4, #2
1a000d1a:	429a      	cmp	r2, r3
1a000d1c:	dc09      	bgt.n	1a000d32 <obtener_pwm+0x5c>
			dato_str_pwm[i-flag_stop+3]=buffer[i];
1a000d1e:	1b1a      	subs	r2, r3, r4
1a000d20:	3203      	adds	r2, #3
1a000d22:	5ce9      	ldrb	r1, [r5, r3]
1a000d24:	a802      	add	r0, sp, #8
1a000d26:	4402      	add	r2, r0
1a000d28:	f802 1c04 	strb.w	r1, [r2, #-4]
		for (i=flag_stop;i>(flag_stop-3);i--){
1a000d2c:	3b01      	subs	r3, #1
1a000d2e:	b2db      	uxtb	r3, r3
1a000d30:	e7f2      	b.n	1a000d18 <obtener_pwm+0x42>
		dato_pwm=atoi(dato_str_pwm);
1a000d32:	a801      	add	r0, sp, #4
1a000d34:	f005 fb0a 	bl	1a00634c <atoi>
1a000d38:	b2c1      	uxtb	r1, r0
1a000d3a:	e7e4      	b.n	1a000d06 <obtener_pwm+0x30>
		for (i=flag_stop;i>(flag_stop-2);i--){
1a000d3c:	4623      	mov	r3, r4
1a000d3e:	1e62      	subs	r2, r4, #1
1a000d40:	429a      	cmp	r2, r3
1a000d42:	dc09      	bgt.n	1a000d58 <obtener_pwm+0x82>
			dato_str_pwm[i-flag_stop+3]=buffer[i];
1a000d44:	1b1a      	subs	r2, r3, r4
1a000d46:	3203      	adds	r2, #3
1a000d48:	5ce9      	ldrb	r1, [r5, r3]
1a000d4a:	a802      	add	r0, sp, #8
1a000d4c:	4402      	add	r2, r0
1a000d4e:	f802 1c04 	strb.w	r1, [r2, #-4]
		for (i=flag_stop;i>(flag_stop-2);i--){
1a000d52:	3b01      	subs	r3, #1
1a000d54:	b2db      	uxtb	r3, r3
1a000d56:	e7f2      	b.n	1a000d3e <obtener_pwm+0x68>
		dato_pwm=atoi(dato_str_pwm);
1a000d58:	a801      	add	r0, sp, #4
1a000d5a:	f005 faf7 	bl	1a00634c <atoi>
1a000d5e:	b2c1      	uxtb	r1, r0
1a000d60:	e7d3      	b.n	1a000d0a <obtener_pwm+0x34>
1a000d62:	Address 0x000000001a000d62 is out of bounds.


1a000d64 <itoa>:

char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000d64:	1e93      	subs	r3, r2, #2
1a000d66:	2b22      	cmp	r3, #34	; 0x22
1a000d68:	d802      	bhi.n	1a000d70 <itoa+0xc>
char* itoa(int value, char* result, int base) {
1a000d6a:	b4f0      	push	{r4, r5, r6, r7}

   char* ptr = result, *ptr1 = result, tmp_char;
1a000d6c:	460e      	mov	r6, r1
1a000d6e:	e005      	b.n	1a000d7c <itoa+0x18>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000d70:	2300      	movs	r3, #0
1a000d72:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a000d74:	4608      	mov	r0, r1
1a000d76:	4770      	bx	lr
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000d78:	461e      	mov	r6, r3
      value /= base;
1a000d7a:	4628      	mov	r0, r5
1a000d7c:	fb90 f5f2 	sdiv	r5, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000d80:	fb02 0415 	mls	r4, r2, r5, r0
1a000d84:	3423      	adds	r4, #35	; 0x23
1a000d86:	4633      	mov	r3, r6
1a000d88:	4f0d      	ldr	r7, [pc, #52]	; (1a000dc0 <itoa+0x5c>)
1a000d8a:	5d3c      	ldrb	r4, [r7, r4]
1a000d8c:	f803 4b01 	strb.w	r4, [r3], #1
   } while ( value );
1a000d90:	2d00      	cmp	r5, #0
1a000d92:	d1f1      	bne.n	1a000d78 <itoa+0x14>
   if (tmp_value < 0) *ptr++ = '-';
1a000d94:	2800      	cmp	r0, #0
1a000d96:	db04      	blt.n	1a000da2 <itoa+0x3e>
   *ptr-- = '\0';
1a000d98:	2200      	movs	r2, #0
1a000d9a:	f803 2901 	strb.w	r2, [r3], #-1
   char* ptr = result, *ptr1 = result, tmp_char;
1a000d9e:	460a      	mov	r2, r1
   while(ptr1 < ptr) {
1a000da0:	e009      	b.n	1a000db6 <itoa+0x52>
   if (tmp_value < 0) *ptr++ = '-';
1a000da2:	222d      	movs	r2, #45	; 0x2d
1a000da4:	701a      	strb	r2, [r3, #0]
1a000da6:	1cb3      	adds	r3, r6, #2
1a000da8:	e7f6      	b.n	1a000d98 <itoa+0x34>
      tmp_char = *ptr;
1a000daa:	7818      	ldrb	r0, [r3, #0]
      *ptr--= *ptr1;
1a000dac:	7814      	ldrb	r4, [r2, #0]
1a000dae:	f803 4901 	strb.w	r4, [r3], #-1
      *ptr1++ = tmp_char;
1a000db2:	f802 0b01 	strb.w	r0, [r2], #1
   while(ptr1 < ptr) {
1a000db6:	4293      	cmp	r3, r2
1a000db8:	d8f7      	bhi.n	1a000daa <itoa+0x46>
}
1a000dba:	4608      	mov	r0, r1
1a000dbc:	bcf0      	pop	{r4, r5, r6, r7}
1a000dbe:	4770      	bx	lr
1a000dc0:	1a00bbf0 	.word	0x1a00bbf0

1a000dc4 <buffer_clean>:

void buffer_clean(uint8_t *buffer1)
{
	uint8_t index;
	if(&buffer1==&data_uart232_rx.buffer_rx) data_uart232_rx.cuenta=0;
	for (index=0;index<LONG_BUFFER_RX;index++){
1a000dc4:	2300      	movs	r3, #0
1a000dc6:	2b31      	cmp	r3, #49	; 0x31
1a000dc8:	d804      	bhi.n	1a000dd4 <buffer_clean+0x10>
		buffer1[index]=' ';
1a000dca:	2220      	movs	r2, #32
1a000dcc:	54c2      	strb	r2, [r0, r3]
	for (index=0;index<LONG_BUFFER_RX;index++){
1a000dce:	3301      	adds	r3, #1
1a000dd0:	b2db      	uxtb	r3, r3
1a000dd2:	e7f8      	b.n	1a000dc6 <buffer_clean+0x2>
	}
}
1a000dd4:	4770      	bx	lr
1a000dd6:	Address 0x000000001a000dd6 is out of bounds.


1a000dd8 <comando>:
void comando(uint8_t *command, uint8_t longitud){
1a000dd8:	b530      	push	{r4, r5, lr}
1a000dda:	b091      	sub	sp, #68	; 0x44
1a000ddc:	4604      	mov	r4, r0
	buffer_clean(mensaje);
1a000dde:	a803      	add	r0, sp, #12
1a000de0:	f7ff fff0 	bl	1a000dc4 <buffer_clean>
	if(!strncmp(command,"LASER_DER=ON",12)){
1a000de4:	220c      	movs	r2, #12
1a000de6:	4998      	ldr	r1, [pc, #608]	; (1a001048 <comando+0x270>)
1a000de8:	4620      	mov	r0, r4
1a000dea:	f006 fcb7 	bl	1a00775c <strncmp>
1a000dee:	2800      	cmp	r0, #0
1a000df0:	d038      	beq.n	1a000e64 <comando+0x8c>
	flag=0;
1a000df2:	2500      	movs	r5, #0
	if(!strncmp(command,"LASER_DER=OFF",13)){
1a000df4:	220d      	movs	r2, #13
1a000df6:	4995      	ldr	r1, [pc, #596]	; (1a00104c <comando+0x274>)
1a000df8:	4620      	mov	r0, r4
1a000dfa:	f006 fcaf 	bl	1a00775c <strncmp>
1a000dfe:	2800      	cmp	r0, #0
1a000e00:	d03d      	beq.n	1a000e7e <comando+0xa6>
	if(!strncmp(command,"LASER_IZQ=ON",12)){
1a000e02:	220c      	movs	r2, #12
1a000e04:	4992      	ldr	r1, [pc, #584]	; (1a001050 <comando+0x278>)
1a000e06:	4620      	mov	r0, r4
1a000e08:	f006 fca8 	bl	1a00775c <strncmp>
1a000e0c:	2800      	cmp	r0, #0
1a000e0e:	d043      	beq.n	1a000e98 <comando+0xc0>
	if(!strncmp(command,"LASER_IZQ=OFF",13)){
1a000e10:	220d      	movs	r2, #13
1a000e12:	4990      	ldr	r1, [pc, #576]	; (1a001054 <comando+0x27c>)
1a000e14:	4620      	mov	r0, r4
1a000e16:	f006 fca1 	bl	1a00775c <strncmp>
1a000e1a:	2800      	cmp	r0, #0
1a000e1c:	d049      	beq.n	1a000eb2 <comando+0xda>
	if(!strncmp(command,"PWM_0=",6)){					// ojo el comando recibido tiene el valor del PWM
1a000e1e:	2206      	movs	r2, #6
1a000e20:	498d      	ldr	r1, [pc, #564]	; (1a001058 <comando+0x280>)
1a000e22:	4620      	mov	r0, r4
1a000e24:	f006 fc9a 	bl	1a00775c <strncmp>
1a000e28:	2800      	cmp	r0, #0
1a000e2a:	d04f      	beq.n	1a000ecc <comando+0xf4>
	if(!strncmp(command,"PWM_1=",6)){					// ojo el comando recibido tiene el valor del PWM
1a000e2c:	2206      	movs	r2, #6
1a000e2e:	498b      	ldr	r1, [pc, #556]	; (1a00105c <comando+0x284>)
1a000e30:	4620      	mov	r0, r4
1a000e32:	f006 fc93 	bl	1a00775c <strncmp>
1a000e36:	2800      	cmp	r0, #0
1a000e38:	d078      	beq.n	1a000f2c <comando+0x154>
	if(!strncmp(command,"STOP_MOT",8)){
1a000e3a:	2208      	movs	r2, #8
1a000e3c:	4988      	ldr	r1, [pc, #544]	; (1a001060 <comando+0x288>)
1a000e3e:	4620      	mov	r0, r4
1a000e40:	f006 fc8c 	bl	1a00775c <strncmp>
1a000e44:	2800      	cmp	r0, #0
1a000e46:	f000 80a1 	beq.w	1a000f8c <comando+0x1b4>
	if(!strncmp(command,"TEST_BUMPERS",12)){
1a000e4a:	220c      	movs	r2, #12
1a000e4c:	4985      	ldr	r1, [pc, #532]	; (1a001064 <comando+0x28c>)
1a000e4e:	4620      	mov	r0, r4
1a000e50:	f006 fc84 	bl	1a00775c <strncmp>
1a000e54:	2800      	cmp	r0, #0
1a000e56:	f000 80b2 	beq.w	1a000fbe <comando+0x1e6>
	if(flag==0)	printf("Comando no reconocido\n");
1a000e5a:	2d00      	cmp	r5, #0
1a000e5c:	f000 80ef 	beq.w	1a00103e <comando+0x266>
}
1a000e60:	b011      	add	sp, #68	; 0x44
1a000e62:	bd30      	pop	{r4, r5, pc}
		laser_set("LASER_DER", ON);
1a000e64:	2101      	movs	r1, #1
1a000e66:	4880      	ldr	r0, [pc, #512]	; (1a001068 <comando+0x290>)
1a000e68:	f7ff fc10 	bl	1a00068c <laser_set>
		uartWriteString( UART_232, "LASER_DER=ON\n");
1a000e6c:	497f      	ldr	r1, [pc, #508]	; (1a00106c <comando+0x294>)
1a000e6e:	2005      	movs	r0, #5
1a000e70:	f003 f994 	bl	1a00419c <uartWriteString>
		printf("LASER_DER=ON\n");
1a000e74:	4874      	ldr	r0, [pc, #464]	; (1a001048 <comando+0x270>)
1a000e76:	f006 f9b9 	bl	1a0071ec <puts>
		flag=1;
1a000e7a:	2501      	movs	r5, #1
1a000e7c:	e7ba      	b.n	1a000df4 <comando+0x1c>
		laser_set("LASER_DER", OFF);
1a000e7e:	2100      	movs	r1, #0
1a000e80:	4879      	ldr	r0, [pc, #484]	; (1a001068 <comando+0x290>)
1a000e82:	f7ff fc03 	bl	1a00068c <laser_set>
		uartWriteString( UART_232, "LASER_DER=OFF\n");
1a000e86:	497a      	ldr	r1, [pc, #488]	; (1a001070 <comando+0x298>)
1a000e88:	2005      	movs	r0, #5
1a000e8a:	f003 f987 	bl	1a00419c <uartWriteString>
		printf("LASER_DER=OFF\n");
1a000e8e:	486f      	ldr	r0, [pc, #444]	; (1a00104c <comando+0x274>)
1a000e90:	f006 f9ac 	bl	1a0071ec <puts>
		flag=1;
1a000e94:	2501      	movs	r5, #1
1a000e96:	e7b4      	b.n	1a000e02 <comando+0x2a>
		laser_set("LASER_IZQ", ON);
1a000e98:	2101      	movs	r1, #1
1a000e9a:	4876      	ldr	r0, [pc, #472]	; (1a001074 <comando+0x29c>)
1a000e9c:	f7ff fbf6 	bl	1a00068c <laser_set>
		uartWriteString( UART_232, "LASER_IZQ=ON\n");
1a000ea0:	4975      	ldr	r1, [pc, #468]	; (1a001078 <comando+0x2a0>)
1a000ea2:	2005      	movs	r0, #5
1a000ea4:	f003 f97a 	bl	1a00419c <uartWriteString>
		printf("LASER_IZQ=ON\n");
1a000ea8:	4869      	ldr	r0, [pc, #420]	; (1a001050 <comando+0x278>)
1a000eaa:	f006 f99f 	bl	1a0071ec <puts>
		flag=1;
1a000eae:	2501      	movs	r5, #1
1a000eb0:	e7ae      	b.n	1a000e10 <comando+0x38>
		laser_set("LASER_IZQ", OFF);
1a000eb2:	2100      	movs	r1, #0
1a000eb4:	486f      	ldr	r0, [pc, #444]	; (1a001074 <comando+0x29c>)
1a000eb6:	f7ff fbe9 	bl	1a00068c <laser_set>
		uartWriteString( UART_232, "LASER_IZQ=OFF\n");
1a000eba:	4970      	ldr	r1, [pc, #448]	; (1a00107c <comando+0x2a4>)
1a000ebc:	2005      	movs	r0, #5
1a000ebe:	f003 f96d 	bl	1a00419c <uartWriteString>
		printf("LASER_IZQ=OFF\n");
1a000ec2:	4864      	ldr	r0, [pc, #400]	; (1a001054 <comando+0x27c>)
1a000ec4:	f006 f992 	bl	1a0071ec <puts>
		flag=1;
1a000ec8:	2501      	movs	r5, #1
1a000eca:	e7a8      	b.n	1a000e1e <comando+0x46>
		data_pwm=obtener_pwm(command);
1a000ecc:	4620      	mov	r0, r4
1a000ece:	f7ff ff02 	bl	1a000cd6 <obtener_pwm>
1a000ed2:	4605      	mov	r5, r0
		motorSpeed((int16_t) (data_pwm-128), MOT_DER);	// se reservan 3 caracteres para el dato del PWM
1a000ed4:	3880      	subs	r0, #128	; 0x80
1a000ed6:	2100      	movs	r1, #0
1a000ed8:	b200      	sxth	r0, r0
1a000eda:	f7ff fa8b 	bl	1a0003f4 <motorSpeed>
		motorEnable(Motor_ON,MOT_DER);
1a000ede:	2100      	movs	r1, #0
1a000ee0:	2001      	movs	r0, #1
1a000ee2:	f7ff fb31 	bl	1a000548 <motorEnable>
		itoa( data_pwm, str_pwm, 10 ); 					// base 10 significa decimal
1a000ee6:	220a      	movs	r2, #10
1a000ee8:	a902      	add	r1, sp, #8
1a000eea:	4628      	mov	r0, r5
1a000eec:	f7ff ff3a 	bl	1a000d64 <itoa>
		strcpy(mensaje,"PWM_0=");
1a000ef0:	ad03      	add	r5, sp, #12
1a000ef2:	4b59      	ldr	r3, [pc, #356]	; (1a001058 <comando+0x280>)
1a000ef4:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000ef8:	9003      	str	r0, [sp, #12]
1a000efa:	f8ad 1010 	strh.w	r1, [sp, #16]
1a000efe:	0c09      	lsrs	r1, r1, #16
1a000f00:	f88d 1012 	strb.w	r1, [sp, #18]
		strcat(mensaje,str_pwm);
1a000f04:	a902      	add	r1, sp, #8
1a000f06:	4628      	mov	r0, r5
1a000f08:	f006 f9be 	bl	1a007288 <strcat>
		strcat(mensaje,"\n");
1a000f0c:	4628      	mov	r0, r5
1a000f0e:	f006 fbb7 	bl	1a007680 <strlen>
1a000f12:	4b5b      	ldr	r3, [pc, #364]	; (1a001080 <comando+0x2a8>)
1a000f14:	881b      	ldrh	r3, [r3, #0]
1a000f16:	522b      	strh	r3, [r5, r0]
		uartWriteString( UART_232, mensaje);
1a000f18:	4629      	mov	r1, r5
1a000f1a:	2005      	movs	r0, #5
1a000f1c:	f003 f93e 	bl	1a00419c <uartWriteString>
		printf("PWM_0=%c\n",str_pwm);
1a000f20:	a902      	add	r1, sp, #8
1a000f22:	4858      	ldr	r0, [pc, #352]	; (1a001084 <comando+0x2ac>)
1a000f24:	f006 f900 	bl	1a007128 <printf>
		flag=1;
1a000f28:	2501      	movs	r5, #1
1a000f2a:	e77f      	b.n	1a000e2c <comando+0x54>
		data_pwm=obtener_pwm(command);
1a000f2c:	4620      	mov	r0, r4
1a000f2e:	f7ff fed2 	bl	1a000cd6 <obtener_pwm>
1a000f32:	4605      	mov	r5, r0
		motorSpeed((int16_t) (data_pwm-128), MOT_IZQ);	    // se reservan 3 caracteres para el dato del PWM
1a000f34:	3880      	subs	r0, #128	; 0x80
1a000f36:	2101      	movs	r1, #1
1a000f38:	b200      	sxth	r0, r0
1a000f3a:	f7ff fa5b 	bl	1a0003f4 <motorSpeed>
		motorEnable(Motor_ON,MOT_IZQ);
1a000f3e:	2101      	movs	r1, #1
1a000f40:	4608      	mov	r0, r1
1a000f42:	f7ff fb01 	bl	1a000548 <motorEnable>
		itoa( data_pwm, str_pwm, 10 ); 					// base 10 significa decimal
1a000f46:	220a      	movs	r2, #10
1a000f48:	a902      	add	r1, sp, #8
1a000f4a:	4628      	mov	r0, r5
1a000f4c:	f7ff ff0a 	bl	1a000d64 <itoa>
		strcpy(mensaje,"PWM_1=");
1a000f50:	ad03      	add	r5, sp, #12
1a000f52:	4b42      	ldr	r3, [pc, #264]	; (1a00105c <comando+0x284>)
1a000f54:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000f58:	9003      	str	r0, [sp, #12]
1a000f5a:	f8ad 1010 	strh.w	r1, [sp, #16]
1a000f5e:	0c09      	lsrs	r1, r1, #16
1a000f60:	f88d 1012 	strb.w	r1, [sp, #18]
		strcat(mensaje,str_pwm);
1a000f64:	a902      	add	r1, sp, #8
1a000f66:	4628      	mov	r0, r5
1a000f68:	f006 f98e 	bl	1a007288 <strcat>
		strcat(mensaje,"\n");
1a000f6c:	4628      	mov	r0, r5
1a000f6e:	f006 fb87 	bl	1a007680 <strlen>
1a000f72:	4b43      	ldr	r3, [pc, #268]	; (1a001080 <comando+0x2a8>)
1a000f74:	881b      	ldrh	r3, [r3, #0]
1a000f76:	522b      	strh	r3, [r5, r0]
		uartWriteString( UART_232, mensaje);
1a000f78:	4629      	mov	r1, r5
1a000f7a:	2005      	movs	r0, #5
1a000f7c:	f003 f90e 	bl	1a00419c <uartWriteString>
		printf("PWM_1=%c\n",str_pwm);
1a000f80:	a902      	add	r1, sp, #8
1a000f82:	4841      	ldr	r0, [pc, #260]	; (1a001088 <comando+0x2b0>)
1a000f84:	f006 f8d0 	bl	1a007128 <printf>
		flag=1;
1a000f88:	2501      	movs	r5, #1
1a000f8a:	e756      	b.n	1a000e3a <comando+0x62>
		motorSpeed(0, MOT_DER);
1a000f8c:	2100      	movs	r1, #0
1a000f8e:	4608      	mov	r0, r1
1a000f90:	f7ff fa30 	bl	1a0003f4 <motorSpeed>
		motorSpeed(0, MOT_IZQ);
1a000f94:	2101      	movs	r1, #1
1a000f96:	2000      	movs	r0, #0
1a000f98:	f7ff fa2c 	bl	1a0003f4 <motorSpeed>
		motorEnable(Motor_ON,MOT_DER);
1a000f9c:	2100      	movs	r1, #0
1a000f9e:	2001      	movs	r0, #1
1a000fa0:	f7ff fad2 	bl	1a000548 <motorEnable>
		motorEnable(Motor_ON,MOT_IZQ);
1a000fa4:	2101      	movs	r1, #1
1a000fa6:	4608      	mov	r0, r1
1a000fa8:	f7ff face 	bl	1a000548 <motorEnable>
		uartWriteString( UART_232, "MOTOR_STOP\n");
1a000fac:	4937      	ldr	r1, [pc, #220]	; (1a00108c <comando+0x2b4>)
1a000fae:	2005      	movs	r0, #5
1a000fb0:	f003 f8f4 	bl	1a00419c <uartWriteString>
		printf("MOTOR_STOP\n");
1a000fb4:	4836      	ldr	r0, [pc, #216]	; (1a001090 <comando+0x2b8>)
1a000fb6:	f006 f919 	bl	1a0071ec <puts>
		flag=1;
1a000fba:	2501      	movs	r5, #1
1a000fbc:	e745      	b.n	1a000e4a <comando+0x72>
		if(!gpioRead(STOP_FRONT) && gpioRead(STOP_BACK)) dato=1;
1a000fbe:	200c      	movs	r0, #12
1a000fc0:	f003 fb93 	bl	1a0046ea <gpioRead>
1a000fc4:	b328      	cbz	r0, 1a001012 <comando+0x23a>
		dato=0;
1a000fc6:	2400      	movs	r4, #0
		if(gpioRead(STOP_FRONT) && !gpioRead(STOP_BACK)) dato=2;
1a000fc8:	200c      	movs	r0, #12
1a000fca:	f003 fb8e 	bl	1a0046ea <gpioRead>
1a000fce:	bb40      	cbnz	r0, 1a001022 <comando+0x24a>
		if(!gpioRead(STOP_FRONT) && !gpioRead(STOP_BACK)) dato=3;
1a000fd0:	200c      	movs	r0, #12
1a000fd2:	f003 fb8a 	bl	1a0046ea <gpioRead>
1a000fd6:	b358      	cbz	r0, 1a001030 <comando+0x258>
		itoa( dato, str_dato, 10 );
1a000fd8:	220a      	movs	r2, #10
1a000fda:	a901      	add	r1, sp, #4
1a000fdc:	4620      	mov	r0, r4
1a000fde:	f7ff fec1 	bl	1a000d64 <itoa>
		strcpy(mensaje,"TEST_BUMPERS=");
1a000fe2:	ac03      	add	r4, sp, #12
1a000fe4:	4b2b      	ldr	r3, [pc, #172]	; (1a001094 <comando+0x2bc>)
1a000fe6:	4625      	mov	r5, r4
1a000fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000fea:	c507      	stmia	r5!, {r0, r1, r2}
1a000fec:	802b      	strh	r3, [r5, #0]
		strcat(mensaje,str_dato);
1a000fee:	a901      	add	r1, sp, #4
1a000ff0:	4620      	mov	r0, r4
1a000ff2:	f006 f949 	bl	1a007288 <strcat>
		strcat(mensaje,"\n");
1a000ff6:	4620      	mov	r0, r4
1a000ff8:	f006 fb42 	bl	1a007680 <strlen>
1a000ffc:	4b20      	ldr	r3, [pc, #128]	; (1a001080 <comando+0x2a8>)
1a000ffe:	881b      	ldrh	r3, [r3, #0]
1a001000:	5223      	strh	r3, [r4, r0]
		uartWriteString( UART_232, mensaje);
1a001002:	4621      	mov	r1, r4
1a001004:	2005      	movs	r0, #5
1a001006:	f003 f8c9 	bl	1a00419c <uartWriteString>
		printf("%s\n",mensaje);
1a00100a:	4620      	mov	r0, r4
1a00100c:	f006 f8ee 	bl	1a0071ec <puts>
	if(flag==0)	printf("Comando no reconocido\n");
1a001010:	e726      	b.n	1a000e60 <comando+0x88>
		if(!gpioRead(STOP_FRONT) && gpioRead(STOP_BACK)) dato=1;
1a001012:	200b      	movs	r0, #11
1a001014:	f003 fb69 	bl	1a0046ea <gpioRead>
1a001018:	b908      	cbnz	r0, 1a00101e <comando+0x246>
		dato=0;
1a00101a:	2400      	movs	r4, #0
1a00101c:	e7d4      	b.n	1a000fc8 <comando+0x1f0>
		if(!gpioRead(STOP_FRONT) && gpioRead(STOP_BACK)) dato=1;
1a00101e:	2401      	movs	r4, #1
1a001020:	e7d2      	b.n	1a000fc8 <comando+0x1f0>
		if(gpioRead(STOP_FRONT) && !gpioRead(STOP_BACK)) dato=2;
1a001022:	200b      	movs	r0, #11
1a001024:	f003 fb61 	bl	1a0046ea <gpioRead>
1a001028:	2800      	cmp	r0, #0
1a00102a:	d1d1      	bne.n	1a000fd0 <comando+0x1f8>
1a00102c:	2402      	movs	r4, #2
1a00102e:	e7cf      	b.n	1a000fd0 <comando+0x1f8>
		if(!gpioRead(STOP_FRONT) && !gpioRead(STOP_BACK)) dato=3;
1a001030:	200b      	movs	r0, #11
1a001032:	f003 fb5a 	bl	1a0046ea <gpioRead>
1a001036:	2800      	cmp	r0, #0
1a001038:	d1ce      	bne.n	1a000fd8 <comando+0x200>
1a00103a:	2403      	movs	r4, #3
1a00103c:	e7cc      	b.n	1a000fd8 <comando+0x200>
	if(flag==0)	printf("Comando no reconocido\n");
1a00103e:	4816      	ldr	r0, [pc, #88]	; (1a001098 <comando+0x2c0>)
1a001040:	f006 f8d4 	bl	1a0071ec <puts>
}
1a001044:	e70c      	b.n	1a000e60 <comando+0x88>
1a001046:	bf00      	nop
1a001048:	1a00bae0 	.word	0x1a00bae0
1a00104c:	1a00bb00 	.word	0x1a00bb00
1a001050:	1a00bb20 	.word	0x1a00bb20
1a001054:	1a00bb40 	.word	0x1a00bb40
1a001058:	1a00bb60 	.word	0x1a00bb60
1a00105c:	1a00bb74 	.word	0x1a00bb74
1a001060:	1a00bb88 	.word	0x1a00bb88
1a001064:	1a00bbac 	.word	0x1a00bbac
1a001068:	1a00b96c 	.word	0x1a00b96c
1a00106c:	1a00baf0 	.word	0x1a00baf0
1a001070:	1a00bb10 	.word	0x1a00bb10
1a001074:	1a00b978 	.word	0x1a00b978
1a001078:	1a00bb30 	.word	0x1a00bb30
1a00107c:	1a00bb50 	.word	0x1a00bb50
1a001080:	1a00bb3c 	.word	0x1a00bb3c
1a001084:	1a00bb68 	.word	0x1a00bb68
1a001088:	1a00bb7c 	.word	0x1a00bb7c
1a00108c:	1a00bb94 	.word	0x1a00bb94
1a001090:	1a00bba0 	.word	0x1a00bba0
1a001094:	1a00bbbc 	.word	0x1a00bbbc
1a001098:	1a00bbcc 	.word	0x1a00bbcc

1a00109c <fsmRobotUpdate>:
void fsmRobotUpdate(void* taskParam){
1a00109c:	b510      	push	{r4, lr}
1a00109e:	b08e      	sub	sp, #56	; 0x38
	if(motores.mot1_ena==Motor_ON)
1a0010a0:	4b29      	ldr	r3, [pc, #164]	; (1a001148 <fsmRobotUpdate+0xac>)
1a0010a2:	791b      	ldrb	r3, [r3, #4]
1a0010a4:	2b01      	cmp	r3, #1
1a0010a6:	d00d      	beq.n	1a0010c4 <fsmRobotUpdate+0x28>
	if(motores.mot2_ena==Motor_ON)
1a0010a8:	4b27      	ldr	r3, [pc, #156]	; (1a001148 <fsmRobotUpdate+0xac>)
1a0010aa:	7a9b      	ldrb	r3, [r3, #10]
1a0010ac:	2b01      	cmp	r3, #1
1a0010ae:	d010      	beq.n	1a0010d2 <fsmRobotUpdate+0x36>
	gpioToggle(LEDB);
1a0010b0:	202a      	movs	r0, #42	; 0x2a
1a0010b2:	f003 fb4e 	bl	1a004752 <gpioToggle>
	if(data_uart232_rx.status==DATO_RCV){
1a0010b6:	4b25      	ldr	r3, [pc, #148]	; (1a00114c <fsmRobotUpdate+0xb0>)
1a0010b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
1a0010bc:	2b01      	cmp	r3, #1
1a0010be:	d00f      	beq.n	1a0010e0 <fsmRobotUpdate+0x44>
}
1a0010c0:	b00e      	add	sp, #56	; 0x38
1a0010c2:	bd10      	pop	{r4, pc}
	motorSpeed(motores.mot1_veloc,motores.mot1_nombre);
1a0010c4:	4b20      	ldr	r3, [pc, #128]	; (1a001148 <fsmRobotUpdate+0xac>)
1a0010c6:	7819      	ldrb	r1, [r3, #0]
1a0010c8:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
1a0010cc:	f7ff f992 	bl	1a0003f4 <motorSpeed>
1a0010d0:	e7ea      	b.n	1a0010a8 <fsmRobotUpdate+0xc>
	motorSpeed(motores.mot2_veloc,motores.mot2_nombre);
1a0010d2:	4b1d      	ldr	r3, [pc, #116]	; (1a001148 <fsmRobotUpdate+0xac>)
1a0010d4:	7999      	ldrb	r1, [r3, #6]
1a0010d6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
1a0010da:	f7ff f98b 	bl	1a0003f4 <motorSpeed>
1a0010de:	e7e7      	b.n	1a0010b0 <fsmRobotUpdate+0x14>
    	gpioToggle(LED3);
1a0010e0:	202d      	movs	r0, #45	; 0x2d
1a0010e2:	f003 fb36 	bl	1a004752 <gpioToggle>
    	buffer_rx_clean(buffer_rx_tmp);
1a0010e6:	a801      	add	r0, sp, #4
1a0010e8:	f7ff fa80 	bl	1a0005ec <buffer_rx_clean>
		for (index=0;index<data_uart232_rx.cuenta;index++){
1a0010ec:	2300      	movs	r3, #0
1a0010ee:	4a17      	ldr	r2, [pc, #92]	; (1a00114c <fsmRobotUpdate+0xb0>)
1a0010f0:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
1a0010f4:	429a      	cmp	r2, r3
1a0010f6:	d908      	bls.n	1a00110a <fsmRobotUpdate+0x6e>
			buffer_rx_tmp[index]=data_uart232_rx.buffer_rx[index];
1a0010f8:	4a14      	ldr	r2, [pc, #80]	; (1a00114c <fsmRobotUpdate+0xb0>)
1a0010fa:	5cd1      	ldrb	r1, [r2, r3]
1a0010fc:	aa0e      	add	r2, sp, #56	; 0x38
1a0010fe:	441a      	add	r2, r3
1a001100:	f802 1c34 	strb.w	r1, [r2, #-52]
		for (index=0;index<data_uart232_rx.cuenta;index++){
1a001104:	3301      	adds	r3, #1
1a001106:	b2db      	uxtb	r3, r3
1a001108:	e7f1      	b.n	1a0010ee <fsmRobotUpdate+0x52>
		buffer_rx_clean(data_uart232_rx.buffer_rx);
1a00110a:	4c10      	ldr	r4, [pc, #64]	; (1a00114c <fsmRobotUpdate+0xb0>)
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff fa6d 	bl	1a0005ec <buffer_rx_clean>
		data_uart232_rx.status=SIN_DATOS;
1a001112:	2300      	movs	r3, #0
1a001114:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
		status_rx=validar_dato_rx(buffer_rx_tmp);
1a001118:	a801      	add	r0, sp, #4
1a00111a:	f7ff fdbf 	bl	1a000c9c <validar_dato_rx>
        if (status_rx==1){
1a00111e:	2801      	cmp	r0, #1
1a001120:	d1ce      	bne.n	1a0010c0 <fsmRobotUpdate+0x24>
        	ptr_lcd_data->cuenta++;
1a001122:	4a0b      	ldr	r2, [pc, #44]	; (1a001150 <fsmRobotUpdate+0xb4>)
1a001124:	8993      	ldrh	r3, [r2, #12]
1a001126:	3301      	adds	r3, #1
1a001128:	b29b      	uxth	r3, r3
1a00112a:	8193      	strh	r3, [r2, #12]
        	if(ptr_lcd_data->cuenta>999)ptr_lcd_data->cuenta=0;
1a00112c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a001130:	d302      	bcc.n	1a001138 <fsmRobotUpdate+0x9c>
1a001132:	4613      	mov	r3, r2
1a001134:	2200      	movs	r2, #0
1a001136:	819a      	strh	r2, [r3, #12]
        	comando(buffer_rx_tmp, strlen(buffer_rx_tmp));
1a001138:	a801      	add	r0, sp, #4
1a00113a:	f006 faa1 	bl	1a007680 <strlen>
1a00113e:	b2c1      	uxtb	r1, r0
1a001140:	a801      	add	r0, sp, #4
1a001142:	f7ff fe49 	bl	1a000dd8 <comando>
}
1a001146:	e7bb      	b.n	1a0010c0 <fsmRobotUpdate+0x24>
1a001148:	100037d4 	.word	0x100037d4
1a00114c:	100037e0 	.word	0x100037e0
1a001150:	10003824 	.word	0x10003824

1a001154 <task_robot>:
{
1a001154:	b530      	push	{r4, r5, lr}
1a001156:	b083      	sub	sp, #12
1a001158:	4604      	mov	r4, r0
	ptr_lcd_data->cuenta=0;	// Lleva la cuenta de datos recibidos
1a00115a:	4d0e      	ldr	r5, [pc, #56]	; (1a001194 <task_robot+0x40>)
1a00115c:	2300      	movs	r3, #0
1a00115e:	81ab      	strh	r3, [r5, #12]
	bumpers_init();			// Configuro los bumper
1a001160:	f7ff fb3e 	bl	1a0007e0 <bumpers_init>
	laser_init( );			// Carga el módulo de laser
1a001164:	f7ff fa7a 	bl	1a00065c <laser_init>
	led_init();				// Configuro los 2 Leds y crea 2 tareas
1a001168:	f7ff fbd8 	bl	1a00091c <led_init>
	motor_init();			// Configuro los 2 PWM de los motores
1a00116c:	f7ff f8f8 	bl	1a000360 <motor_init>
	mpu9250_init();			// Configuro el acelerómetro
1a001170:	f7ff fc28 	bl	1a0009c4 <mpu9250_init>
	lcd_init(ptr_lcd_data);	// Configuro el display
1a001174:	4628      	mov	r0, r5
1a001176:	f7ff fc55 	bl	1a000a24 <lcd_init>
	uart_esp01_init();		// La UART que se comunica con el Módulo ESP01
1a00117a:	f7ff fa41 	bl	1a000600 <uart_esp01_init>
	TickType_t xLastWakeTime = xTaskGetTickCount();
1a00117e:	f000 ff3d 	bl	1a001ffc <xTaskGetTickCount>
1a001182:	9001      	str	r0, [sp, #4]
		fsmRobotUpdate(ptr_estadoTemp);
1a001184:	4620      	mov	r0, r4
1a001186:	f7ff ff89 	bl	1a00109c <fsmRobotUpdate>
		vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00118a:	2164      	movs	r1, #100	; 0x64
1a00118c:	a801      	add	r0, sp, #4
1a00118e:	f001 f845 	bl	1a00221c <vTaskDelayUntil>
1a001192:	e7f7      	b.n	1a001184 <task_robot+0x30>
1a001194:	10003824 	.word	0x10003824

1a001198 <main>:


/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a001198:	b508      	push	{r3, lr}
	// ---------- CONFIGURACIONES ------------------------------
	boardConfig();  // Inicializar y configurar la plataforma
1a00119a:	f003 faf3 	bl	1a004784 <boardInit>

	printf( MSG_1 );
1a00119e:	4808      	ldr	r0, [pc, #32]	; (1a0011c0 <main+0x28>)
1a0011a0:	f006 f824 	bl	1a0071ec <puts>
	// En la variable "estado" se evalúa el estado gral del robot

	estadoRobot_t *ptr_estado;
	ptr_estado=&estado;

	fsmRobotInit(ptr_estado);
1a0011a4:	4807      	ldr	r0, [pc, #28]	; (1a0011c4 <main+0x2c>)
1a0011a6:	f7ff fd59 	bl	1a000c5c <fsmRobotInit>

	// Iniciar scheduler
	vTaskStartScheduler();		// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a0011aa:	f000 fed5 	bl	1a001f58 <vTaskStartScheduler>
1a0011ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011b2:	f383 8811 	msr	BASEPRI, r3
1a0011b6:	f3bf 8f6f 	isb	sy
1a0011ba:	f3bf 8f4f 	dsb	sy

	/* realizar un assert con "false" es equivalente al while(1) */
	configASSERT( 0 );
1a0011be:	e7fe      	b.n	1a0011be <main+0x26>
1a0011c0:	1a00bc38 	.word	0x1a00bc38
1a0011c4:	10000003 	.word	0x10000003

1a0011c8 <vApplicationMallocFailedHook>:
    return 0;
}

/* hook que se ejecuta si al necesitar un objeto dinamico, no hay memoria disponible */
void vApplicationMallocFailedHook()
{
1a0011c8:	b508      	push	{r3, lr}
	printf( "Malloc Failed Hook!\n" );
1a0011ca:	4806      	ldr	r0, [pc, #24]	; (1a0011e4 <vApplicationMallocFailedHook+0x1c>)
1a0011cc:	f006 f80e 	bl	1a0071ec <puts>
1a0011d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011d4:	f383 8811 	msr	BASEPRI, r3
1a0011d8:	f3bf 8f6f 	isb	sy
1a0011dc:	f3bf 8f4f 	dsb	sy
	configASSERT( 0 );
1a0011e0:	e7fe      	b.n	1a0011e0 <vApplicationMallocFailedHook+0x18>
1a0011e2:	bf00      	nop
1a0011e4:	1a00bc54 	.word	0x1a00bc54

1a0011e8 <initialise_monitor_handles>:
}
1a0011e8:	4770      	bx	lr
1a0011ea:	Address 0x000000001a0011ea is out of bounds.


1a0011ec <Reset_Handler>:
void Reset_Handler(void) {
1a0011ec:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0011ee:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0011f0:	4b19      	ldr	r3, [pc, #100]	; (1a001258 <Reset_Handler+0x6c>)
1a0011f2:	4a1a      	ldr	r2, [pc, #104]	; (1a00125c <Reset_Handler+0x70>)
1a0011f4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0011f6:	3304      	adds	r3, #4
1a0011f8:	4a19      	ldr	r2, [pc, #100]	; (1a001260 <Reset_Handler+0x74>)
1a0011fa:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011fc:	2300      	movs	r3, #0
1a0011fe:	e005      	b.n	1a00120c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001200:	4a18      	ldr	r2, [pc, #96]	; (1a001264 <Reset_Handler+0x78>)
1a001202:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00120a:	3301      	adds	r3, #1
1a00120c:	2b07      	cmp	r3, #7
1a00120e:	d9f7      	bls.n	1a001200 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001210:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001212:	4b15      	ldr	r3, [pc, #84]	; (1a001268 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001214:	e007      	b.n	1a001226 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001216:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00121a:	689a      	ldr	r2, [r3, #8]
1a00121c:	6859      	ldr	r1, [r3, #4]
1a00121e:	6818      	ldr	r0, [r3, #0]
1a001220:	f7fe ffb3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a001224:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001226:	4a11      	ldr	r2, [pc, #68]	; (1a00126c <Reset_Handler+0x80>)
1a001228:	4293      	cmp	r3, r2
1a00122a:	d3f4      	bcc.n	1a001216 <Reset_Handler+0x2a>
1a00122c:	e006      	b.n	1a00123c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00122e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001230:	6859      	ldr	r1, [r3, #4]
1a001232:	f854 0b08 	ldr.w	r0, [r4], #8
1a001236:	f7fe ffb7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00123a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00123c:	4a0c      	ldr	r2, [pc, #48]	; (1a001270 <Reset_Handler+0x84>)
1a00123e:	4293      	cmp	r3, r2
1a001240:	d3f5      	bcc.n	1a00122e <Reset_Handler+0x42>
    SystemInit();
1a001242:	f002 fe57 	bl	1a003ef4 <SystemInit>
    __libc_init_array();
1a001246:	f005 fb95 	bl	1a006974 <__libc_init_array>
    initialise_monitor_handles();
1a00124a:	f7ff ffcd 	bl	1a0011e8 <initialise_monitor_handles>
    main();
1a00124e:	f7ff ffa3 	bl	1a001198 <main>
        __asm__ volatile("wfi");
1a001252:	bf30      	wfi
1a001254:	e7fd      	b.n	1a001252 <Reset_Handler+0x66>
1a001256:	bf00      	nop
1a001258:	40053100 	.word	0x40053100
1a00125c:	10df1000 	.word	0x10df1000
1a001260:	01dff7ff 	.word	0x01dff7ff
1a001264:	e000e280 	.word	0xe000e280
1a001268:	1a000114 	.word	0x1a000114
1a00126c:	1a000150 	.word	0x1a000150
1a001270:	1a000178 	.word	0x1a000178

1a001274 <_fini>:
void _fini(void) {}
1a001274:	4770      	bx	lr

1a001276 <_init>:
void _init(void) {}
1a001276:	4770      	bx	lr

1a001278 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001278:	2309      	movs	r3, #9
1a00127a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001280:	4770      	bx	lr

1a001282 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001282:	2358      	movs	r3, #88	; 0x58
1a001284:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00128a:	4770      	bx	lr

1a00128c <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00128c:	2902      	cmp	r1, #2
1a00128e:	d904      	bls.n	1a00129a <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a001290:	2309      	movs	r3, #9
1a001292:	6003      	str	r3, [r0, #0]
       return -1;
1a001294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001298:	4770      	bx	lr
       return 1;
1a00129a:	2001      	movs	r0, #1
   }
}
1a00129c:	4770      	bx	lr

1a00129e <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00129e:	2358      	movs	r3, #88	; 0x58
1a0012a0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0012a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0012a6:	4770      	bx	lr

1a0012a8 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0012a8:	2902      	cmp	r1, #2
1a0012aa:	d81f      	bhi.n	1a0012ec <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0012b0:	461d      	mov	r5, r3
1a0012b2:	4617      	mov	r7, r2
1a0012b4:	4606      	mov	r6, r0
  size_t i = 0;
1a0012b6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0012b8:	42ac      	cmp	r4, r5
1a0012ba:	d211      	bcs.n	1a0012e0 <_read_r+0x38>
         int c = __stdio_getchar();
1a0012bc:	f001 fea1 	bl	1a003002 <__stdio_getchar>
         if( c != -1 ){
1a0012c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0012c4:	d0f8      	beq.n	1a0012b8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0012c6:	f104 0801 	add.w	r8, r4, #1
1a0012ca:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0012cc:	280d      	cmp	r0, #13
1a0012ce:	d003      	beq.n	1a0012d8 <_read_r+0x30>
1a0012d0:	280a      	cmp	r0, #10
1a0012d2:	d001      	beq.n	1a0012d8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0012d4:	4644      	mov	r4, r8
1a0012d6:	e7ef      	b.n	1a0012b8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0012d8:	f001 fe93 	bl	1a003002 <__stdio_getchar>
               return i;
1a0012dc:	4640      	mov	r0, r8
1a0012de:	e003      	b.n	1a0012e8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0012e0:	2313      	movs	r3, #19
1a0012e2:	6033      	str	r3, [r6, #0]
      return -1;
1a0012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0012e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0012ec:	2313      	movs	r3, #19
1a0012ee:	6003      	str	r3, [r0, #0]
      return -1;
1a0012f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0012f4:	4770      	bx	lr

1a0012f6 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0012f6:	2902      	cmp	r1, #2
1a0012f8:	d80c      	bhi.n	1a001314 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0012fa:	b570      	push	{r4, r5, r6, lr}
1a0012fc:	461d      	mov	r5, r3
1a0012fe:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001300:	2400      	movs	r4, #0
1a001302:	42ac      	cmp	r4, r5
1a001304:	d204      	bcs.n	1a001310 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a001306:	5d30      	ldrb	r0, [r6, r4]
1a001308:	f001 fe76 	bl	1a002ff8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00130c:	3401      	adds	r4, #1
1a00130e:	e7f8      	b.n	1a001302 <_write_r+0xc>
       return n;
1a001310:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a001312:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a001314:	2313      	movs	r3, #19
1a001316:	6003      	str	r3, [r0, #0]
       return -1;
1a001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00131c:	4770      	bx	lr
1a00131e:	Address 0x000000001a00131e is out of bounds.


1a001320 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001320:	4b05      	ldr	r3, [pc, #20]	; (1a001338 <_sbrk_r+0x18>)
1a001322:	681b      	ldr	r3, [r3, #0]
1a001324:	b123      	cbz	r3, 1a001330 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a001326:	4b04      	ldr	r3, [pc, #16]	; (1a001338 <_sbrk_r+0x18>)
1a001328:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00132a:	4401      	add	r1, r0
1a00132c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00132e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001330:	4b01      	ldr	r3, [pc, #4]	; (1a001338 <_sbrk_r+0x18>)
1a001332:	4a02      	ldr	r2, [pc, #8]	; (1a00133c <_sbrk_r+0x1c>)
1a001334:	601a      	str	r2, [r3, #0]
1a001336:	e7f6      	b.n	1a001326 <_sbrk_r+0x6>
1a001338:	10000a88 	.word	0x10000a88
1a00133c:	100038bc 	.word	0x100038bc

1a001340 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a001340:	b538      	push	{r3, r4, r5, lr}
1a001342:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a001344:	f010 0f07 	tst.w	r0, #7
1a001348:	d002      	beq.n	1a001350 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00134a:	f020 0407 	bic.w	r4, r0, #7
1a00134e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a001350:	f000 fe4c 	bl	1a001fec <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a001354:	4b13      	ldr	r3, [pc, #76]	; (1a0013a4 <pvPortMalloc+0x64>)
1a001356:	681b      	ldr	r3, [r3, #0]
1a001358:	b17b      	cbz	r3, 1a00137a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a00135a:	4b13      	ldr	r3, [pc, #76]	; (1a0013a8 <pvPortMalloc+0x68>)
1a00135c:	681b      	ldr	r3, [r3, #0]
1a00135e:	441c      	add	r4, r3
1a001360:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a001364:	4294      	cmp	r4, r2
1a001366:	d80e      	bhi.n	1a001386 <pvPortMalloc+0x46>
1a001368:	42a3      	cmp	r3, r4
1a00136a:	d310      	bcc.n	1a00138e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a00136c:	f000 fed8 	bl	1a002120 <xTaskResumeAll>
void *pvReturn = NULL;
1a001370:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a001372:	f7ff ff29 	bl	1a0011c8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001376:	4628      	mov	r0, r5
1a001378:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00137a:	4b0c      	ldr	r3, [pc, #48]	; (1a0013ac <pvPortMalloc+0x6c>)
1a00137c:	f023 0307 	bic.w	r3, r3, #7
1a001380:	4a08      	ldr	r2, [pc, #32]	; (1a0013a4 <pvPortMalloc+0x64>)
1a001382:	6013      	str	r3, [r2, #0]
1a001384:	e7e9      	b.n	1a00135a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001386:	f000 fecb 	bl	1a002120 <xTaskResumeAll>
void *pvReturn = NULL;
1a00138a:	2500      	movs	r5, #0
1a00138c:	e7f1      	b.n	1a001372 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a00138e:	4a05      	ldr	r2, [pc, #20]	; (1a0013a4 <pvPortMalloc+0x64>)
1a001390:	6815      	ldr	r5, [r2, #0]
1a001392:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001394:	4b04      	ldr	r3, [pc, #16]	; (1a0013a8 <pvPortMalloc+0x68>)
1a001396:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001398:	f000 fec2 	bl	1a002120 <xTaskResumeAll>
		if( pvReturn == NULL )
1a00139c:	2d00      	cmp	r5, #0
1a00139e:	d1ea      	bne.n	1a001376 <pvPortMalloc+0x36>
1a0013a0:	e7e7      	b.n	1a001372 <pvPortMalloc+0x32>
1a0013a2:	bf00      	nop
1a0013a4:	10000a8c 	.word	0x10000a8c
1a0013a8:	10002a90 	.word	0x10002a90
1a0013ac:	10000a98 	.word	0x10000a98

1a0013b0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0013b0:	b140      	cbz	r0, 1a0013c4 <vPortFree+0x14>
1a0013b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b6:	f383 8811 	msr	BASEPRI, r3
1a0013ba:	f3bf 8f6f 	isb	sy
1a0013be:	f3bf 8f4f 	dsb	sy
1a0013c2:	e7fe      	b.n	1a0013c2 <vPortFree+0x12>
}
1a0013c4:	4770      	bx	lr

1a0013c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0013c6:	b510      	push	{r4, lr}
1a0013c8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0013ca:	f001 fbc3 	bl	1a002b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0013ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0013d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0013d2:	429a      	cmp	r2, r3
1a0013d4:	d004      	beq.n	1a0013e0 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0013d6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0013d8:	f001 fbde 	bl	1a002b98 <vPortExitCritical>

	return xReturn;
}
1a0013dc:	4620      	mov	r0, r4
1a0013de:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0013e0:	2401      	movs	r4, #1
1a0013e2:	e7f9      	b.n	1a0013d8 <prvIsQueueFull+0x12>

1a0013e4 <prvIsQueueEmpty>:
{
1a0013e4:	b510      	push	{r4, lr}
1a0013e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0013e8:	f001 fbb4 	bl	1a002b54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0013ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0013ee:	b923      	cbnz	r3, 1a0013fa <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a0013f0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a0013f2:	f001 fbd1 	bl	1a002b98 <vPortExitCritical>
}
1a0013f6:	4620      	mov	r0, r4
1a0013f8:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a0013fa:	2400      	movs	r4, #0
1a0013fc:	e7f9      	b.n	1a0013f2 <prvIsQueueEmpty+0xe>

1a0013fe <prvCopyDataToQueue>:
{
1a0013fe:	b570      	push	{r4, r5, r6, lr}
1a001400:	4604      	mov	r4, r0
1a001402:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001404:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001406:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001408:	b95a      	cbnz	r2, 1a001422 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00140a:	6803      	ldr	r3, [r0, #0]
1a00140c:	b11b      	cbz	r3, 1a001416 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00140e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001410:	3501      	adds	r5, #1
1a001412:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001414:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001416:	6840      	ldr	r0, [r0, #4]
1a001418:	f001 f8bc 	bl	1a002594 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00141c:	2300      	movs	r3, #0
1a00141e:	6063      	str	r3, [r4, #4]
1a001420:	e7f6      	b.n	1a001410 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a001422:	b96e      	cbnz	r6, 1a001440 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001424:	6880      	ldr	r0, [r0, #8]
1a001426:	f005 fd89 	bl	1a006f3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a00142a:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00142c:	68a3      	ldr	r3, [r4, #8]
1a00142e:	4413      	add	r3, r2
1a001430:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001432:	6862      	ldr	r2, [r4, #4]
1a001434:	4293      	cmp	r3, r2
1a001436:	d319      	bcc.n	1a00146c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001438:	6823      	ldr	r3, [r4, #0]
1a00143a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00143c:	2000      	movs	r0, #0
1a00143e:	e7e7      	b.n	1a001410 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001440:	68c0      	ldr	r0, [r0, #12]
1a001442:	f005 fd7b 	bl	1a006f3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001446:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001448:	4252      	negs	r2, r2
1a00144a:	68e3      	ldr	r3, [r4, #12]
1a00144c:	4413      	add	r3, r2
1a00144e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001450:	6821      	ldr	r1, [r4, #0]
1a001452:	428b      	cmp	r3, r1
1a001454:	d202      	bcs.n	1a00145c <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001456:	6863      	ldr	r3, [r4, #4]
1a001458:	441a      	add	r2, r3
1a00145a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00145c:	2e02      	cmp	r6, #2
1a00145e:	d001      	beq.n	1a001464 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a001460:	2000      	movs	r0, #0
1a001462:	e7d5      	b.n	1a001410 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001464:	b125      	cbz	r5, 1a001470 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001466:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001468:	2000      	movs	r0, #0
1a00146a:	e7d1      	b.n	1a001410 <prvCopyDataToQueue+0x12>
1a00146c:	2000      	movs	r0, #0
1a00146e:	e7cf      	b.n	1a001410 <prvCopyDataToQueue+0x12>
1a001470:	2000      	movs	r0, #0
1a001472:	e7cd      	b.n	1a001410 <prvCopyDataToQueue+0x12>

1a001474 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001474:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001476:	b172      	cbz	r2, 1a001496 <prvCopyDataFromQueue+0x22>
{
1a001478:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00147a:	68c3      	ldr	r3, [r0, #12]
1a00147c:	4413      	add	r3, r2
1a00147e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001480:	6844      	ldr	r4, [r0, #4]
1a001482:	42a3      	cmp	r3, r4
1a001484:	d301      	bcc.n	1a00148a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001486:	6803      	ldr	r3, [r0, #0]
1a001488:	60c3      	str	r3, [r0, #12]
1a00148a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00148c:	68c1      	ldr	r1, [r0, #12]
1a00148e:	4620      	mov	r0, r4
1a001490:	f005 fd54 	bl	1a006f3c <memcpy>
}
1a001494:	bd10      	pop	{r4, pc}
1a001496:	4770      	bx	lr

1a001498 <prvUnlockQueue>:
{
1a001498:	b538      	push	{r3, r4, r5, lr}
1a00149a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00149c:	f001 fb5a 	bl	1a002b54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0014a0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0014a4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0014a6:	e003      	b.n	1a0014b0 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0014a8:	f001 f85e 	bl	1a002568 <vTaskMissedYield>
			--cTxLock;
1a0014ac:	3c01      	subs	r4, #1
1a0014ae:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0014b0:	2c00      	cmp	r4, #0
1a0014b2:	dd08      	ble.n	1a0014c6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0014b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0014b6:	b133      	cbz	r3, 1a0014c6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0014b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0014bc:	f000 ffc0 	bl	1a002440 <xTaskRemoveFromEventList>
1a0014c0:	2800      	cmp	r0, #0
1a0014c2:	d0f3      	beq.n	1a0014ac <prvUnlockQueue+0x14>
1a0014c4:	e7f0      	b.n	1a0014a8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0014c6:	23ff      	movs	r3, #255	; 0xff
1a0014c8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0014cc:	f001 fb64 	bl	1a002b98 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0014d0:	f001 fb40 	bl	1a002b54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0014d4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0014d8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014da:	e003      	b.n	1a0014e4 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0014dc:	f001 f844 	bl	1a002568 <vTaskMissedYield>
				--cRxLock;
1a0014e0:	3c01      	subs	r4, #1
1a0014e2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0014e4:	2c00      	cmp	r4, #0
1a0014e6:	dd08      	ble.n	1a0014fa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014e8:	692b      	ldr	r3, [r5, #16]
1a0014ea:	b133      	cbz	r3, 1a0014fa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014ec:	f105 0010 	add.w	r0, r5, #16
1a0014f0:	f000 ffa6 	bl	1a002440 <xTaskRemoveFromEventList>
1a0014f4:	2800      	cmp	r0, #0
1a0014f6:	d0f3      	beq.n	1a0014e0 <prvUnlockQueue+0x48>
1a0014f8:	e7f0      	b.n	1a0014dc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0014fa:	23ff      	movs	r3, #255	; 0xff
1a0014fc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a001500:	f001 fb4a 	bl	1a002b98 <vPortExitCritical>
}
1a001504:	bd38      	pop	{r3, r4, r5, pc}
1a001506:	Address 0x000000001a001506 is out of bounds.


1a001508 <xQueueGenericReset>:
{
1a001508:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00150a:	b1e0      	cbz	r0, 1a001546 <xQueueGenericReset+0x3e>
1a00150c:	4604      	mov	r4, r0
1a00150e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a001510:	f001 fb20 	bl	1a002b54 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001514:	6821      	ldr	r1, [r4, #0]
1a001516:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001518:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00151a:	fb03 1002 	mla	r0, r3, r2, r1
1a00151e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001520:	2000      	movs	r0, #0
1a001522:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001524:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001526:	3a01      	subs	r2, #1
1a001528:	fb02 1303 	mla	r3, r2, r3, r1
1a00152c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00152e:	23ff      	movs	r3, #255	; 0xff
1a001530:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001538:	b9ed      	cbnz	r5, 1a001576 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00153a:	6923      	ldr	r3, [r4, #16]
1a00153c:	b963      	cbnz	r3, 1a001558 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00153e:	f001 fb2b 	bl	1a002b98 <vPortExitCritical>
}
1a001542:	2001      	movs	r0, #1
1a001544:	bd38      	pop	{r3, r4, r5, pc}
1a001546:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154a:	f383 8811 	msr	BASEPRI, r3
1a00154e:	f3bf 8f6f 	isb	sy
1a001552:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001556:	e7fe      	b.n	1a001556 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001558:	f104 0010 	add.w	r0, r4, #16
1a00155c:	f000 ff70 	bl	1a002440 <xTaskRemoveFromEventList>
1a001560:	2800      	cmp	r0, #0
1a001562:	d0ec      	beq.n	1a00153e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a001564:	4b08      	ldr	r3, [pc, #32]	; (1a001588 <xQueueGenericReset+0x80>)
1a001566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00156a:	601a      	str	r2, [r3, #0]
1a00156c:	f3bf 8f4f 	dsb	sy
1a001570:	f3bf 8f6f 	isb	sy
1a001574:	e7e3      	b.n	1a00153e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001576:	f104 0010 	add.w	r0, r4, #16
1a00157a:	f000 fa74 	bl	1a001a66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00157e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001582:	f000 fa70 	bl	1a001a66 <vListInitialise>
1a001586:	e7da      	b.n	1a00153e <xQueueGenericReset+0x36>
1a001588:	e000ed04 	.word	0xe000ed04

1a00158c <prvInitialiseNewQueue>:
{
1a00158c:	b538      	push	{r3, r4, r5, lr}
1a00158e:	461d      	mov	r5, r3
1a001590:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001592:	460b      	mov	r3, r1
1a001594:	b949      	cbnz	r1, 1a0015aa <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001596:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001598:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00159a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00159c:	2101      	movs	r1, #1
1a00159e:	4620      	mov	r0, r4
1a0015a0:	f7ff ffb2 	bl	1a001508 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0015a4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0015a8:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0015aa:	6022      	str	r2, [r4, #0]
1a0015ac:	e7f4      	b.n	1a001598 <prvInitialiseNewQueue+0xc>

1a0015ae <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0015ae:	b940      	cbnz	r0, 1a0015c2 <xQueueGenericCreateStatic+0x14>
1a0015b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b4:	f383 8811 	msr	BASEPRI, r3
1a0015b8:	f3bf 8f6f 	isb	sy
1a0015bc:	f3bf 8f4f 	dsb	sy
1a0015c0:	e7fe      	b.n	1a0015c0 <xQueueGenericCreateStatic+0x12>
	{
1a0015c2:	b510      	push	{r4, lr}
1a0015c4:	b084      	sub	sp, #16
1a0015c6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0015c8:	b153      	cbz	r3, 1a0015e0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0015ca:	b192      	cbz	r2, 1a0015f2 <xQueueGenericCreateStatic+0x44>
1a0015cc:	b989      	cbnz	r1, 1a0015f2 <xQueueGenericCreateStatic+0x44>
1a0015ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015d2:	f383 8811 	msr	BASEPRI, r3
1a0015d6:	f3bf 8f6f 	isb	sy
1a0015da:	f3bf 8f4f 	dsb	sy
1a0015de:	e7fe      	b.n	1a0015de <xQueueGenericCreateStatic+0x30>
1a0015e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015e4:	f383 8811 	msr	BASEPRI, r3
1a0015e8:	f3bf 8f6f 	isb	sy
1a0015ec:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a0015f0:	e7fe      	b.n	1a0015f0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0015f2:	b16a      	cbz	r2, 1a001610 <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0015f4:	2050      	movs	r0, #80	; 0x50
1a0015f6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0015f8:	9803      	ldr	r0, [sp, #12]
1a0015fa:	2850      	cmp	r0, #80	; 0x50
1a0015fc:	d013      	beq.n	1a001626 <xQueueGenericCreateStatic+0x78>
1a0015fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001602:	f383 8811 	msr	BASEPRI, r3
1a001606:	f3bf 8f6f 	isb	sy
1a00160a:	f3bf 8f4f 	dsb	sy
1a00160e:	e7fe      	b.n	1a00160e <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001610:	2900      	cmp	r1, #0
1a001612:	d0ef      	beq.n	1a0015f4 <xQueueGenericCreateStatic+0x46>
1a001614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001618:	f383 8811 	msr	BASEPRI, r3
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	f3bf 8f4f 	dsb	sy
1a001624:	e7fe      	b.n	1a001624 <xQueueGenericCreateStatic+0x76>
1a001626:	4620      	mov	r0, r4
1a001628:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00162a:	2301      	movs	r3, #1
1a00162c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001630:	9400      	str	r4, [sp, #0]
1a001632:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001636:	f7ff ffa9 	bl	1a00158c <prvInitialiseNewQueue>
	}
1a00163a:	4620      	mov	r0, r4
1a00163c:	b004      	add	sp, #16
1a00163e:	bd10      	pop	{r4, pc}

1a001640 <xQueueGenericSend>:
{
1a001640:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001642:	b085      	sub	sp, #20
1a001644:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001646:	b178      	cbz	r0, 1a001668 <xQueueGenericSend+0x28>
1a001648:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00164a:	b1b1      	cbz	r1, 1a00167a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00164c:	2b02      	cmp	r3, #2
1a00164e:	d120      	bne.n	1a001692 <xQueueGenericSend+0x52>
1a001650:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001652:	2a01      	cmp	r2, #1
1a001654:	d01d      	beq.n	1a001692 <xQueueGenericSend+0x52>
1a001656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00165a:	f383 8811 	msr	BASEPRI, r3
1a00165e:	f3bf 8f6f 	isb	sy
1a001662:	f3bf 8f4f 	dsb	sy
1a001666:	e7fe      	b.n	1a001666 <xQueueGenericSend+0x26>
1a001668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00166c:	f383 8811 	msr	BASEPRI, r3
1a001670:	f3bf 8f6f 	isb	sy
1a001674:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a001678:	e7fe      	b.n	1a001678 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00167a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00167c:	2a00      	cmp	r2, #0
1a00167e:	d0e5      	beq.n	1a00164c <xQueueGenericSend+0xc>
1a001680:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001684:	f383 8811 	msr	BASEPRI, r3
1a001688:	f3bf 8f6f 	isb	sy
1a00168c:	f3bf 8f4f 	dsb	sy
1a001690:	e7fe      	b.n	1a001690 <xQueueGenericSend+0x50>
1a001692:	461e      	mov	r6, r3
1a001694:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001696:	f000 ff6d 	bl	1a002574 <xTaskGetSchedulerState>
1a00169a:	b950      	cbnz	r0, 1a0016b2 <xQueueGenericSend+0x72>
1a00169c:	9b01      	ldr	r3, [sp, #4]
1a00169e:	b153      	cbz	r3, 1a0016b6 <xQueueGenericSend+0x76>
1a0016a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016a4:	f383 8811 	msr	BASEPRI, r3
1a0016a8:	f3bf 8f6f 	isb	sy
1a0016ac:	f3bf 8f4f 	dsb	sy
1a0016b0:	e7fe      	b.n	1a0016b0 <xQueueGenericSend+0x70>
1a0016b2:	2500      	movs	r5, #0
1a0016b4:	e03b      	b.n	1a00172e <xQueueGenericSend+0xee>
1a0016b6:	2500      	movs	r5, #0
1a0016b8:	e039      	b.n	1a00172e <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0016ba:	4632      	mov	r2, r6
1a0016bc:	4639      	mov	r1, r7
1a0016be:	4620      	mov	r0, r4
1a0016c0:	f7ff fe9d 	bl	1a0013fe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0016c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0016c6:	b96b      	cbnz	r3, 1a0016e4 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a0016c8:	b138      	cbz	r0, 1a0016da <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a0016ca:	4b3c      	ldr	r3, [pc, #240]	; (1a0017bc <xQueueGenericSend+0x17c>)
1a0016cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016d0:	601a      	str	r2, [r3, #0]
1a0016d2:	f3bf 8f4f 	dsb	sy
1a0016d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0016da:	f001 fa5d 	bl	1a002b98 <vPortExitCritical>
				return pdPASS;
1a0016de:	2001      	movs	r0, #1
}
1a0016e0:	b005      	add	sp, #20
1a0016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0016e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016e8:	f000 feaa 	bl	1a002440 <xTaskRemoveFromEventList>
1a0016ec:	2800      	cmp	r0, #0
1a0016ee:	d0f4      	beq.n	1a0016da <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a0016f0:	4b32      	ldr	r3, [pc, #200]	; (1a0017bc <xQueueGenericSend+0x17c>)
1a0016f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016f6:	601a      	str	r2, [r3, #0]
1a0016f8:	f3bf 8f4f 	dsb	sy
1a0016fc:	f3bf 8f6f 	isb	sy
1a001700:	e7eb      	b.n	1a0016da <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a001702:	f001 fa49 	bl	1a002b98 <vPortExitCritical>
					return errQUEUE_FULL;
1a001706:	2000      	movs	r0, #0
1a001708:	e7ea      	b.n	1a0016e0 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00170a:	a802      	add	r0, sp, #8
1a00170c:	f000 fede 	bl	1a0024cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001710:	2501      	movs	r5, #1
1a001712:	e019      	b.n	1a001748 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a001714:	2300      	movs	r3, #0
1a001716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00171a:	e021      	b.n	1a001760 <xQueueGenericSend+0x120>
1a00171c:	2300      	movs	r3, #0
1a00171e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001722:	e023      	b.n	1a00176c <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a001724:	4620      	mov	r0, r4
1a001726:	f7ff feb7 	bl	1a001498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00172a:	f000 fcf9 	bl	1a002120 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00172e:	f001 fa11 	bl	1a002b54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001736:	429a      	cmp	r2, r3
1a001738:	d3bf      	bcc.n	1a0016ba <xQueueGenericSend+0x7a>
1a00173a:	2e02      	cmp	r6, #2
1a00173c:	d0bd      	beq.n	1a0016ba <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00173e:	9b01      	ldr	r3, [sp, #4]
1a001740:	2b00      	cmp	r3, #0
1a001742:	d0de      	beq.n	1a001702 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a001744:	2d00      	cmp	r5, #0
1a001746:	d0e0      	beq.n	1a00170a <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a001748:	f001 fa26 	bl	1a002b98 <vPortExitCritical>
		vTaskSuspendAll();
1a00174c:	f000 fc4e 	bl	1a001fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001750:	f001 fa00 	bl	1a002b54 <vPortEnterCritical>
1a001754:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001758:	b25b      	sxtb	r3, r3
1a00175a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00175e:	d0d9      	beq.n	1a001714 <xQueueGenericSend+0xd4>
1a001760:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001764:	b25b      	sxtb	r3, r3
1a001766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00176a:	d0d7      	beq.n	1a00171c <xQueueGenericSend+0xdc>
1a00176c:	f001 fa14 	bl	1a002b98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001770:	a901      	add	r1, sp, #4
1a001772:	a802      	add	r0, sp, #8
1a001774:	f000 feb6 	bl	1a0024e4 <xTaskCheckForTimeOut>
1a001778:	b9c8      	cbnz	r0, 1a0017ae <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00177a:	4620      	mov	r0, r4
1a00177c:	f7ff fe23 	bl	1a0013c6 <prvIsQueueFull>
1a001780:	2800      	cmp	r0, #0
1a001782:	d0cf      	beq.n	1a001724 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001784:	9901      	ldr	r1, [sp, #4]
1a001786:	f104 0010 	add.w	r0, r4, #16
1a00178a:	f000 fe25 	bl	1a0023d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00178e:	4620      	mov	r0, r4
1a001790:	f7ff fe82 	bl	1a001498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001794:	f000 fcc4 	bl	1a002120 <xTaskResumeAll>
1a001798:	2800      	cmp	r0, #0
1a00179a:	d1c8      	bne.n	1a00172e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a00179c:	4b07      	ldr	r3, [pc, #28]	; (1a0017bc <xQueueGenericSend+0x17c>)
1a00179e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017a2:	601a      	str	r2, [r3, #0]
1a0017a4:	f3bf 8f4f 	dsb	sy
1a0017a8:	f3bf 8f6f 	isb	sy
1a0017ac:	e7bf      	b.n	1a00172e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a0017ae:	4620      	mov	r0, r4
1a0017b0:	f7ff fe72 	bl	1a001498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0017b4:	f000 fcb4 	bl	1a002120 <xTaskResumeAll>
			return errQUEUE_FULL;
1a0017b8:	2000      	movs	r0, #0
1a0017ba:	e791      	b.n	1a0016e0 <xQueueGenericSend+0xa0>
1a0017bc:	e000ed04 	.word	0xe000ed04

1a0017c0 <xQueueGenericSendFromISR>:
{
1a0017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0017c4:	b178      	cbz	r0, 1a0017e6 <xQueueGenericSendFromISR+0x26>
1a0017c6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0017c8:	b1b1      	cbz	r1, 1a0017f8 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0017ca:	2b02      	cmp	r3, #2
1a0017cc:	d120      	bne.n	1a001810 <xQueueGenericSendFromISR+0x50>
1a0017ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0017d0:	2801      	cmp	r0, #1
1a0017d2:	d01d      	beq.n	1a001810 <xQueueGenericSendFromISR+0x50>
1a0017d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017d8:	f383 8811 	msr	BASEPRI, r3
1a0017dc:	f3bf 8f6f 	isb	sy
1a0017e0:	f3bf 8f4f 	dsb	sy
1a0017e4:	e7fe      	b.n	1a0017e4 <xQueueGenericSendFromISR+0x24>
1a0017e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017ea:	f383 8811 	msr	BASEPRI, r3
1a0017ee:	f3bf 8f6f 	isb	sy
1a0017f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a0017f6:	e7fe      	b.n	1a0017f6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0017f8:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0017fa:	2800      	cmp	r0, #0
1a0017fc:	d0e5      	beq.n	1a0017ca <xQueueGenericSendFromISR+0xa>
1a0017fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001802:	f383 8811 	msr	BASEPRI, r3
1a001806:	f3bf 8f6f 	isb	sy
1a00180a:	f3bf 8f4f 	dsb	sy
1a00180e:	e7fe      	b.n	1a00180e <xQueueGenericSendFromISR+0x4e>
1a001810:	461f      	mov	r7, r3
1a001812:	4690      	mov	r8, r2
1a001814:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001816:	f001 fac7 	bl	1a002da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00181a:	f3ef 8611 	mrs	r6, BASEPRI
1a00181e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001822:	f383 8811 	msr	BASEPRI, r3
1a001826:	f3bf 8f6f 	isb	sy
1a00182a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00182e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001832:	429a      	cmp	r2, r3
1a001834:	d306      	bcc.n	1a001844 <xQueueGenericSendFromISR+0x84>
1a001836:	2f02      	cmp	r7, #2
1a001838:	d004      	beq.n	1a001844 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a00183a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00183c:	f386 8811 	msr	BASEPRI, r6
}
1a001840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a001844:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001848:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00184a:	463a      	mov	r2, r7
1a00184c:	4649      	mov	r1, r9
1a00184e:	4620      	mov	r0, r4
1a001850:	f7ff fdd5 	bl	1a0013fe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001854:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001858:	d005      	beq.n	1a001866 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00185a:	1c6b      	adds	r3, r5, #1
1a00185c:	b25b      	sxtb	r3, r3
1a00185e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001862:	2001      	movs	r0, #1
1a001864:	e7ea      	b.n	1a00183c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001866:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001868:	b90b      	cbnz	r3, 1a00186e <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a00186a:	2001      	movs	r0, #1
1a00186c:	e7e6      	b.n	1a00183c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00186e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001872:	f000 fde5 	bl	1a002440 <xTaskRemoveFromEventList>
1a001876:	b130      	cbz	r0, 1a001886 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a001878:	f1b8 0f00 	cmp.w	r8, #0
1a00187c:	d005      	beq.n	1a00188a <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00187e:	2001      	movs	r0, #1
1a001880:	f8c8 0000 	str.w	r0, [r8]
1a001884:	e7da      	b.n	1a00183c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a001886:	2001      	movs	r0, #1
1a001888:	e7d8      	b.n	1a00183c <xQueueGenericSendFromISR+0x7c>
1a00188a:	2001      	movs	r0, #1
1a00188c:	e7d6      	b.n	1a00183c <xQueueGenericSendFromISR+0x7c>
1a00188e:	Address 0x000000001a00188e is out of bounds.


1a001890 <xQueueReceive>:
{
1a001890:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001892:	b085      	sub	sp, #20
1a001894:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001896:	b180      	cbz	r0, 1a0018ba <xQueueReceive+0x2a>
1a001898:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00189a:	b1b9      	cbz	r1, 1a0018cc <xQueueReceive+0x3c>
1a00189c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00189e:	f000 fe69 	bl	1a002574 <xTaskGetSchedulerState>
1a0018a2:	b9f8      	cbnz	r0, 1a0018e4 <xQueueReceive+0x54>
1a0018a4:	9b01      	ldr	r3, [sp, #4]
1a0018a6:	b1fb      	cbz	r3, 1a0018e8 <xQueueReceive+0x58>
	__asm volatile
1a0018a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ac:	f383 8811 	msr	BASEPRI, r3
1a0018b0:	f3bf 8f6f 	isb	sy
1a0018b4:	f3bf 8f4f 	dsb	sy
1a0018b8:	e7fe      	b.n	1a0018b8 <xQueueReceive+0x28>
1a0018ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018be:	f383 8811 	msr	BASEPRI, r3
1a0018c2:	f3bf 8f6f 	isb	sy
1a0018c6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a0018ca:	e7fe      	b.n	1a0018ca <xQueueReceive+0x3a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0018cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0018ce:	2b00      	cmp	r3, #0
1a0018d0:	d0e4      	beq.n	1a00189c <xQueueReceive+0xc>
1a0018d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d6:	f383 8811 	msr	BASEPRI, r3
1a0018da:	f3bf 8f6f 	isb	sy
1a0018de:	f3bf 8f4f 	dsb	sy
1a0018e2:	e7fe      	b.n	1a0018e2 <xQueueReceive+0x52>
1a0018e4:	2600      	movs	r6, #0
1a0018e6:	e03e      	b.n	1a001966 <xQueueReceive+0xd6>
1a0018e8:	2600      	movs	r6, #0
1a0018ea:	e03c      	b.n	1a001966 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0018ec:	4639      	mov	r1, r7
1a0018ee:	4620      	mov	r0, r4
1a0018f0:	f7ff fdc0 	bl	1a001474 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0018f4:	3d01      	subs	r5, #1
1a0018f6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0018f8:	6923      	ldr	r3, [r4, #16]
1a0018fa:	b923      	cbnz	r3, 1a001906 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a0018fc:	f001 f94c 	bl	1a002b98 <vPortExitCritical>
				return pdPASS;
1a001900:	2001      	movs	r0, #1
}
1a001902:	b005      	add	sp, #20
1a001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001906:	f104 0010 	add.w	r0, r4, #16
1a00190a:	f000 fd99 	bl	1a002440 <xTaskRemoveFromEventList>
1a00190e:	2800      	cmp	r0, #0
1a001910:	d0f4      	beq.n	1a0018fc <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a001912:	4b35      	ldr	r3, [pc, #212]	; (1a0019e8 <xQueueReceive+0x158>)
1a001914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001918:	601a      	str	r2, [r3, #0]
1a00191a:	f3bf 8f4f 	dsb	sy
1a00191e:	f3bf 8f6f 	isb	sy
1a001922:	e7eb      	b.n	1a0018fc <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a001924:	f001 f938 	bl	1a002b98 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001928:	2000      	movs	r0, #0
1a00192a:	e7ea      	b.n	1a001902 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00192c:	a802      	add	r0, sp, #8
1a00192e:	f000 fdcd 	bl	1a0024cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001932:	2601      	movs	r6, #1
1a001934:	e021      	b.n	1a00197a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a001936:	2300      	movs	r3, #0
1a001938:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00193c:	e029      	b.n	1a001992 <xQueueReceive+0x102>
1a00193e:	2300      	movs	r3, #0
1a001940:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001944:	e02b      	b.n	1a00199e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a001946:	4620      	mov	r0, r4
1a001948:	f7ff fda6 	bl	1a001498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00194c:	f000 fbe8 	bl	1a002120 <xTaskResumeAll>
1a001950:	e009      	b.n	1a001966 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a001952:	4620      	mov	r0, r4
1a001954:	f7ff fda0 	bl	1a001498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001958:	f000 fbe2 	bl	1a002120 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00195c:	4620      	mov	r0, r4
1a00195e:	f7ff fd41 	bl	1a0013e4 <prvIsQueueEmpty>
1a001962:	2800      	cmp	r0, #0
1a001964:	d13d      	bne.n	1a0019e2 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a001966:	f001 f8f5 	bl	1a002b54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00196a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00196c:	2d00      	cmp	r5, #0
1a00196e:	d1bd      	bne.n	1a0018ec <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001970:	9b01      	ldr	r3, [sp, #4]
1a001972:	2b00      	cmp	r3, #0
1a001974:	d0d6      	beq.n	1a001924 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a001976:	2e00      	cmp	r6, #0
1a001978:	d0d8      	beq.n	1a00192c <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a00197a:	f001 f90d 	bl	1a002b98 <vPortExitCritical>
		vTaskSuspendAll();
1a00197e:	f000 fb35 	bl	1a001fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001982:	f001 f8e7 	bl	1a002b54 <vPortEnterCritical>
1a001986:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00198a:	b25b      	sxtb	r3, r3
1a00198c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001990:	d0d1      	beq.n	1a001936 <xQueueReceive+0xa6>
1a001992:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001996:	b25b      	sxtb	r3, r3
1a001998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00199c:	d0cf      	beq.n	1a00193e <xQueueReceive+0xae>
1a00199e:	f001 f8fb 	bl	1a002b98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0019a2:	a901      	add	r1, sp, #4
1a0019a4:	a802      	add	r0, sp, #8
1a0019a6:	f000 fd9d 	bl	1a0024e4 <xTaskCheckForTimeOut>
1a0019aa:	2800      	cmp	r0, #0
1a0019ac:	d1d1      	bne.n	1a001952 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0019ae:	4620      	mov	r0, r4
1a0019b0:	f7ff fd18 	bl	1a0013e4 <prvIsQueueEmpty>
1a0019b4:	2800      	cmp	r0, #0
1a0019b6:	d0c6      	beq.n	1a001946 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0019b8:	9901      	ldr	r1, [sp, #4]
1a0019ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0019be:	f000 fd0b 	bl	1a0023d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0019c2:	4620      	mov	r0, r4
1a0019c4:	f7ff fd68 	bl	1a001498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0019c8:	f000 fbaa 	bl	1a002120 <xTaskResumeAll>
1a0019cc:	2800      	cmp	r0, #0
1a0019ce:	d1ca      	bne.n	1a001966 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a0019d0:	4b05      	ldr	r3, [pc, #20]	; (1a0019e8 <xQueueReceive+0x158>)
1a0019d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d6:	601a      	str	r2, [r3, #0]
1a0019d8:	f3bf 8f4f 	dsb	sy
1a0019dc:	f3bf 8f6f 	isb	sy
1a0019e0:	e7c1      	b.n	1a001966 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a0019e2:	2000      	movs	r0, #0
1a0019e4:	e78d      	b.n	1a001902 <xQueueReceive+0x72>
1a0019e6:	bf00      	nop
1a0019e8:	e000ed04 	.word	0xe000ed04

1a0019ec <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0019ec:	2300      	movs	r3, #0
1a0019ee:	2b07      	cmp	r3, #7
1a0019f0:	d80c      	bhi.n	1a001a0c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0019f2:	4a07      	ldr	r2, [pc, #28]	; (1a001a10 <vQueueAddToRegistry+0x24>)
1a0019f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0019f8:	b10a      	cbz	r2, 1a0019fe <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0019fa:	3301      	adds	r3, #1
1a0019fc:	e7f7      	b.n	1a0019ee <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0019fe:	4a04      	ldr	r2, [pc, #16]	; (1a001a10 <vQueueAddToRegistry+0x24>)
1a001a00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001a04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001a08:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001a0a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001a0c:	4770      	bx	lr
1a001a0e:	bf00      	nop
1a001a10:	10003850 	.word	0x10003850

1a001a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001a14:	b570      	push	{r4, r5, r6, lr}
1a001a16:	4604      	mov	r4, r0
1a001a18:	460d      	mov	r5, r1
1a001a1a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001a1c:	f001 f89a 	bl	1a002b54 <vPortEnterCritical>
1a001a20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001a24:	b25b      	sxtb	r3, r3
1a001a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a2a:	d00d      	beq.n	1a001a48 <vQueueWaitForMessageRestricted+0x34>
1a001a2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a30:	b25b      	sxtb	r3, r3
1a001a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a36:	d00b      	beq.n	1a001a50 <vQueueWaitForMessageRestricted+0x3c>
1a001a38:	f001 f8ae 	bl	1a002b98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001a3e:	b15b      	cbz	r3, 1a001a58 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001a40:	4620      	mov	r0, r4
1a001a42:	f7ff fd29 	bl	1a001498 <prvUnlockQueue>
	}
1a001a46:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001a48:	2300      	movs	r3, #0
1a001a4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001a4e:	e7ed      	b.n	1a001a2c <vQueueWaitForMessageRestricted+0x18>
1a001a50:	2300      	movs	r3, #0
1a001a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001a56:	e7ef      	b.n	1a001a38 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001a58:	4632      	mov	r2, r6
1a001a5a:	4629      	mov	r1, r5
1a001a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001a60:	f000 fcd2 	bl	1a002408 <vTaskPlaceOnEventListRestricted>
1a001a64:	e7ec      	b.n	1a001a40 <vQueueWaitForMessageRestricted+0x2c>

1a001a66 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001a66:	f100 0308 	add.w	r3, r0, #8
1a001a6a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a70:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001a72:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001a74:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001a76:	2300      	movs	r3, #0
1a001a78:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001a7a:	4770      	bx	lr

1a001a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001a7c:	2300      	movs	r3, #0
1a001a7e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001a80:	4770      	bx	lr

1a001a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001a82:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001a84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001a86:	689a      	ldr	r2, [r3, #8]
1a001a88:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001a8a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001a8c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001a8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001a90:	6803      	ldr	r3, [r0, #0]
1a001a92:	3301      	adds	r3, #1
1a001a94:	6003      	str	r3, [r0, #0]
}
1a001a96:	4770      	bx	lr

1a001a98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001a98:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001a9a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001a9c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001aa0:	d002      	beq.n	1a001aa8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001aa2:	f100 0208 	add.w	r2, r0, #8
1a001aa6:	e002      	b.n	1a001aae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001aa8:	6902      	ldr	r2, [r0, #16]
1a001aaa:	e004      	b.n	1a001ab6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001aac:	461a      	mov	r2, r3
1a001aae:	6853      	ldr	r3, [r2, #4]
1a001ab0:	681c      	ldr	r4, [r3, #0]
1a001ab2:	42ac      	cmp	r4, r5
1a001ab4:	d9fa      	bls.n	1a001aac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001ab6:	6853      	ldr	r3, [r2, #4]
1a001ab8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001aba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001abc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001abe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001ac0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001ac2:	6803      	ldr	r3, [r0, #0]
1a001ac4:	3301      	adds	r3, #1
1a001ac6:	6003      	str	r3, [r0, #0]
}
1a001ac8:	bc30      	pop	{r4, r5}
1a001aca:	4770      	bx	lr

1a001acc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001acc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001ace:	6841      	ldr	r1, [r0, #4]
1a001ad0:	6882      	ldr	r2, [r0, #8]
1a001ad2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001ad4:	6841      	ldr	r1, [r0, #4]
1a001ad6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001ad8:	685a      	ldr	r2, [r3, #4]
1a001ada:	4282      	cmp	r2, r0
1a001adc:	d006      	beq.n	1a001aec <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001ade:	2200      	movs	r2, #0
1a001ae0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001ae2:	681a      	ldr	r2, [r3, #0]
1a001ae4:	3a01      	subs	r2, #1
1a001ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001ae8:	6818      	ldr	r0, [r3, #0]
}
1a001aea:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001aec:	6882      	ldr	r2, [r0, #8]
1a001aee:	605a      	str	r2, [r3, #4]
1a001af0:	e7f5      	b.n	1a001ade <uxListRemove+0x12>
1a001af2:	Address 0x000000001a001af2 is out of bounds.


1a001af4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001af4:	4b03      	ldr	r3, [pc, #12]	; (1a001b04 <vApplicationGetIdleTaskMemory+0x10>)
1a001af6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001af8:	4b03      	ldr	r3, [pc, #12]	; (1a001b08 <vApplicationGetIdleTaskMemory+0x14>)
1a001afa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001afc:	235a      	movs	r3, #90	; 0x5a
1a001afe:	6013      	str	r3, [r2, #0]
}
1a001b00:	4770      	bx	lr
1a001b02:	bf00      	nop
1a001b04:	1000319c 	.word	0x1000319c
1a001b08:	10002a94 	.word	0x10002a94

1a001b0c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001b0c:	4b03      	ldr	r3, [pc, #12]	; (1a001b1c <vApplicationGetTimerTaskMemory+0x10>)
1a001b0e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001b10:	4b03      	ldr	r3, [pc, #12]	; (1a001b20 <vApplicationGetTimerTaskMemory+0x14>)
1a001b12:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001b14:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001b18:	6013      	str	r3, [r2, #0]
1a001b1a:	4770      	bx	lr
1a001b1c:	100031fc 	.word	0x100031fc
1a001b20:	10002bfc 	.word	0x10002bfc

1a001b24 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001b24:	b510      	push	{r4, lr}
1a001b26:	b082      	sub	sp, #8
1a001b28:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001b2a:	9001      	str	r0, [sp, #4]
1a001b2c:	2300      	movs	r3, #0
1a001b2e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001b30:	f001 f810 	bl	1a002b54 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001b34:	9901      	ldr	r1, [sp, #4]
1a001b36:	4622      	mov	r2, r4
1a001b38:	4804      	ldr	r0, [pc, #16]	; (1a001b4c <vAssertCalled+0x28>)
1a001b3a:	f005 faf5 	bl	1a007128 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001b3e:	9b00      	ldr	r3, [sp, #0]
1a001b40:	2b00      	cmp	r3, #0
1a001b42:	d0fc      	beq.n	1a001b3e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001b44:	f001 f828 	bl	1a002b98 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001b48:	b002      	add	sp, #8
1a001b4a:	bd10      	pop	{r4, pc}
1a001b4c:	1a00bcdc 	.word	0x1a00bcdc

1a001b50 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001b50:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001b52:	4804      	ldr	r0, [pc, #16]	; (1a001b64 <vApplicationStackOverflowHook+0x14>)
1a001b54:	f005 fae8 	bl	1a007128 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a001b58:	4903      	ldr	r1, [pc, #12]	; (1a001b68 <vApplicationStackOverflowHook+0x18>)
1a001b5a:	2050      	movs	r0, #80	; 0x50
1a001b5c:	f7ff ffe2 	bl	1a001b24 <vAssertCalled>
}
1a001b60:	bd08      	pop	{r3, pc}
1a001b62:	bf00      	nop
1a001b64:	1a00bcac 	.word	0x1a00bcac
1a001b68:	1a00bc8c 	.word	0x1a00bc8c

1a001b6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001b6c:	4b08      	ldr	r3, [pc, #32]	; (1a001b90 <prvResetNextTaskUnblockTime+0x24>)
1a001b6e:	681b      	ldr	r3, [r3, #0]
1a001b70:	681b      	ldr	r3, [r3, #0]
1a001b72:	b923      	cbnz	r3, 1a001b7e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001b74:	4b07      	ldr	r3, [pc, #28]	; (1a001b94 <prvResetNextTaskUnblockTime+0x28>)
1a001b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001b7a:	601a      	str	r2, [r3, #0]
1a001b7c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001b7e:	4b04      	ldr	r3, [pc, #16]	; (1a001b90 <prvResetNextTaskUnblockTime+0x24>)
1a001b80:	681b      	ldr	r3, [r3, #0]
1a001b82:	68db      	ldr	r3, [r3, #12]
1a001b84:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001b86:	685a      	ldr	r2, [r3, #4]
1a001b88:	4b02      	ldr	r3, [pc, #8]	; (1a001b94 <prvResetNextTaskUnblockTime+0x28>)
1a001b8a:	601a      	str	r2, [r3, #0]
	}
}
1a001b8c:	4770      	bx	lr
1a001b8e:	bf00      	nop
1a001b90:	10003260 	.word	0x10003260
1a001b94:	10003334 	.word	0x10003334

1a001b98 <prvInitialiseNewTask>:
{
1a001b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001b9c:	4681      	mov	r9, r0
1a001b9e:	460d      	mov	r5, r1
1a001ba0:	4617      	mov	r7, r2
1a001ba2:	469a      	mov	sl, r3
1a001ba4:	9e08      	ldr	r6, [sp, #32]
1a001ba6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001bac:	0092      	lsls	r2, r2, #2
1a001bae:	21a5      	movs	r1, #165	; 0xa5
1a001bb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001bb2:	f005 fa5d 	bl	1a007070 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001bb8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001bbc:	3a01      	subs	r2, #1
1a001bbe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001bc2:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001bc6:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001bc8:	2300      	movs	r3, #0
1a001bca:	2b0f      	cmp	r3, #15
1a001bcc:	d806      	bhi.n	1a001bdc <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001bce:	5cea      	ldrb	r2, [r5, r3]
1a001bd0:	18e1      	adds	r1, r4, r3
1a001bd2:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001bd6:	b10a      	cbz	r2, 1a001bdc <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001bd8:	3301      	adds	r3, #1
1a001bda:	e7f6      	b.n	1a001bca <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001bdc:	2300      	movs	r3, #0
1a001bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001be2:	2e06      	cmp	r6, #6
1a001be4:	d900      	bls.n	1a001be8 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001be6:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001be8:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001bea:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001bec:	2500      	movs	r5, #0
1a001bee:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001bf0:	1d20      	adds	r0, r4, #4
1a001bf2:	f7ff ff43 	bl	1a001a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001bf6:	f104 0018 	add.w	r0, r4, #24
1a001bfa:	f7ff ff3f 	bl	1a001a7c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001bfe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c00:	f1c6 0607 	rsb	r6, r6, #7
1a001c04:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001c06:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001c08:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001c0a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001c0e:	4652      	mov	r2, sl
1a001c10:	4649      	mov	r1, r9
1a001c12:	4638      	mov	r0, r7
1a001c14:	f000 ff70 	bl	1a002af8 <pxPortInitialiseStack>
1a001c18:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001c1a:	f1b8 0f00 	cmp.w	r8, #0
1a001c1e:	d001      	beq.n	1a001c24 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001c20:	f8c8 4000 	str.w	r4, [r8]
}
1a001c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001c28 <prvInitialiseTaskLists>:
{
1a001c28:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001c2a:	2400      	movs	r4, #0
1a001c2c:	2c06      	cmp	r4, #6
1a001c2e:	d808      	bhi.n	1a001c42 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001c30:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001c34:	0093      	lsls	r3, r2, #2
1a001c36:	480e      	ldr	r0, [pc, #56]	; (1a001c70 <prvInitialiseTaskLists+0x48>)
1a001c38:	4418      	add	r0, r3
1a001c3a:	f7ff ff14 	bl	1a001a66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001c3e:	3401      	adds	r4, #1
1a001c40:	e7f4      	b.n	1a001c2c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
1a001c42:	4d0c      	ldr	r5, [pc, #48]	; (1a001c74 <prvInitialiseTaskLists+0x4c>)
1a001c44:	4628      	mov	r0, r5
1a001c46:	f7ff ff0e 	bl	1a001a66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001c4a:	4c0b      	ldr	r4, [pc, #44]	; (1a001c78 <prvInitialiseTaskLists+0x50>)
1a001c4c:	4620      	mov	r0, r4
1a001c4e:	f7ff ff0a 	bl	1a001a66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001c52:	480a      	ldr	r0, [pc, #40]	; (1a001c7c <prvInitialiseTaskLists+0x54>)
1a001c54:	f7ff ff07 	bl	1a001a66 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001c58:	4809      	ldr	r0, [pc, #36]	; (1a001c80 <prvInitialiseTaskLists+0x58>)
1a001c5a:	f7ff ff04 	bl	1a001a66 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001c5e:	4809      	ldr	r0, [pc, #36]	; (1a001c84 <prvInitialiseTaskLists+0x5c>)
1a001c60:	f7ff ff01 	bl	1a001a66 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001c64:	4b08      	ldr	r3, [pc, #32]	; (1a001c88 <prvInitialiseTaskLists+0x60>)
1a001c66:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001c68:	4b08      	ldr	r3, [pc, #32]	; (1a001c8c <prvInitialiseTaskLists+0x64>)
1a001c6a:	601c      	str	r4, [r3, #0]
}
1a001c6c:	bd38      	pop	{r3, r4, r5, pc}
1a001c6e:	bf00      	nop
1a001c70:	10003268 	.word	0x10003268
1a001c74:	1000330c 	.word	0x1000330c
1a001c78:	10003320 	.word	0x10003320
1a001c7c:	1000333c 	.word	0x1000333c
1a001c80:	10003368 	.word	0x10003368
1a001c84:	10003354 	.word	0x10003354
1a001c88:	10003260 	.word	0x10003260
1a001c8c:	10003264 	.word	0x10003264

1a001c90 <prvAddNewTaskToReadyList>:
{
1a001c90:	b510      	push	{r4, lr}
1a001c92:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001c94:	f000 ff5e 	bl	1a002b54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001c98:	4a21      	ldr	r2, [pc, #132]	; (1a001d20 <prvAddNewTaskToReadyList+0x90>)
1a001c9a:	6813      	ldr	r3, [r2, #0]
1a001c9c:	3301      	adds	r3, #1
1a001c9e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001ca0:	4b20      	ldr	r3, [pc, #128]	; (1a001d24 <prvAddNewTaskToReadyList+0x94>)
1a001ca2:	681b      	ldr	r3, [r3, #0]
1a001ca4:	b15b      	cbz	r3, 1a001cbe <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001ca6:	4b20      	ldr	r3, [pc, #128]	; (1a001d28 <prvAddNewTaskToReadyList+0x98>)
1a001ca8:	681b      	ldr	r3, [r3, #0]
1a001caa:	b96b      	cbnz	r3, 1a001cc8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001cac:	4b1d      	ldr	r3, [pc, #116]	; (1a001d24 <prvAddNewTaskToReadyList+0x94>)
1a001cae:	681b      	ldr	r3, [r3, #0]
1a001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001cb4:	429a      	cmp	r2, r3
1a001cb6:	d807      	bhi.n	1a001cc8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001cb8:	4b1a      	ldr	r3, [pc, #104]	; (1a001d24 <prvAddNewTaskToReadyList+0x94>)
1a001cba:	601c      	str	r4, [r3, #0]
1a001cbc:	e004      	b.n	1a001cc8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001cbe:	4b19      	ldr	r3, [pc, #100]	; (1a001d24 <prvAddNewTaskToReadyList+0x94>)
1a001cc0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001cc2:	6813      	ldr	r3, [r2, #0]
1a001cc4:	2b01      	cmp	r3, #1
1a001cc6:	d027      	beq.n	1a001d18 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001cc8:	4a18      	ldr	r2, [pc, #96]	; (1a001d2c <prvAddNewTaskToReadyList+0x9c>)
1a001cca:	6813      	ldr	r3, [r2, #0]
1a001ccc:	3301      	adds	r3, #1
1a001cce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001cd0:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001cd4:	2201      	movs	r2, #1
1a001cd6:	409a      	lsls	r2, r3
1a001cd8:	4915      	ldr	r1, [pc, #84]	; (1a001d30 <prvAddNewTaskToReadyList+0xa0>)
1a001cda:	6808      	ldr	r0, [r1, #0]
1a001cdc:	4302      	orrs	r2, r0
1a001cde:	600a      	str	r2, [r1, #0]
1a001ce0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ce4:	009a      	lsls	r2, r3, #2
1a001ce6:	1d21      	adds	r1, r4, #4
1a001ce8:	4812      	ldr	r0, [pc, #72]	; (1a001d34 <prvAddNewTaskToReadyList+0xa4>)
1a001cea:	4410      	add	r0, r2
1a001cec:	f7ff fec9 	bl	1a001a82 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001cf0:	f000 ff52 	bl	1a002b98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001cf4:	4b0c      	ldr	r3, [pc, #48]	; (1a001d28 <prvAddNewTaskToReadyList+0x98>)
1a001cf6:	681b      	ldr	r3, [r3, #0]
1a001cf8:	b16b      	cbz	r3, 1a001d16 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001cfa:	4b0a      	ldr	r3, [pc, #40]	; (1a001d24 <prvAddNewTaskToReadyList+0x94>)
1a001cfc:	681b      	ldr	r3, [r3, #0]
1a001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d02:	429a      	cmp	r2, r3
1a001d04:	d207      	bcs.n	1a001d16 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001d06:	4b0c      	ldr	r3, [pc, #48]	; (1a001d38 <prvAddNewTaskToReadyList+0xa8>)
1a001d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d0c:	601a      	str	r2, [r3, #0]
1a001d0e:	f3bf 8f4f 	dsb	sy
1a001d12:	f3bf 8f6f 	isb	sy
}
1a001d16:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001d18:	f7ff ff86 	bl	1a001c28 <prvInitialiseTaskLists>
1a001d1c:	e7d4      	b.n	1a001cc8 <prvAddNewTaskToReadyList+0x38>
1a001d1e:	bf00      	nop
1a001d20:	100032f4 	.word	0x100032f4
1a001d24:	1000325c 	.word	0x1000325c
1a001d28:	10003350 	.word	0x10003350
1a001d2c:	10003304 	.word	0x10003304
1a001d30:	10003308 	.word	0x10003308
1a001d34:	10003268 	.word	0x10003268
1a001d38:	e000ed04 	.word	0xe000ed04

1a001d3c <prvDeleteTCB>:
	{
1a001d3c:	b510      	push	{r4, lr}
1a001d3e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001d40:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001d44:	b163      	cbz	r3, 1a001d60 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001d46:	2b01      	cmp	r3, #1
1a001d48:	d011      	beq.n	1a001d6e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001d4a:	2b02      	cmp	r3, #2
1a001d4c:	d00e      	beq.n	1a001d6c <prvDeleteTCB+0x30>
1a001d4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d52:	f383 8811 	msr	BASEPRI, r3
1a001d56:	f3bf 8f6f 	isb	sy
1a001d5a:	f3bf 8f4f 	dsb	sy
1a001d5e:	e7fe      	b.n	1a001d5e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a001d60:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001d62:	f7ff fb25 	bl	1a0013b0 <vPortFree>
				vPortFree( pxTCB );
1a001d66:	4620      	mov	r0, r4
1a001d68:	f7ff fb22 	bl	1a0013b0 <vPortFree>
	}
1a001d6c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a001d6e:	f7ff fb1f 	bl	1a0013b0 <vPortFree>
1a001d72:	e7fb      	b.n	1a001d6c <prvDeleteTCB+0x30>

1a001d74 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001d74:	4b0f      	ldr	r3, [pc, #60]	; (1a001db4 <prvCheckTasksWaitingTermination+0x40>)
1a001d76:	681b      	ldr	r3, [r3, #0]
1a001d78:	b1d3      	cbz	r3, 1a001db0 <prvCheckTasksWaitingTermination+0x3c>
{
1a001d7a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001d7c:	f000 feea 	bl	1a002b54 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001d80:	4b0d      	ldr	r3, [pc, #52]	; (1a001db8 <prvCheckTasksWaitingTermination+0x44>)
1a001d82:	68db      	ldr	r3, [r3, #12]
1a001d84:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d86:	1d20      	adds	r0, r4, #4
1a001d88:	f7ff fea0 	bl	1a001acc <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001d8c:	4a0b      	ldr	r2, [pc, #44]	; (1a001dbc <prvCheckTasksWaitingTermination+0x48>)
1a001d8e:	6813      	ldr	r3, [r2, #0]
1a001d90:	3b01      	subs	r3, #1
1a001d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001d94:	4a07      	ldr	r2, [pc, #28]	; (1a001db4 <prvCheckTasksWaitingTermination+0x40>)
1a001d96:	6813      	ldr	r3, [r2, #0]
1a001d98:	3b01      	subs	r3, #1
1a001d9a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001d9c:	f000 fefc 	bl	1a002b98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001da0:	4620      	mov	r0, r4
1a001da2:	f7ff ffcb 	bl	1a001d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001da6:	4b03      	ldr	r3, [pc, #12]	; (1a001db4 <prvCheckTasksWaitingTermination+0x40>)
1a001da8:	681b      	ldr	r3, [r3, #0]
1a001daa:	2b00      	cmp	r3, #0
1a001dac:	d1e6      	bne.n	1a001d7c <prvCheckTasksWaitingTermination+0x8>
}
1a001dae:	bd10      	pop	{r4, pc}
1a001db0:	4770      	bx	lr
1a001db2:	bf00      	nop
1a001db4:	100032f8 	.word	0x100032f8
1a001db8:	10003368 	.word	0x10003368
1a001dbc:	100032f4 	.word	0x100032f4

1a001dc0 <prvIdleTask>:
{
1a001dc0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001dc2:	f7ff ffd7 	bl	1a001d74 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001dc6:	4b06      	ldr	r3, [pc, #24]	; (1a001de0 <prvIdleTask+0x20>)
1a001dc8:	681b      	ldr	r3, [r3, #0]
1a001dca:	2b01      	cmp	r3, #1
1a001dcc:	d9f9      	bls.n	1a001dc2 <prvIdleTask+0x2>
				taskYIELD();
1a001dce:	4b05      	ldr	r3, [pc, #20]	; (1a001de4 <prvIdleTask+0x24>)
1a001dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001dd4:	601a      	str	r2, [r3, #0]
1a001dd6:	f3bf 8f4f 	dsb	sy
1a001dda:	f3bf 8f6f 	isb	sy
1a001dde:	e7f0      	b.n	1a001dc2 <prvIdleTask+0x2>
1a001de0:	10003268 	.word	0x10003268
1a001de4:	e000ed04 	.word	0xe000ed04

1a001de8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001de8:	b570      	push	{r4, r5, r6, lr}
1a001dea:	4604      	mov	r4, r0
1a001dec:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001dee:	4b1d      	ldr	r3, [pc, #116]	; (1a001e64 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001df0:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001df2:	4b1d      	ldr	r3, [pc, #116]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001df4:	6818      	ldr	r0, [r3, #0]
1a001df6:	3004      	adds	r0, #4
1a001df8:	f7ff fe68 	bl	1a001acc <uxListRemove>
1a001dfc:	b950      	cbnz	r0, 1a001e14 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001dfe:	4b1a      	ldr	r3, [pc, #104]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001e00:	681b      	ldr	r3, [r3, #0]
1a001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001e04:	2301      	movs	r3, #1
1a001e06:	fa03 f202 	lsl.w	r2, r3, r2
1a001e0a:	4918      	ldr	r1, [pc, #96]	; (1a001e6c <prvAddCurrentTaskToDelayedList+0x84>)
1a001e0c:	680b      	ldr	r3, [r1, #0]
1a001e0e:	ea23 0302 	bic.w	r3, r3, r2
1a001e12:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001e14:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001e18:	d00d      	beq.n	1a001e36 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001e1a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001e1c:	4b12      	ldr	r3, [pc, #72]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001e1e:	681b      	ldr	r3, [r3, #0]
1a001e20:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001e22:	42a5      	cmp	r5, r4
1a001e24:	d910      	bls.n	1a001e48 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001e26:	4b12      	ldr	r3, [pc, #72]	; (1a001e70 <prvAddCurrentTaskToDelayedList+0x88>)
1a001e28:	6818      	ldr	r0, [r3, #0]
1a001e2a:	4b0f      	ldr	r3, [pc, #60]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001e2c:	6819      	ldr	r1, [r3, #0]
1a001e2e:	3104      	adds	r1, #4
1a001e30:	f7ff fe32 	bl	1a001a98 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001e34:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001e36:	2e00      	cmp	r6, #0
1a001e38:	d0ef      	beq.n	1a001e1a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001e3a:	4b0b      	ldr	r3, [pc, #44]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001e3c:	6819      	ldr	r1, [r3, #0]
1a001e3e:	3104      	adds	r1, #4
1a001e40:	480c      	ldr	r0, [pc, #48]	; (1a001e74 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001e42:	f7ff fe1e 	bl	1a001a82 <vListInsertEnd>
1a001e46:	e7f5      	b.n	1a001e34 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001e48:	4b0b      	ldr	r3, [pc, #44]	; (1a001e78 <prvAddCurrentTaskToDelayedList+0x90>)
1a001e4a:	6818      	ldr	r0, [r3, #0]
1a001e4c:	4b06      	ldr	r3, [pc, #24]	; (1a001e68 <prvAddCurrentTaskToDelayedList+0x80>)
1a001e4e:	6819      	ldr	r1, [r3, #0]
1a001e50:	3104      	adds	r1, #4
1a001e52:	f7ff fe21 	bl	1a001a98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001e56:	4b09      	ldr	r3, [pc, #36]	; (1a001e7c <prvAddCurrentTaskToDelayedList+0x94>)
1a001e58:	681b      	ldr	r3, [r3, #0]
1a001e5a:	42a3      	cmp	r3, r4
1a001e5c:	d9ea      	bls.n	1a001e34 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a001e5e:	4b07      	ldr	r3, [pc, #28]	; (1a001e7c <prvAddCurrentTaskToDelayedList+0x94>)
1a001e60:	601c      	str	r4, [r3, #0]
}
1a001e62:	e7e7      	b.n	1a001e34 <prvAddCurrentTaskToDelayedList+0x4c>
1a001e64:	1000337c 	.word	0x1000337c
1a001e68:	1000325c 	.word	0x1000325c
1a001e6c:	10003308 	.word	0x10003308
1a001e70:	10003264 	.word	0x10003264
1a001e74:	10003354 	.word	0x10003354
1a001e78:	10003260 	.word	0x10003260
1a001e7c:	10003334 	.word	0x10003334

1a001e80 <xTaskCreateStatic>:
	{
1a001e80:	b570      	push	{r4, r5, r6, lr}
1a001e82:	b086      	sub	sp, #24
1a001e84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001e86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001e88:	b175      	cbz	r5, 1a001ea8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001e8a:	b1b4      	cbz	r4, 1a001eba <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001e8c:	2660      	movs	r6, #96	; 0x60
1a001e8e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001e90:	9e04      	ldr	r6, [sp, #16]
1a001e92:	2e60      	cmp	r6, #96	; 0x60
1a001e94:	d01a      	beq.n	1a001ecc <xTaskCreateStatic+0x4c>
1a001e96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e9a:	f383 8811 	msr	BASEPRI, r3
1a001e9e:	f3bf 8f6f 	isb	sy
1a001ea2:	f3bf 8f4f 	dsb	sy
1a001ea6:	e7fe      	b.n	1a001ea6 <xTaskCreateStatic+0x26>
1a001ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eac:	f383 8811 	msr	BASEPRI, r3
1a001eb0:	f3bf 8f6f 	isb	sy
1a001eb4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a001eb8:	e7fe      	b.n	1a001eb8 <xTaskCreateStatic+0x38>
1a001eba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ebe:	f383 8811 	msr	BASEPRI, r3
1a001ec2:	f3bf 8f6f 	isb	sy
1a001ec6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a001eca:	e7fe      	b.n	1a001eca <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001ecc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001ece:	2502      	movs	r5, #2
1a001ed0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001ed4:	2500      	movs	r5, #0
1a001ed6:	9503      	str	r5, [sp, #12]
1a001ed8:	9402      	str	r4, [sp, #8]
1a001eda:	ad05      	add	r5, sp, #20
1a001edc:	9501      	str	r5, [sp, #4]
1a001ede:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001ee0:	9500      	str	r5, [sp, #0]
1a001ee2:	f7ff fe59 	bl	1a001b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001ee6:	4620      	mov	r0, r4
1a001ee8:	f7ff fed2 	bl	1a001c90 <prvAddNewTaskToReadyList>
	}
1a001eec:	9805      	ldr	r0, [sp, #20]
1a001eee:	b006      	add	sp, #24
1a001ef0:	bd70      	pop	{r4, r5, r6, pc}

1a001ef2 <xTaskCreate>:
	{
1a001ef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001ef6:	b085      	sub	sp, #20
1a001ef8:	4607      	mov	r7, r0
1a001efa:	4688      	mov	r8, r1
1a001efc:	4615      	mov	r5, r2
1a001efe:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f00:	0090      	lsls	r0, r2, #2
1a001f02:	f7ff fa1d 	bl	1a001340 <pvPortMalloc>
			if( pxStack != NULL )
1a001f06:	b1f8      	cbz	r0, 1a001f48 <xTaskCreate+0x56>
1a001f08:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001f0a:	2060      	movs	r0, #96	; 0x60
1a001f0c:	f7ff fa18 	bl	1a001340 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001f10:	4604      	mov	r4, r0
1a001f12:	b1a8      	cbz	r0, 1a001f40 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a001f14:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001f16:	b1e4      	cbz	r4, 1a001f52 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001f18:	2300      	movs	r3, #0
1a001f1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001f1e:	9303      	str	r3, [sp, #12]
1a001f20:	9402      	str	r4, [sp, #8]
1a001f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001f24:	9301      	str	r3, [sp, #4]
1a001f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001f28:	9300      	str	r3, [sp, #0]
1a001f2a:	464b      	mov	r3, r9
1a001f2c:	462a      	mov	r2, r5
1a001f2e:	4641      	mov	r1, r8
1a001f30:	4638      	mov	r0, r7
1a001f32:	f7ff fe31 	bl	1a001b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001f36:	4620      	mov	r0, r4
1a001f38:	f7ff feaa 	bl	1a001c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001f3c:	2001      	movs	r0, #1
1a001f3e:	e005      	b.n	1a001f4c <xTaskCreate+0x5a>
					vPortFree( pxStack );
1a001f40:	4630      	mov	r0, r6
1a001f42:	f7ff fa35 	bl	1a0013b0 <vPortFree>
1a001f46:	e7e6      	b.n	1a001f16 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a001f4c:	b005      	add	sp, #20
1a001f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001f56:	e7f9      	b.n	1a001f4c <xTaskCreate+0x5a>

1a001f58 <vTaskStartScheduler>:
{
1a001f58:	b510      	push	{r4, lr}
1a001f5a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001f5c:	2400      	movs	r4, #0
1a001f5e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001f60:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001f62:	aa07      	add	r2, sp, #28
1a001f64:	a906      	add	r1, sp, #24
1a001f66:	a805      	add	r0, sp, #20
1a001f68:	f7ff fdc4 	bl	1a001af4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001f6c:	9b05      	ldr	r3, [sp, #20]
1a001f6e:	9302      	str	r3, [sp, #8]
1a001f70:	9b06      	ldr	r3, [sp, #24]
1a001f72:	9301      	str	r3, [sp, #4]
1a001f74:	9400      	str	r4, [sp, #0]
1a001f76:	4623      	mov	r3, r4
1a001f78:	9a07      	ldr	r2, [sp, #28]
1a001f7a:	4917      	ldr	r1, [pc, #92]	; (1a001fd8 <vTaskStartScheduler+0x80>)
1a001f7c:	4817      	ldr	r0, [pc, #92]	; (1a001fdc <vTaskStartScheduler+0x84>)
1a001f7e:	f7ff ff7f 	bl	1a001e80 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001f82:	b140      	cbz	r0, 1a001f96 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001f84:	f000 fbcc 	bl	1a002720 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001f88:	2801      	cmp	r0, #1
1a001f8a:	d006      	beq.n	1a001f9a <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001f8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001f90:	d018      	beq.n	1a001fc4 <vTaskStartScheduler+0x6c>
}
1a001f92:	b008      	add	sp, #32
1a001f94:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001f96:	2000      	movs	r0, #0
1a001f98:	e7f6      	b.n	1a001f88 <vTaskStartScheduler+0x30>
1a001f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f9e:	f383 8811 	msr	BASEPRI, r3
1a001fa2:	f3bf 8f6f 	isb	sy
1a001fa6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001faa:	4b0d      	ldr	r3, [pc, #52]	; (1a001fe0 <vTaskStartScheduler+0x88>)
1a001fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001fb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001fb2:	4b0c      	ldr	r3, [pc, #48]	; (1a001fe4 <vTaskStartScheduler+0x8c>)
1a001fb4:	2201      	movs	r2, #1
1a001fb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001fb8:	4b0b      	ldr	r3, [pc, #44]	; (1a001fe8 <vTaskStartScheduler+0x90>)
1a001fba:	2200      	movs	r2, #0
1a001fbc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001fbe:	f000 fe6b 	bl	1a002c98 <xPortStartScheduler>
1a001fc2:	e7e6      	b.n	1a001f92 <vTaskStartScheduler+0x3a>
1a001fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fc8:	f383 8811 	msr	BASEPRI, r3
1a001fcc:	f3bf 8f6f 	isb	sy
1a001fd0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001fd4:	e7fe      	b.n	1a001fd4 <vTaskStartScheduler+0x7c>
1a001fd6:	bf00      	nop
1a001fd8:	1a00bd1c 	.word	0x1a00bd1c
1a001fdc:	1a001dc1 	.word	0x1a001dc1
1a001fe0:	10003334 	.word	0x10003334
1a001fe4:	10003350 	.word	0x10003350
1a001fe8:	1000337c 	.word	0x1000337c

1a001fec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001fec:	4a02      	ldr	r2, [pc, #8]	; (1a001ff8 <vTaskSuspendAll+0xc>)
1a001fee:	6813      	ldr	r3, [r2, #0]
1a001ff0:	3301      	adds	r3, #1
1a001ff2:	6013      	str	r3, [r2, #0]
}
1a001ff4:	4770      	bx	lr
1a001ff6:	bf00      	nop
1a001ff8:	10003300 	.word	0x10003300

1a001ffc <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001ffc:	4b01      	ldr	r3, [pc, #4]	; (1a002004 <xTaskGetTickCount+0x8>)
1a001ffe:	6818      	ldr	r0, [r3, #0]
}
1a002000:	4770      	bx	lr
1a002002:	bf00      	nop
1a002004:	1000337c 	.word	0x1000337c

1a002008 <xTaskIncrementTick>:
{
1a002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00200a:	4b3a      	ldr	r3, [pc, #232]	; (1a0020f4 <xTaskIncrementTick+0xec>)
1a00200c:	681b      	ldr	r3, [r3, #0]
1a00200e:	2b00      	cmp	r3, #0
1a002010:	d164      	bne.n	1a0020dc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002012:	4b39      	ldr	r3, [pc, #228]	; (1a0020f8 <xTaskIncrementTick+0xf0>)
1a002014:	681d      	ldr	r5, [r3, #0]
1a002016:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002018:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00201a:	b9c5      	cbnz	r5, 1a00204e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00201c:	4b37      	ldr	r3, [pc, #220]	; (1a0020fc <xTaskIncrementTick+0xf4>)
1a00201e:	681b      	ldr	r3, [r3, #0]
1a002020:	681b      	ldr	r3, [r3, #0]
1a002022:	b143      	cbz	r3, 1a002036 <xTaskIncrementTick+0x2e>
1a002024:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002028:	f383 8811 	msr	BASEPRI, r3
1a00202c:	f3bf 8f6f 	isb	sy
1a002030:	f3bf 8f4f 	dsb	sy
1a002034:	e7fe      	b.n	1a002034 <xTaskIncrementTick+0x2c>
1a002036:	4a31      	ldr	r2, [pc, #196]	; (1a0020fc <xTaskIncrementTick+0xf4>)
1a002038:	6811      	ldr	r1, [r2, #0]
1a00203a:	4b31      	ldr	r3, [pc, #196]	; (1a002100 <xTaskIncrementTick+0xf8>)
1a00203c:	6818      	ldr	r0, [r3, #0]
1a00203e:	6010      	str	r0, [r2, #0]
1a002040:	6019      	str	r1, [r3, #0]
1a002042:	4a30      	ldr	r2, [pc, #192]	; (1a002104 <xTaskIncrementTick+0xfc>)
1a002044:	6813      	ldr	r3, [r2, #0]
1a002046:	3301      	adds	r3, #1
1a002048:	6013      	str	r3, [r2, #0]
1a00204a:	f7ff fd8f 	bl	1a001b6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00204e:	4b2e      	ldr	r3, [pc, #184]	; (1a002108 <xTaskIncrementTick+0x100>)
1a002050:	681b      	ldr	r3, [r3, #0]
1a002052:	42ab      	cmp	r3, r5
1a002054:	d938      	bls.n	1a0020c8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a002056:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002058:	4b2c      	ldr	r3, [pc, #176]	; (1a00210c <xTaskIncrementTick+0x104>)
1a00205a:	681b      	ldr	r3, [r3, #0]
1a00205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00205e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002062:	009a      	lsls	r2, r3, #2
1a002064:	4b2a      	ldr	r3, [pc, #168]	; (1a002110 <xTaskIncrementTick+0x108>)
1a002066:	589b      	ldr	r3, [r3, r2]
1a002068:	2b01      	cmp	r3, #1
1a00206a:	d93c      	bls.n	1a0020e6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a00206c:	2401      	movs	r4, #1
1a00206e:	e03a      	b.n	1a0020e6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002070:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a002072:	4b22      	ldr	r3, [pc, #136]	; (1a0020fc <xTaskIncrementTick+0xf4>)
1a002074:	681b      	ldr	r3, [r3, #0]
1a002076:	681b      	ldr	r3, [r3, #0]
1a002078:	b343      	cbz	r3, 1a0020cc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00207a:	4b20      	ldr	r3, [pc, #128]	; (1a0020fc <xTaskIncrementTick+0xf4>)
1a00207c:	681b      	ldr	r3, [r3, #0]
1a00207e:	68db      	ldr	r3, [r3, #12]
1a002080:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a002082:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a002084:	429d      	cmp	r5, r3
1a002086:	d326      	bcc.n	1a0020d6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002088:	1d37      	adds	r7, r6, #4
1a00208a:	4638      	mov	r0, r7
1a00208c:	f7ff fd1e 	bl	1a001acc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002090:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002092:	b11b      	cbz	r3, 1a00209c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002094:	f106 0018 	add.w	r0, r6, #24
1a002098:	f7ff fd18 	bl	1a001acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00209c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00209e:	2201      	movs	r2, #1
1a0020a0:	409a      	lsls	r2, r3
1a0020a2:	491c      	ldr	r1, [pc, #112]	; (1a002114 <xTaskIncrementTick+0x10c>)
1a0020a4:	6808      	ldr	r0, [r1, #0]
1a0020a6:	4302      	orrs	r2, r0
1a0020a8:	600a      	str	r2, [r1, #0]
1a0020aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0020ae:	009a      	lsls	r2, r3, #2
1a0020b0:	4639      	mov	r1, r7
1a0020b2:	4817      	ldr	r0, [pc, #92]	; (1a002110 <xTaskIncrementTick+0x108>)
1a0020b4:	4410      	add	r0, r2
1a0020b6:	f7ff fce4 	bl	1a001a82 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0020ba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0020bc:	4b13      	ldr	r3, [pc, #76]	; (1a00210c <xTaskIncrementTick+0x104>)
1a0020be:	681b      	ldr	r3, [r3, #0]
1a0020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0020c2:	429a      	cmp	r2, r3
1a0020c4:	d2d4      	bcs.n	1a002070 <xTaskIncrementTick+0x68>
1a0020c6:	e7d4      	b.n	1a002072 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0020c8:	2400      	movs	r4, #0
1a0020ca:	e7d2      	b.n	1a002072 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020cc:	4b0e      	ldr	r3, [pc, #56]	; (1a002108 <xTaskIncrementTick+0x100>)
1a0020ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0020d2:	601a      	str	r2, [r3, #0]
					break;
1a0020d4:	e7c0      	b.n	1a002058 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0020d6:	4a0c      	ldr	r2, [pc, #48]	; (1a002108 <xTaskIncrementTick+0x100>)
1a0020d8:	6013      	str	r3, [r2, #0]
						break;
1a0020da:	e7bd      	b.n	1a002058 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0020dc:	4a0e      	ldr	r2, [pc, #56]	; (1a002118 <xTaskIncrementTick+0x110>)
1a0020de:	6813      	ldr	r3, [r2, #0]
1a0020e0:	3301      	adds	r3, #1
1a0020e2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0020e4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0020e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00211c <xTaskIncrementTick+0x114>)
1a0020e8:	681b      	ldr	r3, [r3, #0]
1a0020ea:	b103      	cbz	r3, 1a0020ee <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0020ec:	2401      	movs	r4, #1
}
1a0020ee:	4620      	mov	r0, r4
1a0020f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0020f2:	bf00      	nop
1a0020f4:	10003300 	.word	0x10003300
1a0020f8:	1000337c 	.word	0x1000337c
1a0020fc:	10003260 	.word	0x10003260
1a002100:	10003264 	.word	0x10003264
1a002104:	10003338 	.word	0x10003338
1a002108:	10003334 	.word	0x10003334
1a00210c:	1000325c 	.word	0x1000325c
1a002110:	10003268 	.word	0x10003268
1a002114:	10003308 	.word	0x10003308
1a002118:	100032fc 	.word	0x100032fc
1a00211c:	10003380 	.word	0x10003380

1a002120 <xTaskResumeAll>:
{
1a002120:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002122:	4b35      	ldr	r3, [pc, #212]	; (1a0021f8 <xTaskResumeAll+0xd8>)
1a002124:	681b      	ldr	r3, [r3, #0]
1a002126:	b943      	cbnz	r3, 1a00213a <xTaskResumeAll+0x1a>
1a002128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00212c:	f383 8811 	msr	BASEPRI, r3
1a002130:	f3bf 8f6f 	isb	sy
1a002134:	f3bf 8f4f 	dsb	sy
1a002138:	e7fe      	b.n	1a002138 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00213a:	f000 fd0b 	bl	1a002b54 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00213e:	4b2e      	ldr	r3, [pc, #184]	; (1a0021f8 <xTaskResumeAll+0xd8>)
1a002140:	681a      	ldr	r2, [r3, #0]
1a002142:	3a01      	subs	r2, #1
1a002144:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002146:	681b      	ldr	r3, [r3, #0]
1a002148:	2b00      	cmp	r3, #0
1a00214a:	d14d      	bne.n	1a0021e8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00214c:	4b2b      	ldr	r3, [pc, #172]	; (1a0021fc <xTaskResumeAll+0xdc>)
1a00214e:	681b      	ldr	r3, [r3, #0]
1a002150:	b90b      	cbnz	r3, 1a002156 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a002152:	2400      	movs	r4, #0
1a002154:	e049      	b.n	1a0021ea <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a002156:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002158:	4b29      	ldr	r3, [pc, #164]	; (1a002200 <xTaskResumeAll+0xe0>)
1a00215a:	681b      	ldr	r3, [r3, #0]
1a00215c:	b31b      	cbz	r3, 1a0021a6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00215e:	4b28      	ldr	r3, [pc, #160]	; (1a002200 <xTaskResumeAll+0xe0>)
1a002160:	68db      	ldr	r3, [r3, #12]
1a002162:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002164:	f104 0018 	add.w	r0, r4, #24
1a002168:	f7ff fcb0 	bl	1a001acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00216c:	1d25      	adds	r5, r4, #4
1a00216e:	4628      	mov	r0, r5
1a002170:	f7ff fcac 	bl	1a001acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002176:	2201      	movs	r2, #1
1a002178:	409a      	lsls	r2, r3
1a00217a:	4922      	ldr	r1, [pc, #136]	; (1a002204 <xTaskResumeAll+0xe4>)
1a00217c:	6808      	ldr	r0, [r1, #0]
1a00217e:	4302      	orrs	r2, r0
1a002180:	600a      	str	r2, [r1, #0]
1a002182:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002186:	009a      	lsls	r2, r3, #2
1a002188:	4629      	mov	r1, r5
1a00218a:	481f      	ldr	r0, [pc, #124]	; (1a002208 <xTaskResumeAll+0xe8>)
1a00218c:	4410      	add	r0, r2
1a00218e:	f7ff fc78 	bl	1a001a82 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002192:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002194:	4b1d      	ldr	r3, [pc, #116]	; (1a00220c <xTaskResumeAll+0xec>)
1a002196:	681b      	ldr	r3, [r3, #0]
1a002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00219a:	429a      	cmp	r2, r3
1a00219c:	d3dc      	bcc.n	1a002158 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00219e:	4b1c      	ldr	r3, [pc, #112]	; (1a002210 <xTaskResumeAll+0xf0>)
1a0021a0:	2201      	movs	r2, #1
1a0021a2:	601a      	str	r2, [r3, #0]
1a0021a4:	e7d8      	b.n	1a002158 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a0021a6:	b10c      	cbz	r4, 1a0021ac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a0021a8:	f7ff fce0 	bl	1a001b6c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0021ac:	4b19      	ldr	r3, [pc, #100]	; (1a002214 <xTaskResumeAll+0xf4>)
1a0021ae:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0021b0:	b974      	cbnz	r4, 1a0021d0 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0021b2:	4b17      	ldr	r3, [pc, #92]	; (1a002210 <xTaskResumeAll+0xf0>)
1a0021b4:	681b      	ldr	r3, [r3, #0]
1a0021b6:	b1e3      	cbz	r3, 1a0021f2 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a0021b8:	4b17      	ldr	r3, [pc, #92]	; (1a002218 <xTaskResumeAll+0xf8>)
1a0021ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021be:	601a      	str	r2, [r3, #0]
1a0021c0:	f3bf 8f4f 	dsb	sy
1a0021c4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0021c8:	2401      	movs	r4, #1
1a0021ca:	e00e      	b.n	1a0021ea <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0021cc:	3c01      	subs	r4, #1
1a0021ce:	d007      	beq.n	1a0021e0 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0021d0:	f7ff ff1a 	bl	1a002008 <xTaskIncrementTick>
1a0021d4:	2800      	cmp	r0, #0
1a0021d6:	d0f9      	beq.n	1a0021cc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0021d8:	4b0d      	ldr	r3, [pc, #52]	; (1a002210 <xTaskResumeAll+0xf0>)
1a0021da:	2201      	movs	r2, #1
1a0021dc:	601a      	str	r2, [r3, #0]
1a0021de:	e7f5      	b.n	1a0021cc <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0021e0:	4b0c      	ldr	r3, [pc, #48]	; (1a002214 <xTaskResumeAll+0xf4>)
1a0021e2:	2200      	movs	r2, #0
1a0021e4:	601a      	str	r2, [r3, #0]
1a0021e6:	e7e4      	b.n	1a0021b2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0021e8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0021ea:	f000 fcd5 	bl	1a002b98 <vPortExitCritical>
}
1a0021ee:	4620      	mov	r0, r4
1a0021f0:	bd38      	pop	{r3, r4, r5, pc}
BaseType_t xAlreadyYielded = pdFALSE;
1a0021f2:	2400      	movs	r4, #0
1a0021f4:	e7f9      	b.n	1a0021ea <xTaskResumeAll+0xca>
1a0021f6:	bf00      	nop
1a0021f8:	10003300 	.word	0x10003300
1a0021fc:	100032f4 	.word	0x100032f4
1a002200:	1000333c 	.word	0x1000333c
1a002204:	10003308 	.word	0x10003308
1a002208:	10003268 	.word	0x10003268
1a00220c:	1000325c 	.word	0x1000325c
1a002210:	10003380 	.word	0x10003380
1a002214:	100032fc 	.word	0x100032fc
1a002218:	e000ed04 	.word	0xe000ed04

1a00221c <vTaskDelayUntil>:
	{
1a00221c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a00221e:	b150      	cbz	r0, 1a002236 <vTaskDelayUntil+0x1a>
1a002220:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a002222:	b989      	cbnz	r1, 1a002248 <vTaskDelayUntil+0x2c>
1a002224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002228:	f383 8811 	msr	BASEPRI, r3
1a00222c:	f3bf 8f6f 	isb	sy
1a002230:	f3bf 8f4f 	dsb	sy
1a002234:	e7fe      	b.n	1a002234 <vTaskDelayUntil+0x18>
1a002236:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00223a:	f383 8811 	msr	BASEPRI, r3
1a00223e:	f3bf 8f6f 	isb	sy
1a002242:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
1a002246:	e7fe      	b.n	1a002246 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a002248:	4b1a      	ldr	r3, [pc, #104]	; (1a0022b4 <vTaskDelayUntil+0x98>)
1a00224a:	681b      	ldr	r3, [r3, #0]
1a00224c:	b143      	cbz	r3, 1a002260 <vTaskDelayUntil+0x44>
1a00224e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002252:	f383 8811 	msr	BASEPRI, r3
1a002256:	f3bf 8f6f 	isb	sy
1a00225a:	f3bf 8f4f 	dsb	sy
1a00225e:	e7fe      	b.n	1a00225e <vTaskDelayUntil+0x42>
1a002260:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a002262:	f7ff fec3 	bl	1a001fec <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a002266:	4b14      	ldr	r3, [pc, #80]	; (1a0022b8 <vTaskDelayUntil+0x9c>)
1a002268:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00226a:	682a      	ldr	r2, [r5, #0]
1a00226c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00226e:	4282      	cmp	r2, r0
1a002270:	d909      	bls.n	1a002286 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002272:	42a2      	cmp	r2, r4
1a002274:	d801      	bhi.n	1a00227a <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
1a002276:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a002278:	e00e      	b.n	1a002298 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00227a:	42a0      	cmp	r0, r4
1a00227c:	d301      	bcc.n	1a002282 <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
1a00227e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a002280:	e00a      	b.n	1a002298 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a002282:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a002284:	e004      	b.n	1a002290 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002286:	42a2      	cmp	r2, r4
1a002288:	d801      	bhi.n	1a00228e <vTaskDelayUntil+0x72>
1a00228a:	42a0      	cmp	r0, r4
1a00228c:	d210      	bcs.n	1a0022b0 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a00228e:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a002290:	2100      	movs	r1, #0
1a002292:	1a20      	subs	r0, r4, r0
1a002294:	f7ff fda8 	bl	1a001de8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
1a002298:	f7ff ff42 	bl	1a002120 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00229c:	b938      	cbnz	r0, 1a0022ae <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
1a00229e:	4b07      	ldr	r3, [pc, #28]	; (1a0022bc <vTaskDelayUntil+0xa0>)
1a0022a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0022a4:	601a      	str	r2, [r3, #0]
1a0022a6:	f3bf 8f4f 	dsb	sy
1a0022aa:	f3bf 8f6f 	isb	sy
	}
1a0022ae:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
1a0022b0:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
1a0022b2:	e7f1      	b.n	1a002298 <vTaskDelayUntil+0x7c>
1a0022b4:	10003300 	.word	0x10003300
1a0022b8:	1000337c 	.word	0x1000337c
1a0022bc:	e000ed04 	.word	0xe000ed04

1a0022c0 <vTaskDelay>:
	{
1a0022c0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0022c2:	b1a8      	cbz	r0, 1a0022f0 <vTaskDelay+0x30>
1a0022c4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0022c6:	4b0f      	ldr	r3, [pc, #60]	; (1a002304 <vTaskDelay+0x44>)
1a0022c8:	681b      	ldr	r3, [r3, #0]
1a0022ca:	b143      	cbz	r3, 1a0022de <vTaskDelay+0x1e>
1a0022cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022d0:	f383 8811 	msr	BASEPRI, r3
1a0022d4:	f3bf 8f6f 	isb	sy
1a0022d8:	f3bf 8f4f 	dsb	sy
1a0022dc:	e7fe      	b.n	1a0022dc <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0022de:	f7ff fe85 	bl	1a001fec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0022e2:	2100      	movs	r1, #0
1a0022e4:	4620      	mov	r0, r4
1a0022e6:	f7ff fd7f 	bl	1a001de8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0022ea:	f7ff ff19 	bl	1a002120 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0022ee:	b938      	cbnz	r0, 1a002300 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0022f0:	4b05      	ldr	r3, [pc, #20]	; (1a002308 <vTaskDelay+0x48>)
1a0022f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0022f6:	601a      	str	r2, [r3, #0]
1a0022f8:	f3bf 8f4f 	dsb	sy
1a0022fc:	f3bf 8f6f 	isb	sy
	}
1a002300:	bd10      	pop	{r4, pc}
1a002302:	bf00      	nop
1a002304:	10003300 	.word	0x10003300
1a002308:	e000ed04 	.word	0xe000ed04

1a00230c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00230c:	4b2d      	ldr	r3, [pc, #180]	; (1a0023c4 <vTaskSwitchContext+0xb8>)
1a00230e:	681b      	ldr	r3, [r3, #0]
1a002310:	b11b      	cbz	r3, 1a00231a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002312:	4b2d      	ldr	r3, [pc, #180]	; (1a0023c8 <vTaskSwitchContext+0xbc>)
1a002314:	2201      	movs	r2, #1
1a002316:	601a      	str	r2, [r3, #0]
1a002318:	4770      	bx	lr
{
1a00231a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00231c:	4b2a      	ldr	r3, [pc, #168]	; (1a0023c8 <vTaskSwitchContext+0xbc>)
1a00231e:	2200      	movs	r2, #0
1a002320:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002322:	4b2a      	ldr	r3, [pc, #168]	; (1a0023cc <vTaskSwitchContext+0xc0>)
1a002324:	681b      	ldr	r3, [r3, #0]
1a002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002328:	681a      	ldr	r2, [r3, #0]
1a00232a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00232e:	d103      	bne.n	1a002338 <vTaskSwitchContext+0x2c>
1a002330:	685a      	ldr	r2, [r3, #4]
1a002332:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002336:	d01b      	beq.n	1a002370 <vTaskSwitchContext+0x64>
1a002338:	4b24      	ldr	r3, [pc, #144]	; (1a0023cc <vTaskSwitchContext+0xc0>)
1a00233a:	6818      	ldr	r0, [r3, #0]
1a00233c:	6819      	ldr	r1, [r3, #0]
1a00233e:	3134      	adds	r1, #52	; 0x34
1a002340:	f7ff fc06 	bl	1a001b50 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002344:	4b22      	ldr	r3, [pc, #136]	; (1a0023d0 <vTaskSwitchContext+0xc4>)
1a002346:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a002348:	fab3 f383 	clz	r3, r3
1a00234c:	b2db      	uxtb	r3, r3
1a00234e:	f1c3 031f 	rsb	r3, r3, #31
1a002352:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002356:	008a      	lsls	r2, r1, #2
1a002358:	491e      	ldr	r1, [pc, #120]	; (1a0023d4 <vTaskSwitchContext+0xc8>)
1a00235a:	588a      	ldr	r2, [r1, r2]
1a00235c:	b98a      	cbnz	r2, 1a002382 <vTaskSwitchContext+0x76>
	__asm volatile
1a00235e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002362:	f383 8811 	msr	BASEPRI, r3
1a002366:	f3bf 8f6f 	isb	sy
1a00236a:	f3bf 8f4f 	dsb	sy
1a00236e:	e7fe      	b.n	1a00236e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002370:	689a      	ldr	r2, [r3, #8]
1a002372:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002376:	d1df      	bne.n	1a002338 <vTaskSwitchContext+0x2c>
1a002378:	68db      	ldr	r3, [r3, #12]
1a00237a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00237e:	d1db      	bne.n	1a002338 <vTaskSwitchContext+0x2c>
1a002380:	e7e0      	b.n	1a002344 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002382:	4814      	ldr	r0, [pc, #80]	; (1a0023d4 <vTaskSwitchContext+0xc8>)
1a002384:	009a      	lsls	r2, r3, #2
1a002386:	18d4      	adds	r4, r2, r3
1a002388:	00a1      	lsls	r1, r4, #2
1a00238a:	4401      	add	r1, r0
1a00238c:	684c      	ldr	r4, [r1, #4]
1a00238e:	6864      	ldr	r4, [r4, #4]
1a002390:	604c      	str	r4, [r1, #4]
1a002392:	441a      	add	r2, r3
1a002394:	0091      	lsls	r1, r2, #2
1a002396:	3108      	adds	r1, #8
1a002398:	4408      	add	r0, r1
1a00239a:	4284      	cmp	r4, r0
1a00239c:	d009      	beq.n	1a0023b2 <vTaskSwitchContext+0xa6>
1a00239e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0023a2:	009a      	lsls	r2, r3, #2
1a0023a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0023d4 <vTaskSwitchContext+0xc8>)
1a0023a6:	4413      	add	r3, r2
1a0023a8:	685b      	ldr	r3, [r3, #4]
1a0023aa:	68da      	ldr	r2, [r3, #12]
1a0023ac:	4b07      	ldr	r3, [pc, #28]	; (1a0023cc <vTaskSwitchContext+0xc0>)
1a0023ae:	601a      	str	r2, [r3, #0]
}
1a0023b0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0023b2:	6860      	ldr	r0, [r4, #4]
1a0023b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a0023b8:	0091      	lsls	r1, r2, #2
1a0023ba:	4a06      	ldr	r2, [pc, #24]	; (1a0023d4 <vTaskSwitchContext+0xc8>)
1a0023bc:	440a      	add	r2, r1
1a0023be:	6050      	str	r0, [r2, #4]
1a0023c0:	e7ed      	b.n	1a00239e <vTaskSwitchContext+0x92>
1a0023c2:	bf00      	nop
1a0023c4:	10003300 	.word	0x10003300
1a0023c8:	10003380 	.word	0x10003380
1a0023cc:	1000325c 	.word	0x1000325c
1a0023d0:	10003308 	.word	0x10003308
1a0023d4:	10003268 	.word	0x10003268

1a0023d8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0023d8:	b158      	cbz	r0, 1a0023f2 <vTaskPlaceOnEventList+0x1a>
{
1a0023da:	b510      	push	{r4, lr}
1a0023dc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0023de:	4b09      	ldr	r3, [pc, #36]	; (1a002404 <vTaskPlaceOnEventList+0x2c>)
1a0023e0:	6819      	ldr	r1, [r3, #0]
1a0023e2:	3118      	adds	r1, #24
1a0023e4:	f7ff fb58 	bl	1a001a98 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0023e8:	2101      	movs	r1, #1
1a0023ea:	4620      	mov	r0, r4
1a0023ec:	f7ff fcfc 	bl	1a001de8 <prvAddCurrentTaskToDelayedList>
}
1a0023f0:	bd10      	pop	{r4, pc}
1a0023f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023f6:	f383 8811 	msr	BASEPRI, r3
1a0023fa:	f3bf 8f6f 	isb	sy
1a0023fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a002402:	e7fe      	b.n	1a002402 <vTaskPlaceOnEventList+0x2a>
1a002404:	1000325c 	.word	0x1000325c

1a002408 <vTaskPlaceOnEventListRestricted>:
	{
1a002408:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00240a:	b170      	cbz	r0, 1a00242a <vTaskPlaceOnEventListRestricted+0x22>
1a00240c:	460c      	mov	r4, r1
1a00240e:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a002410:	4a0a      	ldr	r2, [pc, #40]	; (1a00243c <vTaskPlaceOnEventListRestricted+0x34>)
1a002412:	6811      	ldr	r1, [r2, #0]
1a002414:	3118      	adds	r1, #24
1a002416:	f7ff fb34 	bl	1a001a82 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00241a:	b10d      	cbz	r5, 1a002420 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a00241c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a002420:	4629      	mov	r1, r5
1a002422:	4620      	mov	r0, r4
1a002424:	f7ff fce0 	bl	1a001de8 <prvAddCurrentTaskToDelayedList>
	}
1a002428:	bd38      	pop	{r3, r4, r5, pc}
1a00242a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00242e:	f383 8811 	msr	BASEPRI, r3
1a002432:	f3bf 8f6f 	isb	sy
1a002436:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a00243a:	e7fe      	b.n	1a00243a <vTaskPlaceOnEventListRestricted+0x32>
1a00243c:	1000325c 	.word	0x1000325c

1a002440 <xTaskRemoveFromEventList>:
{
1a002440:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a002442:	68c3      	ldr	r3, [r0, #12]
1a002444:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002446:	b324      	cbz	r4, 1a002492 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002448:	f104 0518 	add.w	r5, r4, #24
1a00244c:	4628      	mov	r0, r5
1a00244e:	f7ff fb3d 	bl	1a001acc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002452:	4b18      	ldr	r3, [pc, #96]	; (1a0024b4 <xTaskRemoveFromEventList+0x74>)
1a002454:	681b      	ldr	r3, [r3, #0]
1a002456:	bb2b      	cbnz	r3, 1a0024a4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002458:	1d25      	adds	r5, r4, #4
1a00245a:	4628      	mov	r0, r5
1a00245c:	f7ff fb36 	bl	1a001acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a002460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002462:	2201      	movs	r2, #1
1a002464:	409a      	lsls	r2, r3
1a002466:	4914      	ldr	r1, [pc, #80]	; (1a0024b8 <xTaskRemoveFromEventList+0x78>)
1a002468:	6808      	ldr	r0, [r1, #0]
1a00246a:	4302      	orrs	r2, r0
1a00246c:	600a      	str	r2, [r1, #0]
1a00246e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002472:	009a      	lsls	r2, r3, #2
1a002474:	4629      	mov	r1, r5
1a002476:	4811      	ldr	r0, [pc, #68]	; (1a0024bc <xTaskRemoveFromEventList+0x7c>)
1a002478:	4410      	add	r0, r2
1a00247a:	f7ff fb02 	bl	1a001a82 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00247e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002480:	4b0f      	ldr	r3, [pc, #60]	; (1a0024c0 <xTaskRemoveFromEventList+0x80>)
1a002482:	681b      	ldr	r3, [r3, #0]
1a002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002486:	429a      	cmp	r2, r3
1a002488:	d911      	bls.n	1a0024ae <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a00248a:	2001      	movs	r0, #1
1a00248c:	4b0d      	ldr	r3, [pc, #52]	; (1a0024c4 <xTaskRemoveFromEventList+0x84>)
1a00248e:	6018      	str	r0, [r3, #0]
1a002490:	e00e      	b.n	1a0024b0 <xTaskRemoveFromEventList+0x70>
1a002492:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002496:	f383 8811 	msr	BASEPRI, r3
1a00249a:	f3bf 8f6f 	isb	sy
1a00249e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0024a2:	e7fe      	b.n	1a0024a2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0024a4:	4629      	mov	r1, r5
1a0024a6:	4808      	ldr	r0, [pc, #32]	; (1a0024c8 <xTaskRemoveFromEventList+0x88>)
1a0024a8:	f7ff faeb 	bl	1a001a82 <vListInsertEnd>
1a0024ac:	e7e7      	b.n	1a00247e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a0024ae:	2000      	movs	r0, #0
}
1a0024b0:	bd38      	pop	{r3, r4, r5, pc}
1a0024b2:	bf00      	nop
1a0024b4:	10003300 	.word	0x10003300
1a0024b8:	10003308 	.word	0x10003308
1a0024bc:	10003268 	.word	0x10003268
1a0024c0:	1000325c 	.word	0x1000325c
1a0024c4:	10003380 	.word	0x10003380
1a0024c8:	1000333c 	.word	0x1000333c

1a0024cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0024cc:	4b03      	ldr	r3, [pc, #12]	; (1a0024dc <vTaskInternalSetTimeOutState+0x10>)
1a0024ce:	681b      	ldr	r3, [r3, #0]
1a0024d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0024d2:	4b03      	ldr	r3, [pc, #12]	; (1a0024e0 <vTaskInternalSetTimeOutState+0x14>)
1a0024d4:	681b      	ldr	r3, [r3, #0]
1a0024d6:	6043      	str	r3, [r0, #4]
}
1a0024d8:	4770      	bx	lr
1a0024da:	bf00      	nop
1a0024dc:	10003338 	.word	0x10003338
1a0024e0:	1000337c 	.word	0x1000337c

1a0024e4 <xTaskCheckForTimeOut>:
{
1a0024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0024e6:	b1c8      	cbz	r0, 1a00251c <xTaskCheckForTimeOut+0x38>
1a0024e8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0024ea:	b301      	cbz	r1, 1a00252e <xTaskCheckForTimeOut+0x4a>
1a0024ec:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0024ee:	f000 fb31 	bl	1a002b54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0024f2:	4b1b      	ldr	r3, [pc, #108]	; (1a002560 <xTaskCheckForTimeOut+0x7c>)
1a0024f4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0024f6:	686b      	ldr	r3, [r5, #4]
1a0024f8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a0024fa:	6822      	ldr	r2, [r4, #0]
1a0024fc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a002500:	d026      	beq.n	1a002550 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002502:	682f      	ldr	r7, [r5, #0]
1a002504:	4e17      	ldr	r6, [pc, #92]	; (1a002564 <xTaskCheckForTimeOut+0x80>)
1a002506:	6836      	ldr	r6, [r6, #0]
1a002508:	42b7      	cmp	r7, r6
1a00250a:	d001      	beq.n	1a002510 <xTaskCheckForTimeOut+0x2c>
1a00250c:	428b      	cmp	r3, r1
1a00250e:	d924      	bls.n	1a00255a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002510:	4282      	cmp	r2, r0
1a002512:	d815      	bhi.n	1a002540 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002514:	2300      	movs	r3, #0
1a002516:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002518:	2401      	movs	r4, #1
1a00251a:	e01a      	b.n	1a002552 <xTaskCheckForTimeOut+0x6e>
1a00251c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002520:	f383 8811 	msr	BASEPRI, r3
1a002524:	f3bf 8f6f 	isb	sy
1a002528:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a00252c:	e7fe      	b.n	1a00252c <xTaskCheckForTimeOut+0x48>
1a00252e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002532:	f383 8811 	msr	BASEPRI, r3
1a002536:	f3bf 8f6f 	isb	sy
1a00253a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a00253e:	e7fe      	b.n	1a00253e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a002540:	1a5b      	subs	r3, r3, r1
1a002542:	4413      	add	r3, r2
1a002544:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002546:	4628      	mov	r0, r5
1a002548:	f7ff ffc0 	bl	1a0024cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00254c:	2400      	movs	r4, #0
1a00254e:	e000      	b.n	1a002552 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a002550:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002552:	f000 fb21 	bl	1a002b98 <vPortExitCritical>
}
1a002556:	4620      	mov	r0, r4
1a002558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a00255a:	2401      	movs	r4, #1
1a00255c:	e7f9      	b.n	1a002552 <xTaskCheckForTimeOut+0x6e>
1a00255e:	bf00      	nop
1a002560:	1000337c 	.word	0x1000337c
1a002564:	10003338 	.word	0x10003338

1a002568 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002568:	4b01      	ldr	r3, [pc, #4]	; (1a002570 <vTaskMissedYield+0x8>)
1a00256a:	2201      	movs	r2, #1
1a00256c:	601a      	str	r2, [r3, #0]
}
1a00256e:	4770      	bx	lr
1a002570:	10003380 	.word	0x10003380

1a002574 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002574:	4b05      	ldr	r3, [pc, #20]	; (1a00258c <xTaskGetSchedulerState+0x18>)
1a002576:	681b      	ldr	r3, [r3, #0]
1a002578:	b133      	cbz	r3, 1a002588 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00257a:	4b05      	ldr	r3, [pc, #20]	; (1a002590 <xTaskGetSchedulerState+0x1c>)
1a00257c:	681b      	ldr	r3, [r3, #0]
1a00257e:	b10b      	cbz	r3, 1a002584 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002580:	2000      	movs	r0, #0
	}
1a002582:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002584:	2002      	movs	r0, #2
1a002586:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002588:	2001      	movs	r0, #1
1a00258a:	4770      	bx	lr
1a00258c:	10003350 	.word	0x10003350
1a002590:	10003300 	.word	0x10003300

1a002594 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002594:	2800      	cmp	r0, #0
1a002596:	d04c      	beq.n	1a002632 <xTaskPriorityDisinherit+0x9e>
	{
1a002598:	b538      	push	{r3, r4, r5, lr}
1a00259a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00259c:	4a27      	ldr	r2, [pc, #156]	; (1a00263c <xTaskPriorityDisinherit+0xa8>)
1a00259e:	6812      	ldr	r2, [r2, #0]
1a0025a0:	4282      	cmp	r2, r0
1a0025a2:	d008      	beq.n	1a0025b6 <xTaskPriorityDisinherit+0x22>
1a0025a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025a8:	f383 8811 	msr	BASEPRI, r3
1a0025ac:	f3bf 8f6f 	isb	sy
1a0025b0:	f3bf 8f4f 	dsb	sy
1a0025b4:	e7fe      	b.n	1a0025b4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0025b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0025b8:	b942      	cbnz	r2, 1a0025cc <xTaskPriorityDisinherit+0x38>
1a0025ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025be:	f383 8811 	msr	BASEPRI, r3
1a0025c2:	f3bf 8f6f 	isb	sy
1a0025c6:	f3bf 8f4f 	dsb	sy
1a0025ca:	e7fe      	b.n	1a0025ca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0025cc:	3a01      	subs	r2, #1
1a0025ce:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0025d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0025d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0025d4:	4288      	cmp	r0, r1
1a0025d6:	d02e      	beq.n	1a002636 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0025d8:	b10a      	cbz	r2, 1a0025de <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a0025da:	2000      	movs	r0, #0
	}
1a0025dc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0025de:	1d25      	adds	r5, r4, #4
1a0025e0:	4628      	mov	r0, r5
1a0025e2:	f7ff fa73 	bl	1a001acc <uxListRemove>
1a0025e6:	b970      	cbnz	r0, 1a002606 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0025e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0025ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0025ee:	008b      	lsls	r3, r1, #2
1a0025f0:	4913      	ldr	r1, [pc, #76]	; (1a002640 <xTaskPriorityDisinherit+0xac>)
1a0025f2:	58cb      	ldr	r3, [r1, r3]
1a0025f4:	b93b      	cbnz	r3, 1a002606 <xTaskPriorityDisinherit+0x72>
1a0025f6:	2301      	movs	r3, #1
1a0025f8:	fa03 f202 	lsl.w	r2, r3, r2
1a0025fc:	4911      	ldr	r1, [pc, #68]	; (1a002644 <xTaskPriorityDisinherit+0xb0>)
1a0025fe:	680b      	ldr	r3, [r1, #0]
1a002600:	ea23 0302 	bic.w	r3, r3, r2
1a002604:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002606:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002608:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00260a:	f1c3 0207 	rsb	r2, r3, #7
1a00260e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002610:	2401      	movs	r4, #1
1a002612:	fa04 f203 	lsl.w	r2, r4, r3
1a002616:	490b      	ldr	r1, [pc, #44]	; (1a002644 <xTaskPriorityDisinherit+0xb0>)
1a002618:	6808      	ldr	r0, [r1, #0]
1a00261a:	4302      	orrs	r2, r0
1a00261c:	600a      	str	r2, [r1, #0]
1a00261e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002622:	009a      	lsls	r2, r3, #2
1a002624:	4629      	mov	r1, r5
1a002626:	4806      	ldr	r0, [pc, #24]	; (1a002640 <xTaskPriorityDisinherit+0xac>)
1a002628:	4410      	add	r0, r2
1a00262a:	f7ff fa2a 	bl	1a001a82 <vListInsertEnd>
					xReturn = pdTRUE;
1a00262e:	4620      	mov	r0, r4
1a002630:	e7d4      	b.n	1a0025dc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a002632:	2000      	movs	r0, #0
	}
1a002634:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002636:	2000      	movs	r0, #0
1a002638:	e7d0      	b.n	1a0025dc <xTaskPriorityDisinherit+0x48>
1a00263a:	bf00      	nop
1a00263c:	1000325c 	.word	0x1000325c
1a002640:	10003268 	.word	0x10003268
1a002644:	10003308 	.word	0x10003308

1a002648 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002648:	4b06      	ldr	r3, [pc, #24]	; (1a002664 <prvGetNextExpireTime+0x1c>)
1a00264a:	681a      	ldr	r2, [r3, #0]
1a00264c:	6813      	ldr	r3, [r2, #0]
1a00264e:	fab3 f383 	clz	r3, r3
1a002652:	095b      	lsrs	r3, r3, #5
1a002654:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002656:	b913      	cbnz	r3, 1a00265e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002658:	68d3      	ldr	r3, [r2, #12]
1a00265a:	6818      	ldr	r0, [r3, #0]
1a00265c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00265e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002660:	4770      	bx	lr
1a002662:	bf00      	nop
1a002664:	10003384 	.word	0x10003384

1a002668 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002668:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00266a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00266c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00266e:	4291      	cmp	r1, r2
1a002670:	d80c      	bhi.n	1a00268c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002672:	1ad2      	subs	r2, r2, r3
1a002674:	6983      	ldr	r3, [r0, #24]
1a002676:	429a      	cmp	r2, r3
1a002678:	d301      	bcc.n	1a00267e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00267a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a00267c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00267e:	1d01      	adds	r1, r0, #4
1a002680:	4b09      	ldr	r3, [pc, #36]	; (1a0026a8 <prvInsertTimerInActiveList+0x40>)
1a002682:	6818      	ldr	r0, [r3, #0]
1a002684:	f7ff fa08 	bl	1a001a98 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002688:	2000      	movs	r0, #0
1a00268a:	e7f7      	b.n	1a00267c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00268c:	429a      	cmp	r2, r3
1a00268e:	d201      	bcs.n	1a002694 <prvInsertTimerInActiveList+0x2c>
1a002690:	4299      	cmp	r1, r3
1a002692:	d206      	bcs.n	1a0026a2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002694:	1d01      	adds	r1, r0, #4
1a002696:	4b05      	ldr	r3, [pc, #20]	; (1a0026ac <prvInsertTimerInActiveList+0x44>)
1a002698:	6818      	ldr	r0, [r3, #0]
1a00269a:	f7ff f9fd 	bl	1a001a98 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00269e:	2000      	movs	r0, #0
1a0026a0:	e7ec      	b.n	1a00267c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a0026a2:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0026a4:	e7ea      	b.n	1a00267c <prvInsertTimerInActiveList+0x14>
1a0026a6:	bf00      	nop
1a0026a8:	10003388 	.word	0x10003388
1a0026ac:	10003384 	.word	0x10003384

1a0026b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0026b0:	b530      	push	{r4, r5, lr}
1a0026b2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0026b4:	f000 fa4e 	bl	1a002b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0026b8:	4b11      	ldr	r3, [pc, #68]	; (1a002700 <prvCheckForValidListAndQueue+0x50>)
1a0026ba:	681b      	ldr	r3, [r3, #0]
1a0026bc:	b11b      	cbz	r3, 1a0026c6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0026be:	f000 fa6b 	bl	1a002b98 <vPortExitCritical>
}
1a0026c2:	b003      	add	sp, #12
1a0026c4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0026c6:	4d0f      	ldr	r5, [pc, #60]	; (1a002704 <prvCheckForValidListAndQueue+0x54>)
1a0026c8:	4628      	mov	r0, r5
1a0026ca:	f7ff f9cc 	bl	1a001a66 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0026ce:	4c0e      	ldr	r4, [pc, #56]	; (1a002708 <prvCheckForValidListAndQueue+0x58>)
1a0026d0:	4620      	mov	r0, r4
1a0026d2:	f7ff f9c8 	bl	1a001a66 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0026d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00270c <prvCheckForValidListAndQueue+0x5c>)
1a0026d8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0026da:	4b0d      	ldr	r3, [pc, #52]	; (1a002710 <prvCheckForValidListAndQueue+0x60>)
1a0026dc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0026de:	2300      	movs	r3, #0
1a0026e0:	9300      	str	r3, [sp, #0]
1a0026e2:	4b0c      	ldr	r3, [pc, #48]	; (1a002714 <prvCheckForValidListAndQueue+0x64>)
1a0026e4:	4a0c      	ldr	r2, [pc, #48]	; (1a002718 <prvCheckForValidListAndQueue+0x68>)
1a0026e6:	2110      	movs	r1, #16
1a0026e8:	200a      	movs	r0, #10
1a0026ea:	f7fe ff60 	bl	1a0015ae <xQueueGenericCreateStatic>
1a0026ee:	4b04      	ldr	r3, [pc, #16]	; (1a002700 <prvCheckForValidListAndQueue+0x50>)
1a0026f0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0026f2:	2800      	cmp	r0, #0
1a0026f4:	d0e3      	beq.n	1a0026be <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0026f6:	4909      	ldr	r1, [pc, #36]	; (1a00271c <prvCheckForValidListAndQueue+0x6c>)
1a0026f8:	f7ff f978 	bl	1a0019ec <vQueueAddToRegistry>
1a0026fc:	e7df      	b.n	1a0026be <prvCheckForValidListAndQueue+0xe>
1a0026fe:	bf00      	nop
1a002700:	100034a8 	.word	0x100034a8
1a002704:	1000342c 	.word	0x1000342c
1a002708:	10003440 	.word	0x10003440
1a00270c:	10003384 	.word	0x10003384
1a002710:	10003388 	.word	0x10003388
1a002714:	10003458 	.word	0x10003458
1a002718:	1000338c 	.word	0x1000338c
1a00271c:	1a00bd24 	.word	0x1a00bd24

1a002720 <xTimerCreateTimerTask>:
{
1a002720:	b510      	push	{r4, lr}
1a002722:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002724:	f7ff ffc4 	bl	1a0026b0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002728:	4b12      	ldr	r3, [pc, #72]	; (1a002774 <xTimerCreateTimerTask+0x54>)
1a00272a:	681b      	ldr	r3, [r3, #0]
1a00272c:	b1cb      	cbz	r3, 1a002762 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00272e:	2400      	movs	r4, #0
1a002730:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002732:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002734:	aa07      	add	r2, sp, #28
1a002736:	a906      	add	r1, sp, #24
1a002738:	a805      	add	r0, sp, #20
1a00273a:	f7ff f9e7 	bl	1a001b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00273e:	9b05      	ldr	r3, [sp, #20]
1a002740:	9302      	str	r3, [sp, #8]
1a002742:	9b06      	ldr	r3, [sp, #24]
1a002744:	9301      	str	r3, [sp, #4]
1a002746:	2304      	movs	r3, #4
1a002748:	9300      	str	r3, [sp, #0]
1a00274a:	4623      	mov	r3, r4
1a00274c:	9a07      	ldr	r2, [sp, #28]
1a00274e:	490a      	ldr	r1, [pc, #40]	; (1a002778 <xTimerCreateTimerTask+0x58>)
1a002750:	480a      	ldr	r0, [pc, #40]	; (1a00277c <xTimerCreateTimerTask+0x5c>)
1a002752:	f7ff fb95 	bl	1a001e80 <xTaskCreateStatic>
1a002756:	4b0a      	ldr	r3, [pc, #40]	; (1a002780 <xTimerCreateTimerTask+0x60>)
1a002758:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00275a:	b110      	cbz	r0, 1a002762 <xTimerCreateTimerTask+0x42>
}
1a00275c:	2001      	movs	r0, #1
1a00275e:	b008      	add	sp, #32
1a002760:	bd10      	pop	{r4, pc}
1a002762:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002766:	f383 8811 	msr	BASEPRI, r3
1a00276a:	f3bf 8f6f 	isb	sy
1a00276e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a002772:	e7fe      	b.n	1a002772 <xTimerCreateTimerTask+0x52>
1a002774:	100034a8 	.word	0x100034a8
1a002778:	1a00bd2c 	.word	0x1a00bd2c
1a00277c:	1a002a65 	.word	0x1a002a65
1a002780:	100034ac 	.word	0x100034ac

1a002784 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002784:	b1c0      	cbz	r0, 1a0027b8 <xTimerGenericCommand+0x34>
{
1a002786:	b530      	push	{r4, r5, lr}
1a002788:	b085      	sub	sp, #20
1a00278a:	4615      	mov	r5, r2
1a00278c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00278e:	4a17      	ldr	r2, [pc, #92]	; (1a0027ec <xTimerGenericCommand+0x68>)
1a002790:	6810      	ldr	r0, [r2, #0]
1a002792:	b340      	cbz	r0, 1a0027e6 <xTimerGenericCommand+0x62>
1a002794:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002796:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002798:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00279a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00279c:	2905      	cmp	r1, #5
1a00279e:	dc1c      	bgt.n	1a0027da <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0027a0:	f7ff fee8 	bl	1a002574 <xTaskGetSchedulerState>
1a0027a4:	2802      	cmp	r0, #2
1a0027a6:	d010      	beq.n	1a0027ca <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0027a8:	2300      	movs	r3, #0
1a0027aa:	461a      	mov	r2, r3
1a0027ac:	4669      	mov	r1, sp
1a0027ae:	480f      	ldr	r0, [pc, #60]	; (1a0027ec <xTimerGenericCommand+0x68>)
1a0027b0:	6800      	ldr	r0, [r0, #0]
1a0027b2:	f7fe ff45 	bl	1a001640 <xQueueGenericSend>
1a0027b6:	e014      	b.n	1a0027e2 <xTimerGenericCommand+0x5e>
1a0027b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027bc:	f383 8811 	msr	BASEPRI, r3
1a0027c0:	f3bf 8f6f 	isb	sy
1a0027c4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a0027c8:	e7fe      	b.n	1a0027c8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0027ca:	2300      	movs	r3, #0
1a0027cc:	9a08      	ldr	r2, [sp, #32]
1a0027ce:	4669      	mov	r1, sp
1a0027d0:	4806      	ldr	r0, [pc, #24]	; (1a0027ec <xTimerGenericCommand+0x68>)
1a0027d2:	6800      	ldr	r0, [r0, #0]
1a0027d4:	f7fe ff34 	bl	1a001640 <xQueueGenericSend>
1a0027d8:	e003      	b.n	1a0027e2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0027da:	2300      	movs	r3, #0
1a0027dc:	4669      	mov	r1, sp
1a0027de:	f7fe ffef 	bl	1a0017c0 <xQueueGenericSendFromISR>
}
1a0027e2:	b005      	add	sp, #20
1a0027e4:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a0027e6:	2000      	movs	r0, #0
	return xReturn;
1a0027e8:	e7fb      	b.n	1a0027e2 <xTimerGenericCommand+0x5e>
1a0027ea:	bf00      	nop
1a0027ec:	100034a8 	.word	0x100034a8

1a0027f0 <prvSwitchTimerLists>:
{
1a0027f0:	b570      	push	{r4, r5, r6, lr}
1a0027f2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0027f4:	4b1a      	ldr	r3, [pc, #104]	; (1a002860 <prvSwitchTimerLists+0x70>)
1a0027f6:	681b      	ldr	r3, [r3, #0]
1a0027f8:	681a      	ldr	r2, [r3, #0]
1a0027fa:	b352      	cbz	r2, 1a002852 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0027fc:	68db      	ldr	r3, [r3, #12]
1a0027fe:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002800:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002802:	1d25      	adds	r5, r4, #4
1a002804:	4628      	mov	r0, r5
1a002806:	f7ff f961 	bl	1a001acc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00280a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00280c:	4620      	mov	r0, r4
1a00280e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002810:	69e3      	ldr	r3, [r4, #28]
1a002812:	2b01      	cmp	r3, #1
1a002814:	d1ee      	bne.n	1a0027f4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002816:	69a3      	ldr	r3, [r4, #24]
1a002818:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00281a:	429e      	cmp	r6, r3
1a00281c:	d207      	bcs.n	1a00282e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00281e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002820:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002822:	4629      	mov	r1, r5
1a002824:	4b0e      	ldr	r3, [pc, #56]	; (1a002860 <prvSwitchTimerLists+0x70>)
1a002826:	6818      	ldr	r0, [r3, #0]
1a002828:	f7ff f936 	bl	1a001a98 <vListInsert>
1a00282c:	e7e2      	b.n	1a0027f4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00282e:	2100      	movs	r1, #0
1a002830:	9100      	str	r1, [sp, #0]
1a002832:	460b      	mov	r3, r1
1a002834:	4632      	mov	r2, r6
1a002836:	4620      	mov	r0, r4
1a002838:	f7ff ffa4 	bl	1a002784 <xTimerGenericCommand>
				configASSERT( xResult );
1a00283c:	2800      	cmp	r0, #0
1a00283e:	d1d9      	bne.n	1a0027f4 <prvSwitchTimerLists+0x4>
1a002840:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002844:	f383 8811 	msr	BASEPRI, r3
1a002848:	f3bf 8f6f 	isb	sy
1a00284c:	f3bf 8f4f 	dsb	sy
1a002850:	e7fe      	b.n	1a002850 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002852:	4a04      	ldr	r2, [pc, #16]	; (1a002864 <prvSwitchTimerLists+0x74>)
1a002854:	6810      	ldr	r0, [r2, #0]
1a002856:	4902      	ldr	r1, [pc, #8]	; (1a002860 <prvSwitchTimerLists+0x70>)
1a002858:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00285a:	6013      	str	r3, [r2, #0]
}
1a00285c:	b002      	add	sp, #8
1a00285e:	bd70      	pop	{r4, r5, r6, pc}
1a002860:	10003384 	.word	0x10003384
1a002864:	10003388 	.word	0x10003388

1a002868 <prvSampleTimeNow>:
{
1a002868:	b538      	push	{r3, r4, r5, lr}
1a00286a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00286c:	f7ff fbc6 	bl	1a001ffc <xTaskGetTickCount>
1a002870:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002872:	4b07      	ldr	r3, [pc, #28]	; (1a002890 <prvSampleTimeNow+0x28>)
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	4283      	cmp	r3, r0
1a002878:	d805      	bhi.n	1a002886 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00287a:	2300      	movs	r3, #0
1a00287c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00287e:	4b04      	ldr	r3, [pc, #16]	; (1a002890 <prvSampleTimeNow+0x28>)
1a002880:	601c      	str	r4, [r3, #0]
}
1a002882:	4620      	mov	r0, r4
1a002884:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002886:	f7ff ffb3 	bl	1a0027f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00288a:	2301      	movs	r3, #1
1a00288c:	602b      	str	r3, [r5, #0]
1a00288e:	e7f6      	b.n	1a00287e <prvSampleTimeNow+0x16>
1a002890:	10003454 	.word	0x10003454

1a002894 <prvProcessExpiredTimer>:
{
1a002894:	b570      	push	{r4, r5, r6, lr}
1a002896:	b082      	sub	sp, #8
1a002898:	4605      	mov	r5, r0
1a00289a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00289c:	4b14      	ldr	r3, [pc, #80]	; (1a0028f0 <prvProcessExpiredTimer+0x5c>)
1a00289e:	681b      	ldr	r3, [r3, #0]
1a0028a0:	68db      	ldr	r3, [r3, #12]
1a0028a2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0028a4:	1d20      	adds	r0, r4, #4
1a0028a6:	f7ff f911 	bl	1a001acc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0028aa:	69e3      	ldr	r3, [r4, #28]
1a0028ac:	2b01      	cmp	r3, #1
1a0028ae:	d004      	beq.n	1a0028ba <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0028b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0028b2:	4620      	mov	r0, r4
1a0028b4:	4798      	blx	r3
}
1a0028b6:	b002      	add	sp, #8
1a0028b8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0028ba:	69a1      	ldr	r1, [r4, #24]
1a0028bc:	462b      	mov	r3, r5
1a0028be:	4632      	mov	r2, r6
1a0028c0:	4429      	add	r1, r5
1a0028c2:	4620      	mov	r0, r4
1a0028c4:	f7ff fed0 	bl	1a002668 <prvInsertTimerInActiveList>
1a0028c8:	2800      	cmp	r0, #0
1a0028ca:	d0f1      	beq.n	1a0028b0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0028cc:	2100      	movs	r1, #0
1a0028ce:	9100      	str	r1, [sp, #0]
1a0028d0:	460b      	mov	r3, r1
1a0028d2:	462a      	mov	r2, r5
1a0028d4:	4620      	mov	r0, r4
1a0028d6:	f7ff ff55 	bl	1a002784 <xTimerGenericCommand>
			configASSERT( xResult );
1a0028da:	2800      	cmp	r0, #0
1a0028dc:	d1e8      	bne.n	1a0028b0 <prvProcessExpiredTimer+0x1c>
1a0028de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028e2:	f383 8811 	msr	BASEPRI, r3
1a0028e6:	f3bf 8f6f 	isb	sy
1a0028ea:	f3bf 8f4f 	dsb	sy
1a0028ee:	e7fe      	b.n	1a0028ee <prvProcessExpiredTimer+0x5a>
1a0028f0:	10003384 	.word	0x10003384

1a0028f4 <prvProcessTimerOrBlockTask>:
{
1a0028f4:	b570      	push	{r4, r5, r6, lr}
1a0028f6:	b082      	sub	sp, #8
1a0028f8:	4606      	mov	r6, r0
1a0028fa:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0028fc:	f7ff fb76 	bl	1a001fec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002900:	a801      	add	r0, sp, #4
1a002902:	f7ff ffb1 	bl	1a002868 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002906:	9b01      	ldr	r3, [sp, #4]
1a002908:	bb1b      	cbnz	r3, 1a002952 <prvProcessTimerOrBlockTask+0x5e>
1a00290a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00290c:	b90c      	cbnz	r4, 1a002912 <prvProcessTimerOrBlockTask+0x1e>
1a00290e:	42b0      	cmp	r0, r6
1a002910:	d218      	bcs.n	1a002944 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002912:	b12c      	cbz	r4, 1a002920 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002914:	4b11      	ldr	r3, [pc, #68]	; (1a00295c <prvProcessTimerOrBlockTask+0x68>)
1a002916:	681b      	ldr	r3, [r3, #0]
1a002918:	681c      	ldr	r4, [r3, #0]
1a00291a:	fab4 f484 	clz	r4, r4
1a00291e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002920:	4622      	mov	r2, r4
1a002922:	1b71      	subs	r1, r6, r5
1a002924:	4b0e      	ldr	r3, [pc, #56]	; (1a002960 <prvProcessTimerOrBlockTask+0x6c>)
1a002926:	6818      	ldr	r0, [r3, #0]
1a002928:	f7ff f874 	bl	1a001a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00292c:	f7ff fbf8 	bl	1a002120 <xTaskResumeAll>
1a002930:	b988      	cbnz	r0, 1a002956 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002932:	4b0c      	ldr	r3, [pc, #48]	; (1a002964 <prvProcessTimerOrBlockTask+0x70>)
1a002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002938:	601a      	str	r2, [r3, #0]
1a00293a:	f3bf 8f4f 	dsb	sy
1a00293e:	f3bf 8f6f 	isb	sy
1a002942:	e008      	b.n	1a002956 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002944:	f7ff fbec 	bl	1a002120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002948:	4629      	mov	r1, r5
1a00294a:	4630      	mov	r0, r6
1a00294c:	f7ff ffa2 	bl	1a002894 <prvProcessExpiredTimer>
1a002950:	e001      	b.n	1a002956 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002952:	f7ff fbe5 	bl	1a002120 <xTaskResumeAll>
}
1a002956:	b002      	add	sp, #8
1a002958:	bd70      	pop	{r4, r5, r6, pc}
1a00295a:	bf00      	nop
1a00295c:	10003388 	.word	0x10003388
1a002960:	100034a8 	.word	0x100034a8
1a002964:	e000ed04 	.word	0xe000ed04

1a002968 <prvProcessReceivedCommands>:
{
1a002968:	b530      	push	{r4, r5, lr}
1a00296a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00296c:	e006      	b.n	1a00297c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00296e:	9907      	ldr	r1, [sp, #28]
1a002970:	9806      	ldr	r0, [sp, #24]
1a002972:	9b05      	ldr	r3, [sp, #20]
1a002974:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002976:	9b04      	ldr	r3, [sp, #16]
1a002978:	2b00      	cmp	r3, #0
1a00297a:	da0b      	bge.n	1a002994 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00297c:	2200      	movs	r2, #0
1a00297e:	a904      	add	r1, sp, #16
1a002980:	4b37      	ldr	r3, [pc, #220]	; (1a002a60 <prvProcessReceivedCommands+0xf8>)
1a002982:	6818      	ldr	r0, [r3, #0]
1a002984:	f7fe ff84 	bl	1a001890 <xQueueReceive>
1a002988:	2800      	cmp	r0, #0
1a00298a:	d066      	beq.n	1a002a5a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00298c:	9b04      	ldr	r3, [sp, #16]
1a00298e:	2b00      	cmp	r3, #0
1a002990:	daf1      	bge.n	1a002976 <prvProcessReceivedCommands+0xe>
1a002992:	e7ec      	b.n	1a00296e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002994:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002996:	6963      	ldr	r3, [r4, #20]
1a002998:	b113      	cbz	r3, 1a0029a0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00299a:	1d20      	adds	r0, r4, #4
1a00299c:	f7ff f896 	bl	1a001acc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0029a0:	a803      	add	r0, sp, #12
1a0029a2:	f7ff ff61 	bl	1a002868 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0029a6:	9b04      	ldr	r3, [sp, #16]
1a0029a8:	2b09      	cmp	r3, #9
1a0029aa:	d8e7      	bhi.n	1a00297c <prvProcessReceivedCommands+0x14>
1a0029ac:	a201      	add	r2, pc, #4	; (adr r2, 1a0029b4 <prvProcessReceivedCommands+0x4c>)
1a0029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0029b2:	bf00      	nop
1a0029b4:	1a0029dd 	.word	0x1a0029dd
1a0029b8:	1a0029dd 	.word	0x1a0029dd
1a0029bc:	1a0029dd 	.word	0x1a0029dd
1a0029c0:	1a00297d 	.word	0x1a00297d
1a0029c4:	1a002a25 	.word	0x1a002a25
1a0029c8:	1a002a4b 	.word	0x1a002a4b
1a0029cc:	1a0029dd 	.word	0x1a0029dd
1a0029d0:	1a0029dd 	.word	0x1a0029dd
1a0029d4:	1a00297d 	.word	0x1a00297d
1a0029d8:	1a002a25 	.word	0x1a002a25
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0029dc:	9905      	ldr	r1, [sp, #20]
1a0029de:	69a5      	ldr	r5, [r4, #24]
1a0029e0:	460b      	mov	r3, r1
1a0029e2:	4602      	mov	r2, r0
1a0029e4:	4429      	add	r1, r5
1a0029e6:	4620      	mov	r0, r4
1a0029e8:	f7ff fe3e 	bl	1a002668 <prvInsertTimerInActiveList>
1a0029ec:	2800      	cmp	r0, #0
1a0029ee:	d0c5      	beq.n	1a00297c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0029f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0029f2:	4620      	mov	r0, r4
1a0029f4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0029f6:	69e3      	ldr	r3, [r4, #28]
1a0029f8:	2b01      	cmp	r3, #1
1a0029fa:	d1bf      	bne.n	1a00297c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0029fc:	69a2      	ldr	r2, [r4, #24]
1a0029fe:	2100      	movs	r1, #0
1a002a00:	9100      	str	r1, [sp, #0]
1a002a02:	460b      	mov	r3, r1
1a002a04:	9805      	ldr	r0, [sp, #20]
1a002a06:	4402      	add	r2, r0
1a002a08:	4620      	mov	r0, r4
1a002a0a:	f7ff febb 	bl	1a002784 <xTimerGenericCommand>
							configASSERT( xResult );
1a002a0e:	2800      	cmp	r0, #0
1a002a10:	d1b4      	bne.n	1a00297c <prvProcessReceivedCommands+0x14>
1a002a12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a16:	f383 8811 	msr	BASEPRI, r3
1a002a1a:	f3bf 8f6f 	isb	sy
1a002a1e:	f3bf 8f4f 	dsb	sy
1a002a22:	e7fe      	b.n	1a002a22 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002a24:	9905      	ldr	r1, [sp, #20]
1a002a26:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a28:	b131      	cbz	r1, 1a002a38 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002a2a:	4603      	mov	r3, r0
1a002a2c:	4602      	mov	r2, r0
1a002a2e:	4401      	add	r1, r0
1a002a30:	4620      	mov	r0, r4
1a002a32:	f7ff fe19 	bl	1a002668 <prvInsertTimerInActiveList>
					break;
1a002a36:	e7a1      	b.n	1a00297c <prvProcessReceivedCommands+0x14>
1a002a38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a3c:	f383 8811 	msr	BASEPRI, r3
1a002a40:	f3bf 8f6f 	isb	sy
1a002a44:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002a48:	e7fe      	b.n	1a002a48 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002a4a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002a4e:	2b00      	cmp	r3, #0
1a002a50:	d194      	bne.n	1a00297c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002a52:	4620      	mov	r0, r4
1a002a54:	f7fe fcac 	bl	1a0013b0 <vPortFree>
1a002a58:	e790      	b.n	1a00297c <prvProcessReceivedCommands+0x14>
}
1a002a5a:	b009      	add	sp, #36	; 0x24
1a002a5c:	bd30      	pop	{r4, r5, pc}
1a002a5e:	bf00      	nop
1a002a60:	100034a8 	.word	0x100034a8

1a002a64 <prvTimerTask>:
{
1a002a64:	b500      	push	{lr}
1a002a66:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002a68:	a801      	add	r0, sp, #4
1a002a6a:	f7ff fded 	bl	1a002648 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002a6e:	9901      	ldr	r1, [sp, #4]
1a002a70:	f7ff ff40 	bl	1a0028f4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002a74:	f7ff ff78 	bl	1a002968 <prvProcessReceivedCommands>
1a002a78:	e7f6      	b.n	1a002a68 <prvTimerTask+0x4>
1a002a7a:	Address 0x000000001a002a7a is out of bounds.


1a002a7c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002a7c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002a7e:	2300      	movs	r3, #0
1a002a80:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002a82:	4b0d      	ldr	r3, [pc, #52]	; (1a002ab8 <prvTaskExitError+0x3c>)
1a002a84:	681b      	ldr	r3, [r3, #0]
1a002a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002a8a:	d008      	beq.n	1a002a9e <prvTaskExitError+0x22>
1a002a8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a90:	f383 8811 	msr	BASEPRI, r3
1a002a94:	f3bf 8f6f 	isb	sy
1a002a98:	f3bf 8f4f 	dsb	sy
1a002a9c:	e7fe      	b.n	1a002a9c <prvTaskExitError+0x20>
1a002a9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002aa2:	f383 8811 	msr	BASEPRI, r3
1a002aa6:	f3bf 8f6f 	isb	sy
1a002aaa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002aae:	9b01      	ldr	r3, [sp, #4]
1a002ab0:	2b00      	cmp	r3, #0
1a002ab2:	d0fc      	beq.n	1a002aae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002ab4:	b002      	add	sp, #8
1a002ab6:	4770      	bx	lr
1a002ab8:	10000004 	.word	0x10000004

1a002abc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002abc:	4808      	ldr	r0, [pc, #32]	; (1a002ae0 <prvPortStartFirstTask+0x24>)
1a002abe:	6800      	ldr	r0, [r0, #0]
1a002ac0:	6800      	ldr	r0, [r0, #0]
1a002ac2:	f380 8808 	msr	MSP, r0
1a002ac6:	f04f 0000 	mov.w	r0, #0
1a002aca:	f380 8814 	msr	CONTROL, r0
1a002ace:	b662      	cpsie	i
1a002ad0:	b661      	cpsie	f
1a002ad2:	f3bf 8f4f 	dsb	sy
1a002ad6:	f3bf 8f6f 	isb	sy
1a002ada:	df00      	svc	0
1a002adc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002ade:	0000      	.short	0x0000
1a002ae0:	e000ed08 	.word	0xe000ed08

1a002ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002af4 <vPortEnableVFP+0x10>
1a002ae8:	6801      	ldr	r1, [r0, #0]
1a002aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002aee:	6001      	str	r1, [r0, #0]
1a002af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a002af2:	0000      	.short	0x0000
1a002af4:	e000ed88 	.word	0xe000ed88

1a002af8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002afc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002b00:	f021 0101 	bic.w	r1, r1, #1
1a002b04:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002b08:	4b05      	ldr	r3, [pc, #20]	; (1a002b20 <pxPortInitialiseStack+0x28>)
1a002b0a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002b0e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002b12:	f06f 0302 	mvn.w	r3, #2
1a002b16:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002b1a:	3844      	subs	r0, #68	; 0x44
1a002b1c:	4770      	bx	lr
1a002b1e:	bf00      	nop
1a002b20:	1a002a7d 	.word	0x1a002a7d
1a002b24:	ffffffff 	.word	0xffffffff
1a002b28:	ffffffff 	.word	0xffffffff
1a002b2c:	ffffffff 	.word	0xffffffff

1a002b30 <SVC_Handler>:
	__asm volatile (
1a002b30:	4b07      	ldr	r3, [pc, #28]	; (1a002b50 <pxCurrentTCBConst2>)
1a002b32:	6819      	ldr	r1, [r3, #0]
1a002b34:	6808      	ldr	r0, [r1, #0]
1a002b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b3a:	f380 8809 	msr	PSP, r0
1a002b3e:	f3bf 8f6f 	isb	sy
1a002b42:	f04f 0000 	mov.w	r0, #0
1a002b46:	f380 8811 	msr	BASEPRI, r0
1a002b4a:	4770      	bx	lr
1a002b4c:	f3af 8000 	nop.w

1a002b50 <pxCurrentTCBConst2>:
1a002b50:	1000325c 	.word	0x1000325c

1a002b54 <vPortEnterCritical>:
1a002b54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b58:	f383 8811 	msr	BASEPRI, r3
1a002b5c:	f3bf 8f6f 	isb	sy
1a002b60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002b64:	4a0a      	ldr	r2, [pc, #40]	; (1a002b90 <vPortEnterCritical+0x3c>)
1a002b66:	6813      	ldr	r3, [r2, #0]
1a002b68:	3301      	adds	r3, #1
1a002b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002b6c:	2b01      	cmp	r3, #1
1a002b6e:	d000      	beq.n	1a002b72 <vPortEnterCritical+0x1e>
}
1a002b70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002b72:	4b08      	ldr	r3, [pc, #32]	; (1a002b94 <vPortEnterCritical+0x40>)
1a002b74:	681b      	ldr	r3, [r3, #0]
1a002b76:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002b7a:	d0f9      	beq.n	1a002b70 <vPortEnterCritical+0x1c>
1a002b7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b80:	f383 8811 	msr	BASEPRI, r3
1a002b84:	f3bf 8f6f 	isb	sy
1a002b88:	f3bf 8f4f 	dsb	sy
1a002b8c:	e7fe      	b.n	1a002b8c <vPortEnterCritical+0x38>
1a002b8e:	bf00      	nop
1a002b90:	10000004 	.word	0x10000004
1a002b94:	e000ed04 	.word	0xe000ed04

1a002b98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002b98:	4b09      	ldr	r3, [pc, #36]	; (1a002bc0 <vPortExitCritical+0x28>)
1a002b9a:	681b      	ldr	r3, [r3, #0]
1a002b9c:	b943      	cbnz	r3, 1a002bb0 <vPortExitCritical+0x18>
1a002b9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ba2:	f383 8811 	msr	BASEPRI, r3
1a002ba6:	f3bf 8f6f 	isb	sy
1a002baa:	f3bf 8f4f 	dsb	sy
1a002bae:	e7fe      	b.n	1a002bae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002bb0:	3b01      	subs	r3, #1
1a002bb2:	4a03      	ldr	r2, [pc, #12]	; (1a002bc0 <vPortExitCritical+0x28>)
1a002bb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002bb6:	b90b      	cbnz	r3, 1a002bbc <vPortExitCritical+0x24>
	__asm volatile
1a002bb8:	f383 8811 	msr	BASEPRI, r3
}
1a002bbc:	4770      	bx	lr
1a002bbe:	bf00      	nop
1a002bc0:	10000004 	.word	0x10000004
1a002bc4:	ffffffff 	.word	0xffffffff
1a002bc8:	ffffffff 	.word	0xffffffff
1a002bcc:	ffffffff 	.word	0xffffffff

1a002bd0 <PendSV_Handler>:
	__asm volatile
1a002bd0:	f3ef 8009 	mrs	r0, PSP
1a002bd4:	f3bf 8f6f 	isb	sy
1a002bd8:	4b15      	ldr	r3, [pc, #84]	; (1a002c30 <pxCurrentTCBConst>)
1a002bda:	681a      	ldr	r2, [r3, #0]
1a002bdc:	f01e 0f10 	tst.w	lr, #16
1a002be0:	bf08      	it	eq
1a002be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002bea:	6010      	str	r0, [r2, #0]
1a002bec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002bf0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002bf4:	f380 8811 	msr	BASEPRI, r0
1a002bf8:	f3bf 8f4f 	dsb	sy
1a002bfc:	f3bf 8f6f 	isb	sy
1a002c00:	f7ff fb84 	bl	1a00230c <vTaskSwitchContext>
1a002c04:	f04f 0000 	mov.w	r0, #0
1a002c08:	f380 8811 	msr	BASEPRI, r0
1a002c0c:	bc09      	pop	{r0, r3}
1a002c0e:	6819      	ldr	r1, [r3, #0]
1a002c10:	6808      	ldr	r0, [r1, #0]
1a002c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c16:	f01e 0f10 	tst.w	lr, #16
1a002c1a:	bf08      	it	eq
1a002c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002c20:	f380 8809 	msr	PSP, r0
1a002c24:	f3bf 8f6f 	isb	sy
1a002c28:	4770      	bx	lr
1a002c2a:	bf00      	nop
1a002c2c:	f3af 8000 	nop.w

1a002c30 <pxCurrentTCBConst>:
1a002c30:	1000325c 	.word	0x1000325c

1a002c34 <SysTick_Handler>:
{
1a002c34:	b508      	push	{r3, lr}
	__asm volatile
1a002c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c3a:	f383 8811 	msr	BASEPRI, r3
1a002c3e:	f3bf 8f6f 	isb	sy
1a002c42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002c46:	f7ff f9df 	bl	1a002008 <xTaskIncrementTick>
1a002c4a:	b118      	cbz	r0, 1a002c54 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002c4c:	4b03      	ldr	r3, [pc, #12]	; (1a002c5c <SysTick_Handler+0x28>)
1a002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002c52:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002c54:	2300      	movs	r3, #0
1a002c56:	f383 8811 	msr	BASEPRI, r3
}
1a002c5a:	bd08      	pop	{r3, pc}
1a002c5c:	e000ed04 	.word	0xe000ed04

1a002c60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002c60:	4a08      	ldr	r2, [pc, #32]	; (1a002c84 <vPortSetupTimerInterrupt+0x24>)
1a002c62:	2300      	movs	r3, #0
1a002c64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002c66:	4908      	ldr	r1, [pc, #32]	; (1a002c88 <vPortSetupTimerInterrupt+0x28>)
1a002c68:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002c6a:	4b08      	ldr	r3, [pc, #32]	; (1a002c8c <vPortSetupTimerInterrupt+0x2c>)
1a002c6c:	681b      	ldr	r3, [r3, #0]
1a002c6e:	4908      	ldr	r1, [pc, #32]	; (1a002c90 <vPortSetupTimerInterrupt+0x30>)
1a002c70:	fba1 1303 	umull	r1, r3, r1, r3
1a002c74:	099b      	lsrs	r3, r3, #6
1a002c76:	3b01      	subs	r3, #1
1a002c78:	4906      	ldr	r1, [pc, #24]	; (1a002c94 <vPortSetupTimerInterrupt+0x34>)
1a002c7a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002c7c:	2307      	movs	r3, #7
1a002c7e:	6013      	str	r3, [r2, #0]
}
1a002c80:	4770      	bx	lr
1a002c82:	bf00      	nop
1a002c84:	e000e010 	.word	0xe000e010
1a002c88:	e000e018 	.word	0xe000e018
1a002c8c:	10003890 	.word	0x10003890
1a002c90:	10624dd3 	.word	0x10624dd3
1a002c94:	e000e014 	.word	0xe000e014

1a002c98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002c98:	4b3a      	ldr	r3, [pc, #232]	; (1a002d84 <xPortStartScheduler+0xec>)
1a002c9a:	681a      	ldr	r2, [r3, #0]
1a002c9c:	4b3a      	ldr	r3, [pc, #232]	; (1a002d88 <xPortStartScheduler+0xf0>)
1a002c9e:	429a      	cmp	r2, r3
1a002ca0:	d029      	beq.n	1a002cf6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ca2:	4b38      	ldr	r3, [pc, #224]	; (1a002d84 <xPortStartScheduler+0xec>)
1a002ca4:	681a      	ldr	r2, [r3, #0]
1a002ca6:	4b39      	ldr	r3, [pc, #228]	; (1a002d8c <xPortStartScheduler+0xf4>)
1a002ca8:	429a      	cmp	r2, r3
1a002caa:	d02d      	beq.n	1a002d08 <xPortStartScheduler+0x70>
{
1a002cac:	b510      	push	{r4, lr}
1a002cae:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002cb0:	4b37      	ldr	r3, [pc, #220]	; (1a002d90 <xPortStartScheduler+0xf8>)
1a002cb2:	781a      	ldrb	r2, [r3, #0]
1a002cb4:	b2d2      	uxtb	r2, r2
1a002cb6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002cb8:	22ff      	movs	r2, #255	; 0xff
1a002cba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002cbc:	781b      	ldrb	r3, [r3, #0]
1a002cbe:	b2db      	uxtb	r3, r3
1a002cc0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002cc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002ccc:	4a31      	ldr	r2, [pc, #196]	; (1a002d94 <xPortStartScheduler+0xfc>)
1a002cce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002cd0:	4b31      	ldr	r3, [pc, #196]	; (1a002d98 <xPortStartScheduler+0x100>)
1a002cd2:	2207      	movs	r2, #7
1a002cd4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002cd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cda:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002cde:	d01c      	beq.n	1a002d1a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a002ce0:	4a2d      	ldr	r2, [pc, #180]	; (1a002d98 <xPortStartScheduler+0x100>)
1a002ce2:	6813      	ldr	r3, [r2, #0]
1a002ce4:	3b01      	subs	r3, #1
1a002ce6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002ce8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002cec:	005b      	lsls	r3, r3, #1
1a002cee:	b2db      	uxtb	r3, r3
1a002cf0:	f88d 3003 	strb.w	r3, [sp, #3]
1a002cf4:	e7ef      	b.n	1a002cd6 <xPortStartScheduler+0x3e>
	__asm volatile
1a002cf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cfa:	f383 8811 	msr	BASEPRI, r3
1a002cfe:	f3bf 8f6f 	isb	sy
1a002d02:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002d06:	e7fe      	b.n	1a002d06 <xPortStartScheduler+0x6e>
1a002d08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d0c:	f383 8811 	msr	BASEPRI, r3
1a002d10:	f3bf 8f6f 	isb	sy
1a002d14:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002d18:	e7fe      	b.n	1a002d18 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002d1a:	4b1f      	ldr	r3, [pc, #124]	; (1a002d98 <xPortStartScheduler+0x100>)
1a002d1c:	681b      	ldr	r3, [r3, #0]
1a002d1e:	2b04      	cmp	r3, #4
1a002d20:	d008      	beq.n	1a002d34 <xPortStartScheduler+0x9c>
1a002d22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d26:	f383 8811 	msr	BASEPRI, r3
1a002d2a:	f3bf 8f6f 	isb	sy
1a002d2e:	f3bf 8f4f 	dsb	sy
1a002d32:	e7fe      	b.n	1a002d32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002d34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002d3a:	4a17      	ldr	r2, [pc, #92]	; (1a002d98 <xPortStartScheduler+0x100>)
1a002d3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002d3e:	9b01      	ldr	r3, [sp, #4]
1a002d40:	b2db      	uxtb	r3, r3
1a002d42:	4a13      	ldr	r2, [pc, #76]	; (1a002d90 <xPortStartScheduler+0xf8>)
1a002d44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002d46:	4b15      	ldr	r3, [pc, #84]	; (1a002d9c <xPortStartScheduler+0x104>)
1a002d48:	681a      	ldr	r2, [r3, #0]
1a002d4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002d4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002d50:	681a      	ldr	r2, [r3, #0]
1a002d52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002d56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002d58:	f7ff ff82 	bl	1a002c60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002d5c:	2400      	movs	r4, #0
1a002d5e:	4b10      	ldr	r3, [pc, #64]	; (1a002da0 <xPortStartScheduler+0x108>)
1a002d60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002d62:	f7ff febf 	bl	1a002ae4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002d66:	4a0f      	ldr	r2, [pc, #60]	; (1a002da4 <xPortStartScheduler+0x10c>)
1a002d68:	6813      	ldr	r3, [r2, #0]
1a002d6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002d6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002d70:	f7ff fea4 	bl	1a002abc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002d74:	f7ff faca 	bl	1a00230c <vTaskSwitchContext>
	prvTaskExitError();
1a002d78:	f7ff fe80 	bl	1a002a7c <prvTaskExitError>
}
1a002d7c:	4620      	mov	r0, r4
1a002d7e:	b002      	add	sp, #8
1a002d80:	bd10      	pop	{r4, pc}
1a002d82:	bf00      	nop
1a002d84:	e000ed00 	.word	0xe000ed00
1a002d88:	410fc271 	.word	0x410fc271
1a002d8c:	410fc270 	.word	0x410fc270
1a002d90:	e000e400 	.word	0xe000e400
1a002d94:	100034b0 	.word	0x100034b0
1a002d98:	100034b4 	.word	0x100034b4
1a002d9c:	e000ed20 	.word	0xe000ed20
1a002da0:	10000004 	.word	0x10000004
1a002da4:	e000ef34 	.word	0xe000ef34

1a002da8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002da8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002dac:	2b0f      	cmp	r3, #15
1a002dae:	d90f      	bls.n	1a002dd0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002db0:	4a10      	ldr	r2, [pc, #64]	; (1a002df4 <vPortValidateInterruptPriority+0x4c>)
1a002db2:	5c9b      	ldrb	r3, [r3, r2]
1a002db4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002db6:	4a10      	ldr	r2, [pc, #64]	; (1a002df8 <vPortValidateInterruptPriority+0x50>)
1a002db8:	7812      	ldrb	r2, [r2, #0]
1a002dba:	429a      	cmp	r2, r3
1a002dbc:	d908      	bls.n	1a002dd0 <vPortValidateInterruptPriority+0x28>
1a002dbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002dc2:	f383 8811 	msr	BASEPRI, r3
1a002dc6:	f3bf 8f6f 	isb	sy
1a002dca:	f3bf 8f4f 	dsb	sy
1a002dce:	e7fe      	b.n	1a002dce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002dd0:	4b0a      	ldr	r3, [pc, #40]	; (1a002dfc <vPortValidateInterruptPriority+0x54>)
1a002dd2:	681b      	ldr	r3, [r3, #0]
1a002dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002dd8:	4a09      	ldr	r2, [pc, #36]	; (1a002e00 <vPortValidateInterruptPriority+0x58>)
1a002dda:	6812      	ldr	r2, [r2, #0]
1a002ddc:	4293      	cmp	r3, r2
1a002dde:	d908      	bls.n	1a002df2 <vPortValidateInterruptPriority+0x4a>
1a002de0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002de4:	f383 8811 	msr	BASEPRI, r3
1a002de8:	f3bf 8f6f 	isb	sy
1a002dec:	f3bf 8f4f 	dsb	sy
1a002df0:	e7fe      	b.n	1a002df0 <vPortValidateInterruptPriority+0x48>
	}
1a002df2:	4770      	bx	lr
1a002df4:	e000e3f0 	.word	0xe000e3f0
1a002df8:	100034b0 	.word	0x100034b0
1a002dfc:	e000ed0c 	.word	0xe000ed0c
1a002e00:	100034b4 	.word	0x100034b4

1a002e04 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002e04:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002e06:	4b05      	ldr	r3, [pc, #20]	; (1a002e1c <DAC_IRQHandler+0x18>)
1a002e08:	2201      	movs	r2, #1
1a002e0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002e0e:	4b04      	ldr	r3, [pc, #16]	; (1a002e20 <DAC_IRQHandler+0x1c>)
1a002e10:	681b      	ldr	r3, [r3, #0]
1a002e12:	b113      	cbz	r3, 1a002e1a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002e14:	4b02      	ldr	r3, [pc, #8]	; (1a002e20 <DAC_IRQHandler+0x1c>)
1a002e16:	681b      	ldr	r3, [r3, #0]
1a002e18:	4798      	blx	r3
   }
}
1a002e1a:	bd08      	pop	{r3, pc}
1a002e1c:	e000e100 	.word	0xe000e100
1a002e20:	100034b8 	.word	0x100034b8

1a002e24 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e24:	2200      	movs	r2, #0
1a002e26:	2a05      	cmp	r2, #5
1a002e28:	d819      	bhi.n	1a002e5e <Board_LED_Init+0x3a>
{
1a002e2a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002e2c:	490c      	ldr	r1, [pc, #48]	; (1a002e60 <Board_LED_Init+0x3c>)
1a002e2e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002e32:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002e36:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002e38:	4b0a      	ldr	r3, [pc, #40]	; (1a002e64 <Board_LED_Init+0x40>)
1a002e3a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002e3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002e42:	2001      	movs	r0, #1
1a002e44:	40a0      	lsls	r0, r4
1a002e46:	4301      	orrs	r1, r0
1a002e48:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002e4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002e50:	2100      	movs	r1, #0
1a002e52:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002e54:	3201      	adds	r2, #1
1a002e56:	2a05      	cmp	r2, #5
1a002e58:	d9e8      	bls.n	1a002e2c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002e5a:	bc70      	pop	{r4, r5, r6}
1a002e5c:	4770      	bx	lr
1a002e5e:	4770      	bx	lr
1a002e60:	1a00bd40 	.word	0x1a00bd40
1a002e64:	400f4000 	.word	0x400f4000

1a002e68 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e68:	2300      	movs	r3, #0
1a002e6a:	2b03      	cmp	r3, #3
1a002e6c:	d816      	bhi.n	1a002e9c <Board_TEC_Init+0x34>
{
1a002e6e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002e70:	490b      	ldr	r1, [pc, #44]	; (1a002ea0 <Board_TEC_Init+0x38>)
1a002e72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002e76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002e7a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002e7c:	4c09      	ldr	r4, [pc, #36]	; (1a002ea4 <Board_TEC_Init+0x3c>)
1a002e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e86:	2001      	movs	r0, #1
1a002e88:	40a8      	lsls	r0, r5
1a002e8a:	ea21 0100 	bic.w	r1, r1, r0
1a002e8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002e92:	3301      	adds	r3, #1
1a002e94:	2b03      	cmp	r3, #3
1a002e96:	d9eb      	bls.n	1a002e70 <Board_TEC_Init+0x8>
   }
}
1a002e98:	bc30      	pop	{r4, r5}
1a002e9a:	4770      	bx	lr
1a002e9c:	4770      	bx	lr
1a002e9e:	bf00      	nop
1a002ea0:	1a00bd38 	.word	0x1a00bd38
1a002ea4:	400f4000 	.word	0x400f4000

1a002ea8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ea8:	2300      	movs	r3, #0
1a002eaa:	2b08      	cmp	r3, #8
1a002eac:	d816      	bhi.n	1a002edc <Board_GPIO_Init+0x34>
{
1a002eae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002eb0:	490b      	ldr	r1, [pc, #44]	; (1a002ee0 <Board_GPIO_Init+0x38>)
1a002eb2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002eb6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002eba:	784d      	ldrb	r5, [r1, #1]
1a002ebc:	4c09      	ldr	r4, [pc, #36]	; (1a002ee4 <Board_GPIO_Init+0x3c>)
1a002ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002ec2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002ec6:	2001      	movs	r0, #1
1a002ec8:	40a8      	lsls	r0, r5
1a002eca:	ea21 0100 	bic.w	r1, r1, r0
1a002ece:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ed2:	3301      	adds	r3, #1
1a002ed4:	2b08      	cmp	r3, #8
1a002ed6:	d9eb      	bls.n	1a002eb0 <Board_GPIO_Init+0x8>
   }
}
1a002ed8:	bc30      	pop	{r4, r5}
1a002eda:	4770      	bx	lr
1a002edc:	4770      	bx	lr
1a002ede:	bf00      	nop
1a002ee0:	1a00bd4c 	.word	0x1a00bd4c
1a002ee4:	400f4000 	.word	0x400f4000

1a002ee8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002ee8:	b510      	push	{r4, lr}
1a002eea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002eec:	4c08      	ldr	r4, [pc, #32]	; (1a002f10 <Board_ADC_Init+0x28>)
1a002eee:	4669      	mov	r1, sp
1a002ef0:	4620      	mov	r0, r4
1a002ef2:	f000 faff 	bl	1a0034f4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002ef6:	4a07      	ldr	r2, [pc, #28]	; (1a002f14 <Board_ADC_Init+0x2c>)
1a002ef8:	4669      	mov	r1, sp
1a002efa:	4620      	mov	r0, r4
1a002efc:	f000 fb1a 	bl	1a003534 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002f00:	2200      	movs	r2, #0
1a002f02:	4669      	mov	r1, sp
1a002f04:	4620      	mov	r0, r4
1a002f06:	f000 fb2e 	bl	1a003566 <Chip_ADC_SetResolution>
}
1a002f0a:	b002      	add	sp, #8
1a002f0c:	bd10      	pop	{r4, pc}
1a002f0e:	bf00      	nop
1a002f10:	400e3000 	.word	0x400e3000
1a002f14:	00061a80 	.word	0x00061a80

1a002f18 <Board_SPI_Init>:
{
1a002f18:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002f1a:	4c0b      	ldr	r4, [pc, #44]	; (1a002f48 <Board_SPI_Init+0x30>)
1a002f1c:	4620      	mov	r0, r4
1a002f1e:	f000 ffcd 	bl	1a003ebc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002f22:	6863      	ldr	r3, [r4, #4]
1a002f24:	f023 0304 	bic.w	r3, r3, #4
1a002f28:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002f2a:	6823      	ldr	r3, [r4, #0]
1a002f2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002f30:	f043 0307 	orr.w	r3, r3, #7
1a002f34:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002f36:	4905      	ldr	r1, [pc, #20]	; (1a002f4c <Board_SPI_Init+0x34>)
1a002f38:	4620      	mov	r0, r4
1a002f3a:	f000 ffa0 	bl	1a003e7e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002f3e:	6863      	ldr	r3, [r4, #4]
1a002f40:	f043 0302 	orr.w	r3, r3, #2
1a002f44:	6063      	str	r3, [r4, #4]
}
1a002f46:	bd10      	pop	{r4, pc}
1a002f48:	400c5000 	.word	0x400c5000
1a002f4c:	000186a0 	.word	0x000186a0

1a002f50 <Board_I2C_Init>:
{
1a002f50:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002f52:	2000      	movs	r0, #0
1a002f54:	f000 f956 	bl	1a003204 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002f58:	4b04      	ldr	r3, [pc, #16]	; (1a002f6c <Board_I2C_Init+0x1c>)
1a002f5a:	f640 0208 	movw	r2, #2056	; 0x808
1a002f5e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002f62:	4903      	ldr	r1, [pc, #12]	; (1a002f70 <Board_I2C_Init+0x20>)
1a002f64:	2000      	movs	r0, #0
1a002f66:	f000 f95f 	bl	1a003228 <Chip_I2C_SetClockRate>
}
1a002f6a:	bd08      	pop	{r3, pc}
1a002f6c:	40086000 	.word	0x40086000
1a002f70:	000f4240 	.word	0x000f4240

1a002f74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002f74:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002f76:	4c07      	ldr	r4, [pc, #28]	; (1a002f94 <Board_Debug_Init+0x20>)
1a002f78:	4620      	mov	r0, r4
1a002f7a:	f000 f9df 	bl	1a00333c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002f7e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002f82:	4620      	mov	r0, r4
1a002f84:	f000 fa24 	bl	1a0033d0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002f88:	2303      	movs	r3, #3
1a002f8a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002f8c:	2301      	movs	r3, #1
1a002f8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002f90:	bd10      	pop	{r4, pc}
1a002f92:	bf00      	nop
1a002f94:	400c1000 	.word	0x400c1000

1a002f98 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002f98:	4b03      	ldr	r3, [pc, #12]	; (1a002fa8 <Board_UARTPutChar+0x10>)
1a002f9a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002f9c:	f013 0f20 	tst.w	r3, #32
1a002fa0:	d0fa      	beq.n	1a002f98 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002fa2:	4b01      	ldr	r3, [pc, #4]	; (1a002fa8 <Board_UARTPutChar+0x10>)
1a002fa4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002fa6:	4770      	bx	lr
1a002fa8:	400c1000 	.word	0x400c1000

1a002fac <Board_UARTGetChar>:
	return pUART->LSR;
1a002fac:	4b05      	ldr	r3, [pc, #20]	; (1a002fc4 <Board_UARTGetChar+0x18>)
1a002fae:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002fb0:	f013 0f01 	tst.w	r3, #1
1a002fb4:	d003      	beq.n	1a002fbe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002fb6:	4b03      	ldr	r3, [pc, #12]	; (1a002fc4 <Board_UARTGetChar+0x18>)
1a002fb8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002fba:	b2c0      	uxtb	r0, r0
1a002fbc:	4770      	bx	lr
   }
   return EOF;
1a002fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002fc2:	4770      	bx	lr
1a002fc4:	400c1000 	.word	0x400c1000

1a002fc8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002fc8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002fca:	f7ff ffd3 	bl	1a002f74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002fce:	4809      	ldr	r0, [pc, #36]	; (1a002ff4 <Board_Init+0x2c>)
1a002fd0:	f000 ff35 	bl	1a003e3e <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002fd4:	f7ff ff68 	bl	1a002ea8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002fd8:	f7ff ff86 	bl	1a002ee8 <Board_ADC_Init>
   Board_SPI_Init();
1a002fdc:	f7ff ff9c 	bl	1a002f18 <Board_SPI_Init>
   Board_I2C_Init();
1a002fe0:	f7ff ffb6 	bl	1a002f50 <Board_I2C_Init>

   Board_LED_Init();
1a002fe4:	f7ff ff1e 	bl	1a002e24 <Board_LED_Init>
   Board_TEC_Init();
1a002fe8:	f7ff ff3e 	bl	1a002e68 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002fec:	f000 fac2 	bl	1a003574 <SystemCoreClockUpdate>
}
1a002ff0:	bd08      	pop	{r3, pc}
1a002ff2:	bf00      	nop
1a002ff4:	400f4000 	.word	0x400f4000

1a002ff8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002ff8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002ffa:	b2c0      	uxtb	r0, r0
1a002ffc:	f7ff ffcc 	bl	1a002f98 <Board_UARTPutChar>
}
1a003000:	bd08      	pop	{r3, pc}

1a003002 <__stdio_getchar>:

int __stdio_getchar()
{
1a003002:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003004:	f7ff ffd2 	bl	1a002fac <Board_UARTGetChar>
}
1a003008:	bd08      	pop	{r3, pc}

1a00300a <__stdio_init>:

void __stdio_init()
{
1a00300a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00300c:	f7ff ffb2 	bl	1a002f74 <Board_Debug_Init>
1a003010:	bd08      	pop	{r3, pc}
1a003012:	Address 0x000000001a003012 is out of bounds.


1a003014 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003014:	2300      	movs	r3, #0
1a003016:	2b1c      	cmp	r3, #28
1a003018:	d812      	bhi.n	1a003040 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00301a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00301c:	4a09      	ldr	r2, [pc, #36]	; (1a003044 <Board_SetupMuxing+0x30>)
1a00301e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003022:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003026:	784a      	ldrb	r2, [r1, #1]
1a003028:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00302a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00302e:	4906      	ldr	r1, [pc, #24]	; (1a003048 <Board_SetupMuxing+0x34>)
1a003030:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003034:	3301      	adds	r3, #1
1a003036:	2b1c      	cmp	r3, #28
1a003038:	d9f0      	bls.n	1a00301c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00303a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00303e:	4770      	bx	lr
1a003040:	4770      	bx	lr
1a003042:	bf00      	nop
1a003044:	1a00bd68 	.word	0x1a00bd68
1a003048:	40086000 	.word	0x40086000

1a00304c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00304c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00304e:	4a17      	ldr	r2, [pc, #92]	; (1a0030ac <Board_SetupClocking+0x60>)
1a003050:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003058:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00305c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003060:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003068:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00306c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003070:	2201      	movs	r2, #1
1a003072:	490f      	ldr	r1, [pc, #60]	; (1a0030b0 <Board_SetupClocking+0x64>)
1a003074:	2006      	movs	r0, #6
1a003076:	f000 fd95 	bl	1a003ba4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00307a:	2400      	movs	r4, #0
1a00307c:	b14c      	cbz	r4, 1a003092 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00307e:	4b0b      	ldr	r3, [pc, #44]	; (1a0030ac <Board_SetupClocking+0x60>)
1a003080:	685a      	ldr	r2, [r3, #4]
1a003082:	f022 020c 	bic.w	r2, r2, #12
1a003086:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003088:	685a      	ldr	r2, [r3, #4]
1a00308a:	f042 0203 	orr.w	r2, r2, #3
1a00308e:	605a      	str	r2, [r3, #4]
}
1a003090:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003092:	4808      	ldr	r0, [pc, #32]	; (1a0030b4 <Board_SetupClocking+0x68>)
1a003094:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003098:	2301      	movs	r3, #1
1a00309a:	788a      	ldrb	r2, [r1, #2]
1a00309c:	7849      	ldrb	r1, [r1, #1]
1a00309e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0030a2:	f000 fc93 	bl	1a0039cc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0030a6:	3401      	adds	r4, #1
1a0030a8:	e7e8      	b.n	1a00307c <Board_SetupClocking+0x30>
1a0030aa:	bf00      	nop
1a0030ac:	40043000 	.word	0x40043000
1a0030b0:	0c28cb00 	.word	0x0c28cb00
1a0030b4:	1a00bd64 	.word	0x1a00bd64

1a0030b8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0030b8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0030ba:	f7ff ffab 	bl	1a003014 <Board_SetupMuxing>
    Board_SetupClocking();
1a0030be:	f7ff ffc5 	bl	1a00304c <Board_SetupClocking>
}
1a0030c2:	bd08      	pop	{r3, pc}

1a0030c4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0030c4:	2901      	cmp	r1, #1
1a0030c6:	d109      	bne.n	1a0030dc <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0030c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0030cc:	0082      	lsls	r2, r0, #2
1a0030ce:	4b04      	ldr	r3, [pc, #16]	; (1a0030e0 <Chip_I2C_EventHandler+0x1c>)
1a0030d0:	4413      	add	r3, r2
1a0030d2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0030d4:	7d13      	ldrb	r3, [r2, #20]
1a0030d6:	b2db      	uxtb	r3, r3
1a0030d8:	2b04      	cmp	r3, #4
1a0030da:	d0fb      	beq.n	1a0030d4 <Chip_I2C_EventHandler+0x10>
}
1a0030dc:	4770      	bx	lr
1a0030de:	bf00      	nop
1a0030e0:	10000008 	.word	0x10000008

1a0030e4 <handleMasterXferState>:
{
1a0030e4:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0030e6:	6843      	ldr	r3, [r0, #4]
1a0030e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a0030ec:	2b58      	cmp	r3, #88	; 0x58
1a0030ee:	d87f      	bhi.n	1a0031f0 <handleMasterXferState+0x10c>
1a0030f0:	e8df f003 	tbb	[pc, r3]
1a0030f4:	7e7e7e7a 	.word	0x7e7e7e7a
1a0030f8:	7e7e7e7e 	.word	0x7e7e7e7e
1a0030fc:	7e7e7e2f 	.word	0x7e7e7e2f
1a003100:	7e7e7e7e 	.word	0x7e7e7e7e
1a003104:	7e7e7e2f 	.word	0x7e7e7e2f
1a003108:	7e7e7e7e 	.word	0x7e7e7e7e
1a00310c:	7e7e7e39 	.word	0x7e7e7e39
1a003110:	7e7e7e7e 	.word	0x7e7e7e7e
1a003114:	7e7e7e6e 	.word	0x7e7e7e6e
1a003118:	7e7e7e7e 	.word	0x7e7e7e7e
1a00311c:	7e7e7e39 	.word	0x7e7e7e39
1a003120:	7e7e7e7e 	.word	0x7e7e7e7e
1a003124:	7e7e7e72 	.word	0x7e7e7e72
1a003128:	7e7e7e7e 	.word	0x7e7e7e7e
1a00312c:	7e7e7e76 	.word	0x7e7e7e76
1a003130:	7e7e7e7e 	.word	0x7e7e7e7e
1a003134:	7e7e7e6c 	.word	0x7e7e7e6c
1a003138:	7e7e7e7e 	.word	0x7e7e7e7e
1a00313c:	7e7e7e6e 	.word	0x7e7e7e6e
1a003140:	7e7e7e7e 	.word	0x7e7e7e7e
1a003144:	7e7e7e2d 	.word	0x7e7e7e2d
1a003148:	7e7e7e7e 	.word	0x7e7e7e7e
1a00314c:	4f          	.byte	0x4f
1a00314d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00314e:	233c      	movs	r3, #60	; 0x3c
1a003150:	e020      	b.n	1a003194 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003152:	780a      	ldrb	r2, [r1, #0]
1a003154:	688b      	ldr	r3, [r1, #8]
1a003156:	fab3 f383 	clz	r3, r3
1a00315a:	095b      	lsrs	r3, r3, #5
1a00315c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003160:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003162:	233c      	movs	r3, #60	; 0x3c
		break;
1a003164:	e023      	b.n	1a0031ae <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003166:	688b      	ldr	r3, [r1, #8]
1a003168:	b94b      	cbnz	r3, 1a00317e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00316a:	690b      	ldr	r3, [r1, #16]
1a00316c:	b123      	cbz	r3, 1a003178 <handleMasterXferState+0x94>
1a00316e:	f06f 0320 	mvn.w	r3, #32
1a003172:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003176:	e01a      	b.n	1a0031ae <handleMasterXferState+0xca>
1a003178:	f06f 0310 	mvn.w	r3, #16
1a00317c:	e7f9      	b.n	1a003172 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00317e:	684b      	ldr	r3, [r1, #4]
1a003180:	1c5a      	adds	r2, r3, #1
1a003182:	604a      	str	r2, [r1, #4]
1a003184:	781b      	ldrb	r3, [r3, #0]
1a003186:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003188:	688b      	ldr	r3, [r1, #8]
1a00318a:	3b01      	subs	r3, #1
1a00318c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00318e:	233c      	movs	r3, #60	; 0x3c
1a003190:	e00d      	b.n	1a0031ae <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003192:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003194:	6884      	ldr	r4, [r0, #8]
1a003196:	68ca      	ldr	r2, [r1, #12]
1a003198:	1c55      	adds	r5, r2, #1
1a00319a:	60cd      	str	r5, [r1, #12]
1a00319c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00319e:	690a      	ldr	r2, [r1, #16]
1a0031a0:	3a01      	subs	r2, #1
1a0031a2:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0031a4:	690a      	ldr	r2, [r1, #16]
1a0031a6:	2a01      	cmp	r2, #1
1a0031a8:	dd01      	ble.n	1a0031ae <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0031aa:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0031ae:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0031b2:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0031b4:	f023 0210 	bic.w	r2, r3, #16
1a0031b8:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0031ba:	f013 0f10 	tst.w	r3, #16
1a0031be:	d019      	beq.n	1a0031f4 <handleMasterXferState+0x110>
1a0031c0:	7d0b      	ldrb	r3, [r1, #20]
1a0031c2:	2b02      	cmp	r3, #2
1a0031c4:	d016      	beq.n	1a0031f4 <handleMasterXferState+0x110>
	return 1;
1a0031c6:	2001      	movs	r0, #1
}
1a0031c8:	bc30      	pop	{r4, r5}
1a0031ca:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a0031cc:	233c      	movs	r3, #60	; 0x3c
1a0031ce:	e7e9      	b.n	1a0031a4 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a0031d0:	2305      	movs	r3, #5
1a0031d2:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0031d4:	232c      	movs	r3, #44	; 0x2c
		break;
1a0031d6:	e7ea      	b.n	1a0031ae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0031d8:	2301      	movs	r3, #1
1a0031da:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0031dc:	232c      	movs	r3, #44	; 0x2c
		break;
1a0031de:	e7e6      	b.n	1a0031ae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a0031e0:	2302      	movs	r3, #2
1a0031e2:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a0031e4:	233c      	movs	r3, #60	; 0x3c
		break;
1a0031e6:	e7e2      	b.n	1a0031ae <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a0031e8:	2303      	movs	r3, #3
1a0031ea:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0031ec:	232c      	movs	r3, #44	; 0x2c
1a0031ee:	e7de      	b.n	1a0031ae <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a0031f0:	233c      	movs	r3, #60	; 0x3c
1a0031f2:	e7dc      	b.n	1a0031ae <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0031f4:	7d0b      	ldrb	r3, [r1, #20]
1a0031f6:	2b04      	cmp	r3, #4
1a0031f8:	d001      	beq.n	1a0031fe <handleMasterXferState+0x11a>
		return 0;
1a0031fa:	2000      	movs	r0, #0
1a0031fc:	e7e4      	b.n	1a0031c8 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a0031fe:	2300      	movs	r3, #0
1a003200:	750b      	strb	r3, [r1, #20]
1a003202:	e7fa      	b.n	1a0031fa <handleMasterXferState+0x116>

1a003204 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003204:	b570      	push	{r4, r5, r6, lr}
1a003206:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003208:	4e06      	ldr	r6, [pc, #24]	; (1a003224 <Chip_I2C_Init+0x20>)
1a00320a:	00c4      	lsls	r4, r0, #3
1a00320c:	1a22      	subs	r2, r4, r0
1a00320e:	0093      	lsls	r3, r2, #2
1a003210:	4433      	add	r3, r6
1a003212:	8898      	ldrh	r0, [r3, #4]
1a003214:	f000 fc3e 	bl	1a003a94 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003218:	1b64      	subs	r4, r4, r5
1a00321a:	00a3      	lsls	r3, r4, #2
1a00321c:	58f3      	ldr	r3, [r6, r3]
1a00321e:	226c      	movs	r2, #108	; 0x6c
1a003220:	619a      	str	r2, [r3, #24]
}
1a003222:	bd70      	pop	{r4, r5, r6, pc}
1a003224:	10000008 	.word	0x10000008

1a003228 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00322c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00322e:	4e0b      	ldr	r6, [pc, #44]	; (1a00325c <Chip_I2C_SetClockRate+0x34>)
1a003230:	00c5      	lsls	r5, r0, #3
1a003232:	1a2b      	subs	r3, r5, r0
1a003234:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003238:	eb06 0308 	add.w	r3, r6, r8
1a00323c:	8898      	ldrh	r0, [r3, #4]
1a00323e:	f000 fc43 	bl	1a003ac8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003242:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003246:	f856 3008 	ldr.w	r3, [r6, r8]
1a00324a:	0842      	lsrs	r2, r0, #1
1a00324c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00324e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003252:	691a      	ldr	r2, [r3, #16]
1a003254:	1a80      	subs	r0, r0, r2
1a003256:	6158      	str	r0, [r3, #20]
}
1a003258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00325c:	10000008 	.word	0x10000008

1a003260 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003260:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003264:	009a      	lsls	r2, r3, #2
1a003266:	4b09      	ldr	r3, [pc, #36]	; (1a00328c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003268:	4413      	add	r3, r2
1a00326a:	691b      	ldr	r3, [r3, #16]
1a00326c:	b153      	cbz	r3, 1a003284 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00326e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003272:	0082      	lsls	r2, r0, #2
1a003274:	4b05      	ldr	r3, [pc, #20]	; (1a00328c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003276:	4413      	add	r3, r2
1a003278:	6898      	ldr	r0, [r3, #8]
}
1a00327a:	4288      	cmp	r0, r1
1a00327c:	bf14      	ite	ne
1a00327e:	2000      	movne	r0, #0
1a003280:	2001      	moveq	r0, #1
1a003282:	4770      	bx	lr
		iic->mEvent = event;
1a003284:	4b01      	ldr	r3, [pc, #4]	; (1a00328c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003286:	4413      	add	r3, r2
1a003288:	6099      	str	r1, [r3, #8]
1a00328a:	e7f0      	b.n	1a00326e <Chip_I2C_SetMasterEventHandler+0xe>
1a00328c:	10000008 	.word	0x10000008

1a003290 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003290:	b510      	push	{r4, lr}
1a003292:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003294:	4809      	ldr	r0, [pc, #36]	; (1a0032bc <Chip_I2C_MasterStateHandler+0x2c>)
1a003296:	00e3      	lsls	r3, r4, #3
1a003298:	1b1b      	subs	r3, r3, r4
1a00329a:	009a      	lsls	r2, r3, #2
1a00329c:	1883      	adds	r3, r0, r2
1a00329e:	6919      	ldr	r1, [r3, #16]
1a0032a0:	5880      	ldr	r0, [r0, r2]
1a0032a2:	f7ff ff1f 	bl	1a0030e4 <handleMasterXferState>
1a0032a6:	b940      	cbnz	r0, 1a0032ba <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0032a8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0032ac:	009a      	lsls	r2, r3, #2
1a0032ae:	4b03      	ldr	r3, [pc, #12]	; (1a0032bc <Chip_I2C_MasterStateHandler+0x2c>)
1a0032b0:	4413      	add	r3, r2
1a0032b2:	689b      	ldr	r3, [r3, #8]
1a0032b4:	2102      	movs	r1, #2
1a0032b6:	4620      	mov	r0, r4
1a0032b8:	4798      	blx	r3
	}
}
1a0032ba:	bd10      	pop	{r4, pc}
1a0032bc:	10000008 	.word	0x10000008

1a0032c0 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0032c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0032c4:	0083      	lsls	r3, r0, #2
1a0032c6:	4a03      	ldr	r2, [pc, #12]	; (1a0032d4 <Chip_I2C_IsStateChanged+0x14>)
1a0032c8:	58d3      	ldr	r3, [r2, r3]
1a0032ca:	6818      	ldr	r0, [r3, #0]
}
1a0032cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0032d0:	4770      	bx	lr
1a0032d2:	bf00      	nop
1a0032d4:	10000008 	.word	0x10000008

1a0032d8 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0032d8:	2901      	cmp	r1, #1
1a0032da:	d115      	bne.n	1a003308 <Chip_I2C_EventHandlerPolling+0x30>
{
1a0032dc:	b538      	push	{r3, r4, r5, lr}
1a0032de:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0032e0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0032e4:	009a      	lsls	r2, r3, #2
1a0032e6:	4b09      	ldr	r3, [pc, #36]	; (1a00330c <Chip_I2C_EventHandlerPolling+0x34>)
1a0032e8:	4413      	add	r3, r2
1a0032ea:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a0032ec:	7d2b      	ldrb	r3, [r5, #20]
1a0032ee:	b2db      	uxtb	r3, r3
1a0032f0:	2b04      	cmp	r3, #4
1a0032f2:	d108      	bne.n	1a003306 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a0032f4:	4620      	mov	r0, r4
1a0032f6:	f7ff ffe3 	bl	1a0032c0 <Chip_I2C_IsStateChanged>
1a0032fa:	2800      	cmp	r0, #0
1a0032fc:	d0f6      	beq.n	1a0032ec <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a0032fe:	4620      	mov	r0, r4
1a003300:	f7ff ffc6 	bl	1a003290 <Chip_I2C_MasterStateHandler>
1a003304:	e7f2      	b.n	1a0032ec <Chip_I2C_EventHandlerPolling+0x14>
}
1a003306:	bd38      	pop	{r3, r4, r5, pc}
1a003308:	4770      	bx	lr
1a00330a:	bf00      	nop
1a00330c:	10000008 	.word	0x10000008

1a003310 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003310:	4b09      	ldr	r3, [pc, #36]	; (1a003338 <Chip_UART_GetIndex+0x28>)
1a003312:	4298      	cmp	r0, r3
1a003314:	d009      	beq.n	1a00332a <Chip_UART_GetIndex+0x1a>
1a003316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00331a:	4298      	cmp	r0, r3
1a00331c:	d007      	beq.n	1a00332e <Chip_UART_GetIndex+0x1e>
1a00331e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003322:	4298      	cmp	r0, r3
1a003324:	d005      	beq.n	1a003332 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003326:	2000      	movs	r0, #0
1a003328:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00332a:	2002      	movs	r0, #2
1a00332c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00332e:	2003      	movs	r0, #3
1a003330:	4770      	bx	lr
			return 1;
1a003332:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003334:	4770      	bx	lr
1a003336:	bf00      	nop
1a003338:	400c1000 	.word	0x400c1000

1a00333c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00333c:	b530      	push	{r4, r5, lr}
1a00333e:	b083      	sub	sp, #12
1a003340:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003342:	f7ff ffe5 	bl	1a003310 <Chip_UART_GetIndex>
1a003346:	2301      	movs	r3, #1
1a003348:	461a      	mov	r2, r3
1a00334a:	4619      	mov	r1, r3
1a00334c:	4d0e      	ldr	r5, [pc, #56]	; (1a003388 <Chip_UART_Init+0x4c>)
1a00334e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003352:	f000 fb81 	bl	1a003a58 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003356:	2307      	movs	r3, #7
1a003358:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00335a:	2300      	movs	r3, #0
1a00335c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00335e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003360:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003362:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003364:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003366:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003368:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00336a:	4b08      	ldr	r3, [pc, #32]	; (1a00338c <Chip_UART_Init+0x50>)
1a00336c:	429c      	cmp	r4, r3
1a00336e:	d006      	beq.n	1a00337e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003370:	2303      	movs	r3, #3
1a003372:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003374:	2310      	movs	r3, #16
1a003376:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003378:	9b01      	ldr	r3, [sp, #4]
}
1a00337a:	b003      	add	sp, #12
1a00337c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00337e:	2300      	movs	r3, #0
1a003380:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003382:	69a3      	ldr	r3, [r4, #24]
1a003384:	9301      	str	r3, [sp, #4]
1a003386:	e7f3      	b.n	1a003370 <Chip_UART_Init+0x34>
1a003388:	1a00bde4 	.word	0x1a00bde4
1a00338c:	40082000 	.word	0x40082000

1a003390 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003390:	b538      	push	{r3, r4, r5, lr}
1a003392:	4605      	mov	r5, r0
1a003394:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003396:	f7ff ffbb 	bl	1a003310 <Chip_UART_GetIndex>
1a00339a:	4b0c      	ldr	r3, [pc, #48]	; (1a0033cc <Chip_UART_SetBaud+0x3c>)
1a00339c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0033a0:	f000 fb92 	bl	1a003ac8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0033a4:	0123      	lsls	r3, r4, #4
1a0033a6:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a0033aa:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0033ac:	68ea      	ldr	r2, [r5, #12]
1a0033ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0033b2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0033b4:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0033b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0033ba:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0033bc:	68ea      	ldr	r2, [r5, #12]
1a0033be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0033c2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0033c4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0033c8:	0900      	lsrs	r0, r0, #4
1a0033ca:	bd38      	pop	{r3, r4, r5, pc}
1a0033cc:	1a00bddc 	.word	0x1a00bddc

1a0033d0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0033d4:	b083      	sub	sp, #12
1a0033d6:	9001      	str	r0, [sp, #4]
1a0033d8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0033da:	f7ff ff99 	bl	1a003310 <Chip_UART_GetIndex>
1a0033de:	4b32      	ldr	r3, [pc, #200]	; (1a0034a8 <Chip_UART_SetBaudFDR+0xd8>)
1a0033e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0033e4:	f000 fb70 	bl	1a003ac8 <Chip_Clock_GetRate>
1a0033e8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0033ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0033ee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0033f0:	f04f 0b00 	mov.w	fp, #0
1a0033f4:	46a2      	mov	sl, r4
1a0033f6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0033f8:	e02a      	b.n	1a003450 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0033fa:	4242      	negs	r2, r0
				div ++;
1a0033fc:	1c4b      	adds	r3, r1, #1
1a0033fe:	e017      	b.n	1a003430 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003400:	b30a      	cbz	r2, 1a003446 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003402:	4617      	mov	r7, r2
			sd = d;
1a003404:	46ab      	mov	fp, r5
			sm = m;
1a003406:	46a2      	mov	sl, r4
			sdiv = div;
1a003408:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00340a:	3501      	adds	r5, #1
1a00340c:	42ac      	cmp	r4, r5
1a00340e:	d91e      	bls.n	1a00344e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003410:	0933      	lsrs	r3, r6, #4
1a003412:	0730      	lsls	r0, r6, #28
1a003414:	fba4 0100 	umull	r0, r1, r4, r0
1a003418:	fb04 1103 	mla	r1, r4, r3, r1
1a00341c:	1962      	adds	r2, r4, r5
1a00341e:	fb08 f202 	mul.w	r2, r8, r2
1a003422:	2300      	movs	r3, #0
1a003424:	f002 fe10 	bl	1a006048 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003428:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00342a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00342c:	2800      	cmp	r0, #0
1a00342e:	dbe4      	blt.n	1a0033fa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003430:	4297      	cmp	r7, r2
1a003432:	d3ea      	bcc.n	1a00340a <Chip_UART_SetBaudFDR+0x3a>
1a003434:	2b00      	cmp	r3, #0
1a003436:	d0e8      	beq.n	1a00340a <Chip_UART_SetBaudFDR+0x3a>
1a003438:	0c19      	lsrs	r1, r3, #16
1a00343a:	d1e6      	bne.n	1a00340a <Chip_UART_SetBaudFDR+0x3a>
1a00343c:	2b02      	cmp	r3, #2
1a00343e:	d8df      	bhi.n	1a003400 <Chip_UART_SetBaudFDR+0x30>
1a003440:	2d00      	cmp	r5, #0
1a003442:	d0dd      	beq.n	1a003400 <Chip_UART_SetBaudFDR+0x30>
1a003444:	e7e1      	b.n	1a00340a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003446:	4617      	mov	r7, r2
			sd = d;
1a003448:	46ab      	mov	fp, r5
			sm = m;
1a00344a:	46a2      	mov	sl, r4
			sdiv = div;
1a00344c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00344e:	3401      	adds	r4, #1
1a003450:	b11f      	cbz	r7, 1a00345a <Chip_UART_SetBaudFDR+0x8a>
1a003452:	2c0f      	cmp	r4, #15
1a003454:	d801      	bhi.n	1a00345a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003456:	2500      	movs	r5, #0
1a003458:	e7d8      	b.n	1a00340c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00345a:	f1b9 0f00 	cmp.w	r9, #0
1a00345e:	d01e      	beq.n	1a00349e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003460:	9a01      	ldr	r2, [sp, #4]
1a003462:	4611      	mov	r1, r2
1a003464:	68d3      	ldr	r3, [r2, #12]
1a003466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00346a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00346c:	fa5f f389 	uxtb.w	r3, r9
1a003470:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003472:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003476:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003478:	68d3      	ldr	r3, [r2, #12]
1a00347a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00347e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003480:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003484:	b2db      	uxtb	r3, r3
1a003486:	f00b 020f 	and.w	r2, fp, #15
1a00348a:	4313      	orrs	r3, r2
1a00348c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00348e:	0933      	lsrs	r3, r6, #4
1a003490:	fb0a f303 	mul.w	r3, sl, r3
1a003494:	44da      	add	sl, fp
1a003496:	fb09 f90a 	mul.w	r9, r9, sl
1a00349a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00349e:	4648      	mov	r0, r9
1a0034a0:	b003      	add	sp, #12
1a0034a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0034a6:	bf00      	nop
1a0034a8:	1a00bddc 	.word	0x1a00bddc

1a0034ac <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0034ac:	4b03      	ldr	r3, [pc, #12]	; (1a0034bc <Chip_ADC_GetClockIndex+0x10>)
1a0034ae:	4298      	cmp	r0, r3
1a0034b0:	d001      	beq.n	1a0034b6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0034b2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0034b4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0034b6:	2004      	movs	r0, #4
1a0034b8:	4770      	bx	lr
1a0034ba:	bf00      	nop
1a0034bc:	400e4000 	.word	0x400e4000

1a0034c0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0034c0:	b570      	push	{r4, r5, r6, lr}
1a0034c2:	460d      	mov	r5, r1
1a0034c4:	4614      	mov	r4, r2
1a0034c6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0034c8:	f7ff fff0 	bl	1a0034ac <Chip_ADC_GetClockIndex>
1a0034cc:	f000 fafc 	bl	1a003ac8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0034d0:	b155      	cbz	r5, 1a0034e8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0034d2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0034d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0034da:	0064      	lsls	r4, r4, #1
1a0034dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0034e0:	b2c0      	uxtb	r0, r0
1a0034e2:	3801      	subs	r0, #1
	return div;
}
1a0034e4:	b2c0      	uxtb	r0, r0
1a0034e6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0034e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0034ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0034f0:	e7f1      	b.n	1a0034d6 <getClkDiv+0x16>
1a0034f2:	Address 0x000000001a0034f2 is out of bounds.


1a0034f4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0034f4:	b538      	push	{r3, r4, r5, lr}
1a0034f6:	4605      	mov	r5, r0
1a0034f8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0034fa:	f7ff ffd7 	bl	1a0034ac <Chip_ADC_GetClockIndex>
1a0034fe:	2301      	movs	r3, #1
1a003500:	461a      	mov	r2, r3
1a003502:	4619      	mov	r1, r3
1a003504:	f000 faa8 	bl	1a003a58 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003508:	2100      	movs	r1, #0
1a00350a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00350c:	4a08      	ldr	r2, [pc, #32]	; (1a003530 <Chip_ADC_Init+0x3c>)
1a00350e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003510:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003512:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003514:	230b      	movs	r3, #11
1a003516:	4628      	mov	r0, r5
1a003518:	f7ff ffd2 	bl	1a0034c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00351c:	0200      	lsls	r0, r0, #8
1a00351e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003522:	7920      	ldrb	r0, [r4, #4]
1a003524:	0440      	lsls	r0, r0, #17
1a003526:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00352a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00352c:	6028      	str	r0, [r5, #0]
}
1a00352e:	bd38      	pop	{r3, r4, r5, pc}
1a003530:	00061a80 	.word	0x00061a80

1a003534 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003534:	b570      	push	{r4, r5, r6, lr}
1a003536:	4605      	mov	r5, r0
1a003538:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00353a:	6804      	ldr	r4, [r0, #0]
1a00353c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003540:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003544:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003546:	790b      	ldrb	r3, [r1, #4]
1a003548:	f1c3 030b 	rsb	r3, r3, #11
1a00354c:	b2db      	uxtb	r3, r3
1a00354e:	7949      	ldrb	r1, [r1, #5]
1a003550:	f7ff ffb6 	bl	1a0034c0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003554:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003558:	7933      	ldrb	r3, [r6, #4]
1a00355a:	045b      	lsls	r3, r3, #17
1a00355c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003560:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a003562:	602b      	str	r3, [r5, #0]
}
1a003564:	bd70      	pop	{r4, r5, r6, pc}

1a003566 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003566:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003568:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00356a:	680a      	ldr	r2, [r1, #0]
1a00356c:	f7ff ffe2 	bl	1a003534 <Chip_ADC_SetSampleRate>
}
1a003570:	bd08      	pop	{r3, pc}
1a003572:	Address 0x000000001a003572 is out of bounds.


1a003574 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003574:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003576:	2069      	movs	r0, #105	; 0x69
1a003578:	f000 faa6 	bl	1a003ac8 <Chip_Clock_GetRate>
1a00357c:	4b01      	ldr	r3, [pc, #4]	; (1a003584 <SystemCoreClockUpdate+0x10>)
1a00357e:	6018      	str	r0, [r3, #0]
}
1a003580:	bd08      	pop	{r3, pc}
1a003582:	bf00      	nop
1a003584:	10003890 	.word	0x10003890

1a003588 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003588:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00358a:	680b      	ldr	r3, [r1, #0]
1a00358c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003590:	d002      	beq.n	1a003598 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003596:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003598:	4607      	mov	r7, r0
1a00359a:	2501      	movs	r5, #1
1a00359c:	e03a      	b.n	1a003614 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00359e:	694b      	ldr	r3, [r1, #20]
1a0035a0:	fb03 f302 	mul.w	r3, r3, r2
1a0035a4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0035a8:	e01c      	b.n	1a0035e4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0035aa:	461c      	mov	r4, r3
	if (val < 0)
1a0035ac:	ebb0 0c04 	subs.w	ip, r0, r4
1a0035b0:	d427      	bmi.n	1a003602 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0035b2:	4567      	cmp	r7, ip
1a0035b4:	d906      	bls.n	1a0035c4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0035b6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0035b8:	1c77      	adds	r7, r6, #1
1a0035ba:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0035bc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0035be:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0035c0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0035c2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0035c4:	3201      	adds	r2, #1
1a0035c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0035ca:	dc1d      	bgt.n	1a003608 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0035cc:	680c      	ldr	r4, [r1, #0]
1a0035ce:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0035d2:	d0e4      	beq.n	1a00359e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0035d4:	1c73      	adds	r3, r6, #1
1a0035d6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0035da:	694b      	ldr	r3, [r1, #20]
1a0035dc:	fb03 f30c 	mul.w	r3, r3, ip
1a0035e0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0035e4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a003620 <pll_calc_divs+0x98>
1a0035e8:	4563      	cmp	r3, ip
1a0035ea:	d9eb      	bls.n	1a0035c4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0035ec:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a003624 <pll_calc_divs+0x9c>
1a0035f0:	4563      	cmp	r3, ip
1a0035f2:	d809      	bhi.n	1a003608 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0035f4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0035f8:	d1d7      	bne.n	1a0035aa <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0035fa:	1c74      	adds	r4, r6, #1
1a0035fc:	fa23 f404 	lsr.w	r4, r3, r4
1a003600:	e7d4      	b.n	1a0035ac <pll_calc_divs+0x24>
		return -val;
1a003602:	f1cc 0c00 	rsb	ip, ip, #0
1a003606:	e7d4      	b.n	1a0035b2 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a003608:	3601      	adds	r6, #1
1a00360a:	2e03      	cmp	r6, #3
1a00360c:	dc01      	bgt.n	1a003612 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00360e:	2201      	movs	r2, #1
1a003610:	e7d9      	b.n	1a0035c6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a003612:	3501      	adds	r5, #1
1a003614:	2d04      	cmp	r5, #4
1a003616:	dc01      	bgt.n	1a00361c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a003618:	2600      	movs	r6, #0
1a00361a:	e7f6      	b.n	1a00360a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00361c:	bcf0      	pop	{r4, r5, r6, r7}
1a00361e:	4770      	bx	lr
1a003620:	094c5eff 	.word	0x094c5eff
1a003624:	1312d000 	.word	0x1312d000

1a003628 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003628:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00362a:	b099      	sub	sp, #100	; 0x64
1a00362c:	4605      	mov	r5, r0
1a00362e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003630:	225c      	movs	r2, #92	; 0x5c
1a003632:	2100      	movs	r1, #0
1a003634:	a801      	add	r0, sp, #4
1a003636:	f003 fd1b 	bl	1a007070 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00363a:	2380      	movs	r3, #128	; 0x80
1a00363c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00363e:	6963      	ldr	r3, [r4, #20]
1a003640:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003642:	7923      	ldrb	r3, [r4, #4]
1a003644:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003648:	4669      	mov	r1, sp
1a00364a:	4628      	mov	r0, r5
1a00364c:	f7ff ff9c 	bl	1a003588 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003650:	9b06      	ldr	r3, [sp, #24]
1a003652:	42ab      	cmp	r3, r5
1a003654:	d027      	beq.n	1a0036a6 <pll_get_frac+0x7e>
	if (val < 0)
1a003656:	1aeb      	subs	r3, r5, r3
1a003658:	d42e      	bmi.n	1a0036b8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00365a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00365c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00365e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003662:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003664:	6963      	ldr	r3, [r4, #20]
1a003666:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003668:	7923      	ldrb	r3, [r4, #4]
1a00366a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00366e:	a910      	add	r1, sp, #64	; 0x40
1a003670:	4628      	mov	r0, r5
1a003672:	f7ff ff89 	bl	1a003588 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003676:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003678:	42ab      	cmp	r3, r5
1a00367a:	d01f      	beq.n	1a0036bc <pll_get_frac+0x94>
	if (val < 0)
1a00367c:	1aeb      	subs	r3, r5, r3
1a00367e:	d425      	bmi.n	1a0036cc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003680:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003682:	4b2b      	ldr	r3, [pc, #172]	; (1a003730 <pll_get_frac+0x108>)
1a003684:	429d      	cmp	r5, r3
1a003686:	d923      	bls.n	1a0036d0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00368a:	1aed      	subs	r5, r5, r3
1a00368c:	d433      	bmi.n	1a0036f6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00368e:	42ae      	cmp	r6, r5
1a003690:	dc3b      	bgt.n	1a00370a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003692:	42be      	cmp	r6, r7
1a003694:	dc31      	bgt.n	1a0036fa <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003696:	466d      	mov	r5, sp
1a003698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00369a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00369c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0036a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0036a4:	e006      	b.n	1a0036b4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0036a6:	466d      	mov	r5, sp
1a0036a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0036aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0036ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0036b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0036b4:	b019      	add	sp, #100	; 0x64
1a0036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0036b8:	425b      	negs	r3, r3
1a0036ba:	e7ce      	b.n	1a00365a <pll_get_frac+0x32>
		*ppll = pll[2];
1a0036bc:	ad10      	add	r5, sp, #64	; 0x40
1a0036be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0036c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0036c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0036c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0036ca:	e7f3      	b.n	1a0036b4 <pll_get_frac+0x8c>
		return -val;
1a0036cc:	425b      	negs	r3, r3
1a0036ce:	e7d7      	b.n	1a003680 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0036d0:	2340      	movs	r3, #64	; 0x40
1a0036d2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0036d4:	6963      	ldr	r3, [r4, #20]
1a0036d6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0036d8:	a908      	add	r1, sp, #32
1a0036da:	4628      	mov	r0, r5
1a0036dc:	f7ff ff54 	bl	1a003588 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0036e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0036e2:	42ab      	cmp	r3, r5
1a0036e4:	d1d0      	bne.n	1a003688 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0036e6:	ad08      	add	r5, sp, #32
1a0036e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0036ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0036ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0036f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0036f4:	e7de      	b.n	1a0036b4 <pll_get_frac+0x8c>
		return -val;
1a0036f6:	426d      	negs	r5, r5
1a0036f8:	e7c9      	b.n	1a00368e <pll_get_frac+0x66>
			*ppll = pll[2];
1a0036fa:	ad10      	add	r5, sp, #64	; 0x40
1a0036fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0036fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003700:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003708:	e7d4      	b.n	1a0036b4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00370a:	42af      	cmp	r7, r5
1a00370c:	db07      	blt.n	1a00371e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00370e:	ad08      	add	r5, sp, #32
1a003710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00371c:	e7ca      	b.n	1a0036b4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00371e:	ad10      	add	r5, sp, #64	; 0x40
1a003720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00372c:	e7c2      	b.n	1a0036b4 <pll_get_frac+0x8c>
1a00372e:	bf00      	nop
1a003730:	068e7780 	.word	0x068e7780

1a003734 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003734:	b430      	push	{r4, r5}
1a003736:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003738:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00373a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00373c:	e000      	b.n	1a003740 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00373e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003740:	281c      	cmp	r0, #28
1a003742:	d118      	bne.n	1a003776 <Chip_Clock_FindBaseClock+0x42>
1a003744:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003748:	0051      	lsls	r1, r2, #1
1a00374a:	4a0c      	ldr	r2, [pc, #48]	; (1a00377c <Chip_Clock_FindBaseClock+0x48>)
1a00374c:	440a      	add	r2, r1
1a00374e:	7914      	ldrb	r4, [r2, #4]
1a003750:	4284      	cmp	r4, r0
1a003752:	d010      	beq.n	1a003776 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003754:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003758:	004a      	lsls	r2, r1, #1
1a00375a:	4908      	ldr	r1, [pc, #32]	; (1a00377c <Chip_Clock_FindBaseClock+0x48>)
1a00375c:	5a8a      	ldrh	r2, [r1, r2]
1a00375e:	42aa      	cmp	r2, r5
1a003760:	d8ed      	bhi.n	1a00373e <Chip_Clock_FindBaseClock+0xa>
1a003762:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003766:	0051      	lsls	r1, r2, #1
1a003768:	4a04      	ldr	r2, [pc, #16]	; (1a00377c <Chip_Clock_FindBaseClock+0x48>)
1a00376a:	440a      	add	r2, r1
1a00376c:	8852      	ldrh	r2, [r2, #2]
1a00376e:	42aa      	cmp	r2, r5
1a003770:	d3e5      	bcc.n	1a00373e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003772:	4620      	mov	r0, r4
1a003774:	e7e4      	b.n	1a003740 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003776:	bc30      	pop	{r4, r5}
1a003778:	4770      	bx	lr
1a00377a:	bf00      	nop
1a00377c:	1a00bdf8 	.word	0x1a00bdf8

1a003780 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003780:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003786:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003788:	4a0d      	ldr	r2, [pc, #52]	; (1a0037c0 <Chip_Clock_EnableCrystal+0x40>)
1a00378a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00378c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003790:	6992      	ldr	r2, [r2, #24]
1a003792:	428a      	cmp	r2, r1
1a003794:	d001      	beq.n	1a00379a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003796:	4a0a      	ldr	r2, [pc, #40]	; (1a0037c0 <Chip_Clock_EnableCrystal+0x40>)
1a003798:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00379a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00379e:	4a09      	ldr	r2, [pc, #36]	; (1a0037c4 <Chip_Clock_EnableCrystal+0x44>)
1a0037a0:	6811      	ldr	r1, [r2, #0]
1a0037a2:	4a09      	ldr	r2, [pc, #36]	; (1a0037c8 <Chip_Clock_EnableCrystal+0x48>)
1a0037a4:	4291      	cmp	r1, r2
1a0037a6:	d901      	bls.n	1a0037ac <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0037a8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0037ac:	4a04      	ldr	r2, [pc, #16]	; (1a0037c0 <Chip_Clock_EnableCrystal+0x40>)
1a0037ae:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0037b0:	9b01      	ldr	r3, [sp, #4]
1a0037b2:	1e5a      	subs	r2, r3, #1
1a0037b4:	9201      	str	r2, [sp, #4]
1a0037b6:	2b00      	cmp	r3, #0
1a0037b8:	d1fa      	bne.n	1a0037b0 <Chip_Clock_EnableCrystal+0x30>
}
1a0037ba:	b002      	add	sp, #8
1a0037bc:	4770      	bx	lr
1a0037be:	bf00      	nop
1a0037c0:	40050000 	.word	0x40050000
1a0037c4:	1a00bd60 	.word	0x1a00bd60
1a0037c8:	01312cff 	.word	0x01312cff

1a0037cc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0037cc:	3012      	adds	r0, #18
1a0037ce:	4b05      	ldr	r3, [pc, #20]	; (1a0037e4 <Chip_Clock_GetDividerSource+0x18>)
1a0037d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0037d4:	f010 0f01 	tst.w	r0, #1
1a0037d8:	d102      	bne.n	1a0037e0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0037da:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0037de:	4770      	bx	lr
		return CLKINPUT_PD;
1a0037e0:	2011      	movs	r0, #17
}
1a0037e2:	4770      	bx	lr
1a0037e4:	40050000 	.word	0x40050000

1a0037e8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0037e8:	f100 0212 	add.w	r2, r0, #18
1a0037ec:	4b03      	ldr	r3, [pc, #12]	; (1a0037fc <Chip_Clock_GetDividerDivisor+0x14>)
1a0037ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0037f2:	4b03      	ldr	r3, [pc, #12]	; (1a003800 <Chip_Clock_GetDividerDivisor+0x18>)
1a0037f4:	5c18      	ldrb	r0, [r3, r0]
}
1a0037f6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0037fa:	4770      	bx	lr
1a0037fc:	40050000 	.word	0x40050000
1a003800:	1a00bdf0 	.word	0x1a00bdf0

1a003804 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003804:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003806:	2810      	cmp	r0, #16
1a003808:	d80a      	bhi.n	1a003820 <Chip_Clock_GetClockInputHz+0x1c>
1a00380a:	e8df f000 	tbb	[pc, r0]
1a00380e:	0b44      	.short	0x0b44
1a003810:	0921180d 	.word	0x0921180d
1a003814:	2d2a2724 	.word	0x2d2a2724
1a003818:	34300909 	.word	0x34300909
1a00381c:	3c38      	.short	0x3c38
1a00381e:	40          	.byte	0x40
1a00381f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003820:	2000      	movs	r0, #0
1a003822:	e03a      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003824:	481e      	ldr	r0, [pc, #120]	; (1a0038a0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003826:	e038      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003828:	4b1e      	ldr	r3, [pc, #120]	; (1a0038a4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00382a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00382e:	f003 0307 	and.w	r3, r3, #7
1a003832:	2b04      	cmp	r3, #4
1a003834:	d001      	beq.n	1a00383a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a003836:	481c      	ldr	r0, [pc, #112]	; (1a0038a8 <Chip_Clock_GetClockInputHz+0xa4>)
1a003838:	e02f      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00383a:	2000      	movs	r0, #0
1a00383c:	e02d      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00383e:	4b19      	ldr	r3, [pc, #100]	; (1a0038a4 <Chip_Clock_GetClockInputHz+0xa0>)
1a003840:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003844:	f003 0307 	and.w	r3, r3, #7
1a003848:	2b04      	cmp	r3, #4
1a00384a:	d027      	beq.n	1a00389c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00384c:	4816      	ldr	r0, [pc, #88]	; (1a0038a8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00384e:	e024      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003850:	4b16      	ldr	r3, [pc, #88]	; (1a0038ac <Chip_Clock_GetClockInputHz+0xa8>)
1a003852:	6818      	ldr	r0, [r3, #0]
		break;
1a003854:	e021      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003856:	4b16      	ldr	r3, [pc, #88]	; (1a0038b0 <Chip_Clock_GetClockInputHz+0xac>)
1a003858:	6818      	ldr	r0, [r3, #0]
		break;
1a00385a:	e01e      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00385c:	4b15      	ldr	r3, [pc, #84]	; (1a0038b4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00385e:	6818      	ldr	r0, [r3, #0]
		break;
1a003860:	e01b      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003862:	4b14      	ldr	r3, [pc, #80]	; (1a0038b4 <Chip_Clock_GetClockInputHz+0xb0>)
1a003864:	6858      	ldr	r0, [r3, #4]
		break;
1a003866:	e018      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003868:	f000 f868 	bl	1a00393c <Chip_Clock_GetMainPLLHz>
		break;
1a00386c:	e015      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00386e:	2100      	movs	r1, #0
1a003870:	f000 f89a 	bl	1a0039a8 <Chip_Clock_GetDivRate>
		break;
1a003874:	e011      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003876:	2101      	movs	r1, #1
1a003878:	f000 f896 	bl	1a0039a8 <Chip_Clock_GetDivRate>
		break;
1a00387c:	e00d      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00387e:	2102      	movs	r1, #2
1a003880:	f000 f892 	bl	1a0039a8 <Chip_Clock_GetDivRate>
		break;
1a003884:	e009      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003886:	2103      	movs	r1, #3
1a003888:	f000 f88e 	bl	1a0039a8 <Chip_Clock_GetDivRate>
		break;
1a00388c:	e005      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00388e:	2104      	movs	r1, #4
1a003890:	f000 f88a 	bl	1a0039a8 <Chip_Clock_GetDivRate>
		break;
1a003894:	e001      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a003896:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00389a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00389c:	4806      	ldr	r0, [pc, #24]	; (1a0038b8 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00389e:	e7fc      	b.n	1a00389a <Chip_Clock_GetClockInputHz+0x96>
1a0038a0:	00b71b00 	.word	0x00b71b00
1a0038a4:	40043000 	.word	0x40043000
1a0038a8:	017d7840 	.word	0x017d7840
1a0038ac:	1a00bd34 	.word	0x1a00bd34
1a0038b0:	1a00bd60 	.word	0x1a00bd60
1a0038b4:	100034bc 	.word	0x100034bc
1a0038b8:	02faf080 	.word	0x02faf080

1a0038bc <Chip_Clock_CalcMainPLLValue>:
{
1a0038bc:	b538      	push	{r3, r4, r5, lr}
1a0038be:	4605      	mov	r5, r0
1a0038c0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0038c2:	7908      	ldrb	r0, [r1, #4]
1a0038c4:	f7ff ff9e 	bl	1a003804 <Chip_Clock_GetClockInputHz>
1a0038c8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0038ca:	4b19      	ldr	r3, [pc, #100]	; (1a003930 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0038cc:	442b      	add	r3, r5
1a0038ce:	4a19      	ldr	r2, [pc, #100]	; (1a003934 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0038d0:	4293      	cmp	r3, r2
1a0038d2:	d821      	bhi.n	1a003918 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0038d4:	b318      	cbz	r0, 1a00391e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0038d6:	2380      	movs	r3, #128	; 0x80
1a0038d8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0038da:	2300      	movs	r3, #0
1a0038dc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0038de:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0038e0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0038e4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0038e6:	4a14      	ldr	r2, [pc, #80]	; (1a003938 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0038e8:	4295      	cmp	r5, r2
1a0038ea:	d903      	bls.n	1a0038f4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0038ec:	fb03 f000 	mul.w	r0, r3, r0
1a0038f0:	42a8      	cmp	r0, r5
1a0038f2:	d007      	beq.n	1a003904 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0038f4:	4621      	mov	r1, r4
1a0038f6:	4628      	mov	r0, r5
1a0038f8:	f7ff fe96 	bl	1a003628 <pll_get_frac>
		if (!ppll->nsel) {
1a0038fc:	68a3      	ldr	r3, [r4, #8]
1a0038fe:	b18b      	cbz	r3, 1a003924 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003900:	3b01      	subs	r3, #1
1a003902:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003904:	6923      	ldr	r3, [r4, #16]
1a003906:	b183      	cbz	r3, 1a00392a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003908:	68e2      	ldr	r2, [r4, #12]
1a00390a:	b10a      	cbz	r2, 1a003910 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00390c:	3a01      	subs	r2, #1
1a00390e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003910:	3b01      	subs	r3, #1
1a003912:	6123      	str	r3, [r4, #16]
	return 0;
1a003914:	2000      	movs	r0, #0
}
1a003916:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00391c:	e7fb      	b.n	1a003916 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00391e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003922:	e7f8      	b.n	1a003916 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003928:	e7f5      	b.n	1a003916 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00392e:	e7f2      	b.n	1a003916 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003930:	ff6b3a10 	.word	0xff6b3a10
1a003934:	0b940510 	.word	0x0b940510
1a003938:	094c5eff 	.word	0x094c5eff

1a00393c <Chip_Clock_GetMainPLLHz>:
{
1a00393c:	b530      	push	{r4, r5, lr}
1a00393e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003940:	4d17      	ldr	r5, [pc, #92]	; (1a0039a0 <Chip_Clock_GetMainPLLHz+0x64>)
1a003942:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003944:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003948:	f7ff ff5c 	bl	1a003804 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00394c:	4b15      	ldr	r3, [pc, #84]	; (1a0039a4 <Chip_Clock_GetMainPLLHz+0x68>)
1a00394e:	681b      	ldr	r3, [r3, #0]
1a003950:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003952:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003954:	f013 0f01 	tst.w	r3, #1
1a003958:	d020      	beq.n	1a00399c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00395a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00395e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003962:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003966:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00396a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00396c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00396e:	f10d 0c08 	add.w	ip, sp, #8
1a003972:	4461      	add	r1, ip
1a003974:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003978:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00397c:	d108      	bne.n	1a003990 <Chip_Clock_GetMainPLLHz+0x54>
1a00397e:	b93d      	cbnz	r5, 1a003990 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003980:	0049      	lsls	r1, r1, #1
1a003982:	fbb3 f3f1 	udiv	r3, r3, r1
1a003986:	fbb0 f0f2 	udiv	r0, r0, r2
1a00398a:	fb00 f003 	mul.w	r0, r0, r3
1a00398e:	e003      	b.n	1a003998 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a003990:	fbb0 f0f2 	udiv	r0, r0, r2
1a003994:	fb03 f000 	mul.w	r0, r3, r0
}
1a003998:	b003      	add	sp, #12
1a00399a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a00399c:	2000      	movs	r0, #0
1a00399e:	e7fb      	b.n	1a003998 <Chip_Clock_GetMainPLLHz+0x5c>
1a0039a0:	40050000 	.word	0x40050000
1a0039a4:	1a00bdec 	.word	0x1a00bdec

1a0039a8 <Chip_Clock_GetDivRate>:
{
1a0039a8:	b538      	push	{r3, r4, r5, lr}
1a0039aa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0039ac:	4608      	mov	r0, r1
1a0039ae:	f7ff ff0d 	bl	1a0037cc <Chip_Clock_GetDividerSource>
1a0039b2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0039b4:	4620      	mov	r0, r4
1a0039b6:	f7ff ff17 	bl	1a0037e8 <Chip_Clock_GetDividerDivisor>
1a0039ba:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0039bc:	4628      	mov	r0, r5
1a0039be:	f7ff ff21 	bl	1a003804 <Chip_Clock_GetClockInputHz>
1a0039c2:	3401      	adds	r4, #1
}
1a0039c4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0039c8:	bd38      	pop	{r3, r4, r5, pc}
1a0039ca:	Address 0x000000001a0039ca is out of bounds.


1a0039cc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0039cc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0039ce:	f100 0416 	add.w	r4, r0, #22
1a0039d2:	00a4      	lsls	r4, r4, #2
1a0039d4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0039d8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0039dc:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0039de:	281b      	cmp	r0, #27
1a0039e0:	d813      	bhi.n	1a003a0a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0039e2:	2911      	cmp	r1, #17
1a0039e4:	d01a      	beq.n	1a003a1c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0039e6:	4d0e      	ldr	r5, [pc, #56]	; (1a003a20 <Chip_Clock_SetBaseClock+0x54>)
1a0039e8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0039ea:	b10a      	cbz	r2, 1a0039f0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0039ec:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0039f0:	b10b      	cbz	r3, 1a0039f6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0039f2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0039f6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0039fa:	3016      	adds	r0, #22
1a0039fc:	0080      	lsls	r0, r0, #2
1a0039fe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003a02:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003a06:	6045      	str	r5, [r0, #4]
1a003a08:	e008      	b.n	1a003a1c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003a0a:	f044 0401 	orr.w	r4, r4, #1
1a003a0e:	3016      	adds	r0, #22
1a003a10:	0080      	lsls	r0, r0, #2
1a003a12:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003a16:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003a1a:	6044      	str	r4, [r0, #4]
	}
}
1a003a1c:	bc30      	pop	{r4, r5}
1a003a1e:	4770      	bx	lr
1a003a20:	e0fff7fe 	.word	0xe0fff7fe

1a003a24 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003a24:	281b      	cmp	r0, #27
1a003a26:	d80c      	bhi.n	1a003a42 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003a28:	3016      	adds	r0, #22
1a003a2a:	0080      	lsls	r0, r0, #2
1a003a2c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003a30:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003a34:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003a36:	f010 0f01 	tst.w	r0, #1
1a003a3a:	d104      	bne.n	1a003a46 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003a3c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003a40:	4770      	bx	lr
		return CLKINPUT_PD;
1a003a42:	2011      	movs	r0, #17
1a003a44:	4770      	bx	lr
		return CLKINPUT_PD;
1a003a46:	2011      	movs	r0, #17
}
1a003a48:	4770      	bx	lr

1a003a4a <Chip_Clock_GetBaseClocktHz>:
{
1a003a4a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003a4c:	f7ff ffea 	bl	1a003a24 <Chip_Clock_GetBaseClock>
1a003a50:	f7ff fed8 	bl	1a003804 <Chip_Clock_GetClockInputHz>
}
1a003a54:	bd08      	pop	{r3, pc}
1a003a56:	Address 0x000000001a003a56 is out of bounds.


1a003a58 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003a58:	b971      	cbnz	r1, 1a003a78 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a003a5a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003a5c:	b10a      	cbz	r2, 1a003a62 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003a5e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003a62:	2b02      	cmp	r3, #2
1a003a64:	d00a      	beq.n	1a003a7c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003a66:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003a6a:	d30a      	bcc.n	1a003a82 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003a6c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003a70:	4b06      	ldr	r3, [pc, #24]	; (1a003a8c <Chip_Clock_EnableOpts+0x34>)
1a003a72:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003a76:	4770      	bx	lr
		reg |= (1 << 1);
1a003a78:	2103      	movs	r1, #3
1a003a7a:	e7ef      	b.n	1a003a5c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003a7c:	f041 0120 	orr.w	r1, r1, #32
1a003a80:	e7f1      	b.n	1a003a66 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003a82:	3020      	adds	r0, #32
1a003a84:	4b02      	ldr	r3, [pc, #8]	; (1a003a90 <Chip_Clock_EnableOpts+0x38>)
1a003a86:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003a8a:	4770      	bx	lr
1a003a8c:	40052000 	.word	0x40052000
1a003a90:	40051000 	.word	0x40051000

1a003a94 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003a94:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003a98:	d309      	bcc.n	1a003aae <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003a9a:	4a09      	ldr	r2, [pc, #36]	; (1a003ac0 <Chip_Clock_Enable+0x2c>)
1a003a9c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003aa0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003aa4:	f043 0301 	orr.w	r3, r3, #1
1a003aa8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003aac:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003aae:	4a05      	ldr	r2, [pc, #20]	; (1a003ac4 <Chip_Clock_Enable+0x30>)
1a003ab0:	3020      	adds	r0, #32
1a003ab2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003ab6:	f043 0301 	orr.w	r3, r3, #1
1a003aba:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003abe:	4770      	bx	lr
1a003ac0:	40052000 	.word	0x40052000
1a003ac4:	40051000 	.word	0x40051000

1a003ac8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003ac8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003aca:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003ace:	d309      	bcc.n	1a003ae4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003ad0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003ad4:	4a0d      	ldr	r2, [pc, #52]	; (1a003b0c <Chip_Clock_GetRate+0x44>)
1a003ad6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003ada:	f014 0f01 	tst.w	r4, #1
1a003ade:	d107      	bne.n	1a003af0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003ae0:	2000      	movs	r0, #0
	}

	return rate;
}
1a003ae2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003ae4:	f100 0320 	add.w	r3, r0, #32
1a003ae8:	4a09      	ldr	r2, [pc, #36]	; (1a003b10 <Chip_Clock_GetRate+0x48>)
1a003aea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003aee:	e7f4      	b.n	1a003ada <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003af0:	f7ff fe20 	bl	1a003734 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003af4:	f7ff ffa9 	bl	1a003a4a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003af8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003afc:	d103      	bne.n	1a003b06 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003afe:	2301      	movs	r3, #1
		rate = rate / div;
1a003b00:	fbb0 f0f3 	udiv	r0, r0, r3
1a003b04:	e7ed      	b.n	1a003ae2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003b06:	2302      	movs	r3, #2
1a003b08:	e7fa      	b.n	1a003b00 <Chip_Clock_GetRate+0x38>
1a003b0a:	bf00      	nop
1a003b0c:	40052000 	.word	0x40052000
1a003b10:	40051000 	.word	0x40051000

1a003b14 <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a003b14:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a003b16:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a003b1a:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a003b1e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a003b22:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a003b24:	2401      	movs	r4, #1
1a003b26:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a003b2a:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a003b2e:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a003b32:	fa04 f101 	lsl.w	r1, r4, r1
1a003b36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a003b3a:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a003b3c:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a003b3e:	40a2      	lsls	r2, r4
1a003b40:	2303      	movs	r3, #3
1a003b42:	4093      	lsls	r3, r2
1a003b44:	43db      	mvns	r3, r3
1a003b46:	4019      	ands	r1, r3
1a003b48:	4094      	lsls	r4, r2
1a003b4a:	430c      	orrs	r4, r1
1a003b4c:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a003b4e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a003b50:	4013      	ands	r3, r2
1a003b52:	6543      	str	r3, [r0, #84]	; 0x54
}
1a003b54:	bc30      	pop	{r4, r5}
1a003b56:	4770      	bx	lr

1a003b58 <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a003b58:	b538      	push	{r3, r4, r5, lr}
1a003b5a:	4604      	mov	r4, r0
1a003b5c:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a003b5e:	206d      	movs	r0, #109	; 0x6d
1a003b60:	f7ff ffb2 	bl	1a003ac8 <Chip_Clock_GetRate>
1a003b64:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a003b68:	6863      	ldr	r3, [r4, #4]
1a003b6a:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a003b6e:	6063      	str	r3, [r4, #4]
1a003b70:	6863      	ldr	r3, [r4, #4]
1a003b72:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a003b76:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a003b78:	2300      	movs	r3, #0
1a003b7a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a003b7e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a003b82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a003b86:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a003b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a003b8e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a003b92:	2301      	movs	r3, #1
1a003b94:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a003b98:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a003b9a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a003b9e:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a003ba0:	bd38      	pop	{r3, r4, r5, pc}
1a003ba2:	Address 0x000000001a003ba2 is out of bounds.


1a003ba4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003ba4:	b570      	push	{r4, r5, r6, lr}
1a003ba6:	b08a      	sub	sp, #40	; 0x28
1a003ba8:	4605      	mov	r5, r0
1a003baa:	460e      	mov	r6, r1
1a003bac:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003bae:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003bb2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003bb4:	2806      	cmp	r0, #6
1a003bb6:	d018      	beq.n	1a003bea <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003bb8:	2300      	movs	r3, #0
1a003bba:	2201      	movs	r2, #1
1a003bbc:	4629      	mov	r1, r5
1a003bbe:	2004      	movs	r0, #4
1a003bc0:	f7ff ff04 	bl	1a0039cc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003bc4:	4a4a      	ldr	r2, [pc, #296]	; (1a003cf0 <Chip_SetupCoreClock+0x14c>)
1a003bc6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003bc8:	f043 0301 	orr.w	r3, r3, #1
1a003bcc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003bce:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003bd2:	a901      	add	r1, sp, #4
1a003bd4:	4630      	mov	r0, r6
1a003bd6:	f7ff fe71 	bl	1a0038bc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003bda:	4b46      	ldr	r3, [pc, #280]	; (1a003cf4 <Chip_SetupCoreClock+0x150>)
1a003bdc:	429e      	cmp	r6, r3
1a003bde:	d916      	bls.n	1a003c0e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003be0:	9b01      	ldr	r3, [sp, #4]
1a003be2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003be6:	d003      	beq.n	1a003bf0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003be8:	e7fe      	b.n	1a003be8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003bea:	f7ff fdc9 	bl	1a003780 <Chip_Clock_EnableCrystal>
1a003bee:	e7e3      	b.n	1a003bb8 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003bf0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003bf4:	d005      	beq.n	1a003c02 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003bfa:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003bfc:	2500      	movs	r5, #0
			direct = 1;
1a003bfe:	2601      	movs	r6, #1
1a003c00:	e007      	b.n	1a003c12 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003c02:	9b04      	ldr	r3, [sp, #16]
1a003c04:	3301      	adds	r3, #1
1a003c06:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003c08:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003c0a:	2600      	movs	r6, #0
1a003c0c:	e001      	b.n	1a003c12 <Chip_SetupCoreClock+0x6e>
1a003c0e:	2500      	movs	r5, #0
1a003c10:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003c12:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003c16:	9b01      	ldr	r3, [sp, #4]
1a003c18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003c1c:	9a05      	ldr	r2, [sp, #20]
1a003c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003c22:	9a03      	ldr	r2, [sp, #12]
1a003c24:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003c28:	9a04      	ldr	r2, [sp, #16]
1a003c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003c2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003c32:	4a2f      	ldr	r2, [pc, #188]	; (1a003cf0 <Chip_SetupCoreClock+0x14c>)
1a003c34:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003c36:	4b2e      	ldr	r3, [pc, #184]	; (1a003cf0 <Chip_SetupCoreClock+0x14c>)
1a003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003c3a:	f013 0f01 	tst.w	r3, #1
1a003c3e:	d0fa      	beq.n	1a003c36 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003c40:	2300      	movs	r3, #0
1a003c42:	2201      	movs	r2, #1
1a003c44:	2109      	movs	r1, #9
1a003c46:	2004      	movs	r0, #4
1a003c48:	f7ff fec0 	bl	1a0039cc <Chip_Clock_SetBaseClock>

	if (direct) {
1a003c4c:	b306      	cbz	r6, 1a003c90 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003c4e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003c52:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003c56:	1e5a      	subs	r2, r3, #1
1a003c58:	9209      	str	r2, [sp, #36]	; 0x24
1a003c5a:	2b00      	cmp	r3, #0
1a003c5c:	d1fa      	bne.n	1a003c54 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003c5e:	9b01      	ldr	r3, [sp, #4]
1a003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003c64:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003c66:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003c6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003c6e:	9a05      	ldr	r2, [sp, #20]
1a003c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003c74:	9a03      	ldr	r2, [sp, #12]
1a003c76:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003c7a:	9a04      	ldr	r2, [sp, #16]
1a003c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003c84:	4a1a      	ldr	r2, [pc, #104]	; (1a003cf0 <Chip_SetupCoreClock+0x14c>)
1a003c86:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003c88:	2c00      	cmp	r4, #0
1a003c8a:	d12e      	bne.n	1a003cea <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003c8c:	b00a      	add	sp, #40	; 0x28
1a003c8e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a003c90:	2d00      	cmp	r5, #0
1a003c92:	d0f9      	beq.n	1a003c88 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003c94:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003c98:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003c9c:	1e5a      	subs	r2, r3, #1
1a003c9e:	9209      	str	r2, [sp, #36]	; 0x24
1a003ca0:	2b00      	cmp	r3, #0
1a003ca2:	d1fa      	bne.n	1a003c9a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a003ca4:	9b04      	ldr	r3, [sp, #16]
1a003ca6:	1e5a      	subs	r2, r3, #1
1a003ca8:	9204      	str	r2, [sp, #16]
1a003caa:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003cae:	9b01      	ldr	r3, [sp, #4]
1a003cb0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003cb4:	9905      	ldr	r1, [sp, #20]
1a003cb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003cba:	9903      	ldr	r1, [sp, #12]
1a003cbc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003cc8:	4a09      	ldr	r2, [pc, #36]	; (1a003cf0 <Chip_SetupCoreClock+0x14c>)
1a003cca:	6453      	str	r3, [r2, #68]	; 0x44
1a003ccc:	e7dc      	b.n	1a003c88 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003cce:	480a      	ldr	r0, [pc, #40]	; (1a003cf8 <Chip_SetupCoreClock+0x154>)
1a003cd0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003cd4:	78cb      	ldrb	r3, [r1, #3]
1a003cd6:	788a      	ldrb	r2, [r1, #2]
1a003cd8:	7849      	ldrb	r1, [r1, #1]
1a003cda:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003cde:	f7ff fe75 	bl	1a0039cc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003ce2:	3401      	adds	r4, #1
1a003ce4:	2c11      	cmp	r4, #17
1a003ce6:	d9f2      	bls.n	1a003cce <Chip_SetupCoreClock+0x12a>
1a003ce8:	e7d0      	b.n	1a003c8c <Chip_SetupCoreClock+0xe8>
1a003cea:	2400      	movs	r4, #0
1a003cec:	e7fa      	b.n	1a003ce4 <Chip_SetupCoreClock+0x140>
1a003cee:	bf00      	nop
1a003cf0:	40050000 	.word	0x40050000
1a003cf4:	068e7780 	.word	0x068e7780
1a003cf8:	1a00be64 	.word	0x1a00be64

1a003cfc <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003cfc:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a003cfe:	6843      	ldr	r3, [r0, #4]
1a003d00:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d04:	2b30      	cmp	r3, #48	; 0x30
1a003d06:	d04c      	beq.n	1a003da2 <Chip_I2CM_XferHandler+0xa6>
1a003d08:	d908      	bls.n	1a003d1c <Chip_I2CM_XferHandler+0x20>
1a003d0a:	2b48      	cmp	r3, #72	; 0x48
1a003d0c:	d06c      	beq.n	1a003de8 <Chip_I2CM_XferHandler+0xec>
1a003d0e:	d934      	bls.n	1a003d7a <Chip_I2CM_XferHandler+0x7e>
1a003d10:	2b58      	cmp	r3, #88	; 0x58
1a003d12:	d058      	beq.n	1a003dc6 <Chip_I2CM_XferHandler+0xca>
1a003d14:	2bf8      	cmp	r3, #248	; 0xf8
1a003d16:	d13e      	bne.n	1a003d96 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a003d18:	2000      	movs	r0, #0
1a003d1a:	e02b      	b.n	1a003d74 <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d1c:	2b10      	cmp	r3, #16
1a003d1e:	d016      	beq.n	1a003d4e <Chip_I2CM_XferHandler+0x52>
1a003d20:	d90e      	bls.n	1a003d40 <Chip_I2CM_XferHandler+0x44>
1a003d22:	2b20      	cmp	r3, #32
1a003d24:	d03d      	beq.n	1a003da2 <Chip_I2CM_XferHandler+0xa6>
1a003d26:	2b28      	cmp	r3, #40	; 0x28
1a003d28:	d001      	beq.n	1a003d2e <Chip_I2CM_XferHandler+0x32>
1a003d2a:	2b18      	cmp	r3, #24
1a003d2c:	d135      	bne.n	1a003d9a <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a003d2e:	888b      	ldrh	r3, [r1, #4]
1a003d30:	2b00      	cmp	r3, #0
1a003d32:	d13e      	bne.n	1a003db2 <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a003d34:	88cb      	ldrh	r3, [r1, #6]
1a003d36:	2b00      	cmp	r3, #0
1a003d38:	d15e      	bne.n	1a003df8 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a003d3a:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003d3c:	232c      	movs	r3, #44	; 0x2c
1a003d3e:	e00f      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d40:	b91b      	cbnz	r3, 1a003d4a <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003d42:	2303      	movs	r3, #3
1a003d44:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003d46:	232c      	movs	r3, #44	; 0x2c
        break;
1a003d48:	e00a      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d4a:	2b08      	cmp	r3, #8
1a003d4c:	d125      	bne.n	1a003d9a <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003d4e:	780a      	ldrb	r2, [r1, #0]
1a003d50:	888b      	ldrh	r3, [r1, #4]
1a003d52:	fab3 f383 	clz	r3, r3
1a003d56:	095b      	lsrs	r3, r3, #5
1a003d58:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003d5c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d5e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003d60:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003d64:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003d66:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a003d6a:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a003d6c:	8848      	ldrh	r0, [r1, #2]
1a003d6e:	38ff      	subs	r0, #255	; 0xff
1a003d70:	bf18      	it	ne
1a003d72:	2001      	movne	r0, #1
}
1a003d74:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003d78:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d7a:	2b38      	cmp	r3, #56	; 0x38
1a003d7c:	d038      	beq.n	1a003df0 <Chip_I2CM_XferHandler+0xf4>
1a003d7e:	2b40      	cmp	r3, #64	; 0x40
1a003d80:	d10b      	bne.n	1a003d9a <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003d82:	88ca      	ldrh	r2, [r1, #6]
1a003d84:	2a01      	cmp	r2, #1
1a003d86:	d927      	bls.n	1a003dd8 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a003d88:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a003d8a:	2a00      	cmp	r2, #0
1a003d8c:	d1e8      	bne.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a003d8e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003d90:	f023 0310 	bic.w	r3, r3, #16
1a003d94:	e7e4      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003d96:	2b50      	cmp	r3, #80	; 0x50
1a003d98:	d015      	beq.n	1a003dc6 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a003d9a:	2301      	movs	r3, #1
1a003d9c:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003d9e:	232c      	movs	r3, #44	; 0x2c
        break;
1a003da0:	e7de      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003da2:	784b      	ldrb	r3, [r1, #1]
1a003da4:	f013 0f01 	tst.w	r3, #1
1a003da8:	d1c1      	bne.n	1a003d2e <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a003daa:	2302      	movs	r3, #2
1a003dac:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003dae:	232c      	movs	r3, #44	; 0x2c
			break;
1a003db0:	e7d6      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a003db2:	688b      	ldr	r3, [r1, #8]
1a003db4:	1c5a      	adds	r2, r3, #1
1a003db6:	608a      	str	r2, [r1, #8]
1a003db8:	781b      	ldrb	r3, [r3, #0]
1a003dba:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003dbc:	888b      	ldrh	r3, [r1, #4]
1a003dbe:	3b01      	subs	r3, #1
1a003dc0:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003dc2:	233c      	movs	r3, #60	; 0x3c
1a003dc4:	e7cc      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a003dc6:	6882      	ldr	r2, [r0, #8]
1a003dc8:	68cb      	ldr	r3, [r1, #12]
1a003dca:	1c5c      	adds	r4, r3, #1
1a003dcc:	60cc      	str	r4, [r1, #12]
1a003dce:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003dd0:	88cb      	ldrh	r3, [r1, #6]
1a003dd2:	3b01      	subs	r3, #1
1a003dd4:	80cb      	strh	r3, [r1, #6]
1a003dd6:	e7d4      	b.n	1a003d82 <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003dd8:	784b      	ldrb	r3, [r1, #1]
1a003dda:	f013 0f02 	tst.w	r3, #2
1a003dde:	d101      	bne.n	1a003de4 <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a003de0:	233c      	movs	r3, #60	; 0x3c
1a003de2:	e7d2      	b.n	1a003d8a <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a003de4:	2338      	movs	r3, #56	; 0x38
1a003de6:	e7d0      	b.n	1a003d8a <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003de8:	2304      	movs	r3, #4
1a003dea:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003dec:	232c      	movs	r3, #44	; 0x2c
		break;
1a003dee:	e7b7      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003df0:	2305      	movs	r3, #5
1a003df2:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003df4:	233c      	movs	r3, #60	; 0x3c
		break;
1a003df6:	e7b3      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a003df8:	231c      	movs	r3, #28
1a003dfa:	e7b1      	b.n	1a003d60 <Chip_I2CM_XferHandler+0x64>

1a003dfc <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003dfc:	23ff      	movs	r3, #255	; 0xff
1a003dfe:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003e00:	232c      	movs	r3, #44	; 0x2c
1a003e02:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003e04:	2360      	movs	r3, #96	; 0x60
1a003e06:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003e08:	4770      	bx	lr

1a003e0a <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003e0a:	b538      	push	{r3, r4, r5, lr}
1a003e0c:	4604      	mov	r4, r0
1a003e0e:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003e10:	f7ff fff4 	bl	1a003dfc <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003e14:	2000      	movs	r0, #0

	while (ret == 0) {
1a003e16:	e003      	b.n	1a003e20 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003e18:	4629      	mov	r1, r5
1a003e1a:	4620      	mov	r0, r4
1a003e1c:	f7ff ff6e 	bl	1a003cfc <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003e20:	b920      	cbnz	r0, 1a003e2c <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a003e22:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003e24:	f013 0f08 	tst.w	r3, #8
1a003e28:	d0fb      	beq.n	1a003e22 <Chip_I2CM_XferBlocking+0x18>
1a003e2a:	e7f5      	b.n	1a003e18 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003e2c:	bd38      	pop	{r3, r4, r5, pc}

1a003e2e <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a003e2e:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a003e30:	2301      	movs	r3, #1
1a003e32:	461a      	mov	r2, r3
1a003e34:	4619      	mov	r1, r3
1a003e36:	206d      	movs	r0, #109	; 0x6d
1a003e38:	f7ff fe0e 	bl	1a003a58 <Chip_Clock_EnableOpts>
}
1a003e3c:	bd08      	pop	{r3, pc}

1a003e3e <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003e3e:	4770      	bx	lr

1a003e40 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003e40:	4b03      	ldr	r3, [pc, #12]	; (1a003e50 <Chip_SSP_GetClockIndex+0x10>)
1a003e42:	4298      	cmp	r0, r3
1a003e44:	d001      	beq.n	1a003e4a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003e46:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003e48:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003e4a:	20a5      	movs	r0, #165	; 0xa5
1a003e4c:	4770      	bx	lr
1a003e4e:	bf00      	nop
1a003e50:	400c5000 	.word	0x400c5000

1a003e54 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003e54:	4b04      	ldr	r3, [pc, #16]	; (1a003e68 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003e56:	4298      	cmp	r0, r3
1a003e58:	d002      	beq.n	1a003e60 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003e5a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003e5e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003e60:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003e64:	4770      	bx	lr
1a003e66:	bf00      	nop
1a003e68:	400c5000 	.word	0x400c5000

1a003e6c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003e6c:	6803      	ldr	r3, [r0, #0]
1a003e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003e72:	0209      	lsls	r1, r1, #8
1a003e74:	b289      	uxth	r1, r1
1a003e76:	4319      	orrs	r1, r3
1a003e78:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003e7a:	6102      	str	r2, [r0, #16]
}
1a003e7c:	4770      	bx	lr

1a003e7e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003e7e:	b570      	push	{r4, r5, r6, lr}
1a003e80:	4606      	mov	r6, r0
1a003e82:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003e84:	f7ff ffe6 	bl	1a003e54 <Chip_SSP_GetPeriphClockIndex>
1a003e88:	f7ff fe1e 	bl	1a003ac8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003e8c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003e92:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003e94:	e000      	b.n	1a003e98 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003e96:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003e98:	42ab      	cmp	r3, r5
1a003e9a:	d90b      	bls.n	1a003eb4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003e9c:	1c4c      	adds	r4, r1, #1
1a003e9e:	fb02 f304 	mul.w	r3, r2, r4
1a003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003ea6:	429d      	cmp	r5, r3
1a003ea8:	d2f6      	bcs.n	1a003e98 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003eaa:	2cff      	cmp	r4, #255	; 0xff
1a003eac:	d9f3      	bls.n	1a003e96 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003eae:	3202      	adds	r2, #2
				cr0_div = 0;
1a003eb0:	2100      	movs	r1, #0
1a003eb2:	e7f1      	b.n	1a003e98 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003eb4:	4630      	mov	r0, r6
1a003eb6:	f7ff ffd9 	bl	1a003e6c <Chip_SSP_SetClockRate>
}
1a003eba:	bd70      	pop	{r4, r5, r6, pc}

1a003ebc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003ebc:	b510      	push	{r4, lr}
1a003ebe:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003ec0:	f7ff ffbe 	bl	1a003e40 <Chip_SSP_GetClockIndex>
1a003ec4:	f7ff fde6 	bl	1a003a94 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003ec8:	4620      	mov	r0, r4
1a003eca:	f7ff ffc3 	bl	1a003e54 <Chip_SSP_GetPeriphClockIndex>
1a003ece:	f7ff fde1 	bl	1a003a94 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003ed2:	6863      	ldr	r3, [r4, #4]
1a003ed4:	f023 0304 	bic.w	r3, r3, #4
1a003ed8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003eda:	6823      	ldr	r3, [r4, #0]
1a003edc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003ee0:	f043 0307 	orr.w	r3, r3, #7
1a003ee4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003ee6:	4902      	ldr	r1, [pc, #8]	; (1a003ef0 <Chip_SSP_Init+0x34>)
1a003ee8:	4620      	mov	r0, r4
1a003eea:	f7ff ffc8 	bl	1a003e7e <Chip_SSP_SetBitRate>
}
1a003eee:	bd10      	pop	{r4, pc}
1a003ef0:	000186a0 	.word	0x000186a0

1a003ef4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003ef4:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003ef6:	4a0b      	ldr	r2, [pc, #44]	; (1a003f24 <SystemInit+0x30>)
1a003ef8:	4b0b      	ldr	r3, [pc, #44]	; (1a003f28 <SystemInit+0x34>)
1a003efa:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003efc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003f00:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003f02:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003f06:	2b20      	cmp	r3, #32
1a003f08:	d004      	beq.n	1a003f14 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003f0a:	f7ff f8d5 	bl	1a0030b8 <Board_SystemInit>
   Board_Init();
1a003f0e:	f7ff f85b 	bl	1a002fc8 <Board_Init>
}
1a003f12:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003f14:	4a04      	ldr	r2, [pc, #16]	; (1a003f28 <SystemInit+0x34>)
1a003f16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003f1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003f1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003f22:	e7f2      	b.n	1a003f0a <SystemInit+0x16>
1a003f24:	1a000000 	.word	0x1a000000
1a003f28:	e000ed00 	.word	0xe000ed00

1a003f2c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003f2c:	4b04      	ldr	r3, [pc, #16]	; (1a003f40 <cyclesCounterInit+0x14>)
1a003f2e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003f30:	4a04      	ldr	r2, [pc, #16]	; (1a003f44 <cyclesCounterInit+0x18>)
1a003f32:	6813      	ldr	r3, [r2, #0]
1a003f34:	f043 0301 	orr.w	r3, r3, #1
1a003f38:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003f3a:	2001      	movs	r0, #1
1a003f3c:	4770      	bx	lr
1a003f3e:	bf00      	nop
1a003f40:	10000040 	.word	0x10000040
1a003f44:	e0001000 	.word	0xe0001000

1a003f48 <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a003f48:	b510      	push	{r4, lr}
1a003f4a:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a003f4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003f50:	f7ff ff6d 	bl	1a003e2e <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a003f54:	4621      	mov	r1, r4
1a003f56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003f5a:	f7ff fdfd 	bl	1a003b58 <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a003f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a003f62:	6853      	ldr	r3, [r2, #4]
1a003f64:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a003f68:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a003f6a:	bd10      	pop	{r4, pc}

1a003f6c <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a003f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a003f74:	fb03 f000 	mul.w	r0, r3, r0
1a003f78:	4b02      	ldr	r3, [pc, #8]	; (1a003f84 <Sct_Uint8ToTicks+0x18>)
1a003f7a:	fba3 3000 	umull	r3, r0, r3, r0
}
1a003f7e:	09c0      	lsrs	r0, r0, #7
1a003f80:	4770      	bx	lr
1a003f82:	bf00      	nop
1a003f84:	80808081 	.word	0x80808081

1a003f88 <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a003f88:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a003f8a:	3001      	adds	r0, #1
1a003f8c:	b2c4      	uxtb	r4, r0
1a003f8e:	4608      	mov	r0, r1
1a003f90:	f7ff ffec 	bl	1a003f6c <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a003f94:	3480      	adds	r4, #128	; 0x80
1a003f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003f9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a003f9e:	bd10      	pop	{r4, pc}

1a003fa0 <Sct_EnablePwmFor>:
{
1a003fa0:	b510      	push	{r4, lr}
1a003fa2:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a003fa4:	4a0f      	ldr	r2, [pc, #60]	; (1a003fe4 <Sct_EnablePwmFor+0x44>)
1a003fa6:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a003faa:	b2db      	uxtb	r3, r3
1a003fac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a003fb0:	f992 2001 	ldrsb.w	r2, [r2, #1]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003fb4:	015b      	lsls	r3, r3, #5
1a003fb6:	fa53 f382 	uxtab	r3, r3, r2
1a003fba:	4a0b      	ldr	r2, [pc, #44]	; (1a003fe8 <Sct_EnablePwmFor+0x48>)
1a003fbc:	2111      	movs	r1, #17
1a003fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a003fc2:	1c41      	adds	r1, r0, #1
1a003fc4:	4602      	mov	r2, r0
1a003fc6:	b2c9      	uxtb	r1, r1
1a003fc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a003fcc:	f7ff fda2 	bl	1a003b14 <Chip_SCTPWM_SetOutPin>
1a003fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a003fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a003fd8:	2100      	movs	r1, #0
1a003fda:	4620      	mov	r0, r4
1a003fdc:	f7ff ffd4 	bl	1a003f88 <Sct_SetDutyCycle>
}
1a003fe0:	bd10      	pop	{r4, pc}
1a003fe2:	bf00      	nop
1a003fe4:	1a00beac 	.word	0x1a00beac
1a003fe8:	40086000 	.word	0x40086000

1a003fec <uartProcessIRQ>:
{
1a003fec:	b570      	push	{r4, r5, r6, lr}
1a003fee:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003ff0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003ff4:	0093      	lsls	r3, r2, #2
1a003ff6:	4a1f      	ldr	r2, [pc, #124]	; (1a004074 <uartProcessIRQ+0x88>)
1a003ff8:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003ffa:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003ffc:	b2ed      	uxtb	r5, r5
1a003ffe:	f015 0f01 	tst.w	r5, #1
1a004002:	d009      	beq.n	1a004018 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a004004:	b920      	cbnz	r0, 1a004010 <uartProcessIRQ+0x24>
1a004006:	4b1c      	ldr	r3, [pc, #112]	; (1a004078 <uartProcessIRQ+0x8c>)
1a004008:	681b      	ldr	r3, [r3, #0]
1a00400a:	b10b      	cbz	r3, 1a004010 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a00400c:	2000      	movs	r0, #0
1a00400e:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a004010:	2c03      	cmp	r4, #3
1a004012:	d013      	beq.n	1a00403c <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a004014:	2c05      	cmp	r4, #5
1a004016:	d018      	beq.n	1a00404a <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a004018:	f015 0f20 	tst.w	r5, #32
1a00401c:	d00d      	beq.n	1a00403a <uartProcessIRQ+0x4e>
	return pUART->IER;
1a00401e:	6873      	ldr	r3, [r6, #4]
1a004020:	f013 0f02 	tst.w	r3, #2
1a004024:	d009      	beq.n	1a00403a <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a004026:	b924      	cbnz	r4, 1a004032 <uartProcessIRQ+0x46>
1a004028:	4b14      	ldr	r3, [pc, #80]	; (1a00407c <uartProcessIRQ+0x90>)
1a00402a:	681b      	ldr	r3, [r3, #0]
1a00402c:	b10b      	cbz	r3, 1a004032 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a00402e:	2000      	movs	r0, #0
1a004030:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a004032:	2c03      	cmp	r4, #3
1a004034:	d010      	beq.n	1a004058 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004036:	2c05      	cmp	r4, #5
1a004038:	d015      	beq.n	1a004066 <uartProcessIRQ+0x7a>
}
1a00403a:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00403c:	4b10      	ldr	r3, [pc, #64]	; (1a004080 <uartProcessIRQ+0x94>)
1a00403e:	681b      	ldr	r3, [r3, #0]
1a004040:	2b00      	cmp	r3, #0
1a004042:	d0e7      	beq.n	1a004014 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a004044:	2000      	movs	r0, #0
1a004046:	4798      	blx	r3
1a004048:	e7e4      	b.n	1a004014 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00404a:	4b0e      	ldr	r3, [pc, #56]	; (1a004084 <uartProcessIRQ+0x98>)
1a00404c:	681b      	ldr	r3, [r3, #0]
1a00404e:	2b00      	cmp	r3, #0
1a004050:	d0e2      	beq.n	1a004018 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a004052:	2000      	movs	r0, #0
1a004054:	4798      	blx	r3
1a004056:	e7df      	b.n	1a004018 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a004058:	4b0b      	ldr	r3, [pc, #44]	; (1a004088 <uartProcessIRQ+0x9c>)
1a00405a:	681b      	ldr	r3, [r3, #0]
1a00405c:	2b00      	cmp	r3, #0
1a00405e:	d0ea      	beq.n	1a004036 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a004060:	2000      	movs	r0, #0
1a004062:	4798      	blx	r3
1a004064:	e7e7      	b.n	1a004036 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004066:	4b09      	ldr	r3, [pc, #36]	; (1a00408c <uartProcessIRQ+0xa0>)
1a004068:	681b      	ldr	r3, [r3, #0]
1a00406a:	2b00      	cmp	r3, #0
1a00406c:	d0e5      	beq.n	1a00403a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a00406e:	2000      	movs	r0, #0
1a004070:	4798      	blx	r3
}
1a004072:	e7e2      	b.n	1a00403a <uartProcessIRQ+0x4e>
1a004074:	1a00bec8 	.word	0x1a00bec8
1a004078:	100034c4 	.word	0x100034c4
1a00407c:	100034d0 	.word	0x100034d0
1a004080:	100034c8 	.word	0x100034c8
1a004084:	100034cc 	.word	0x100034cc
1a004088:	100034d4 	.word	0x100034d4
1a00408c:	100034d8 	.word	0x100034d8

1a004090 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a004090:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004094:	0083      	lsls	r3, r0, #2
1a004096:	4a03      	ldr	r2, [pc, #12]	; (1a0040a4 <uartRxReady+0x14>)
1a004098:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00409a:	6958      	ldr	r0, [r3, #20]
}
1a00409c:	f000 0001 	and.w	r0, r0, #1
1a0040a0:	4770      	bx	lr
1a0040a2:	bf00      	nop
1a0040a4:	1a00bec8 	.word	0x1a00bec8

1a0040a8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0040a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040ac:	0083      	lsls	r3, r0, #2
1a0040ae:	4a03      	ldr	r2, [pc, #12]	; (1a0040bc <uartTxReady+0x14>)
1a0040b0:	58d3      	ldr	r3, [r2, r3]
1a0040b2:	6958      	ldr	r0, [r3, #20]
}
1a0040b4:	f000 0020 	and.w	r0, r0, #32
1a0040b8:	4770      	bx	lr
1a0040ba:	bf00      	nop
1a0040bc:	1a00bec8 	.word	0x1a00bec8

1a0040c0 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0040c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040c4:	0083      	lsls	r3, r0, #2
1a0040c6:	4a02      	ldr	r2, [pc, #8]	; (1a0040d0 <uartRxRead+0x10>)
1a0040c8:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0040ca:	6818      	ldr	r0, [r3, #0]
}
1a0040cc:	b2c0      	uxtb	r0, r0
1a0040ce:	4770      	bx	lr
1a0040d0:	1a00bec8 	.word	0x1a00bec8

1a0040d4 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0040d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040d8:	0083      	lsls	r3, r0, #2
1a0040da:	4a02      	ldr	r2, [pc, #8]	; (1a0040e4 <uartTxWrite+0x10>)
1a0040dc:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0040de:	6019      	str	r1, [r3, #0]
}
1a0040e0:	4770      	bx	lr
1a0040e2:	bf00      	nop
1a0040e4:	1a00bec8 	.word	0x1a00bec8

1a0040e8 <uartInit>:
{
1a0040e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0040ec:	4680      	mov	r8, r0
1a0040ee:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0040f0:	4c19      	ldr	r4, [pc, #100]	; (1a004158 <uartInit+0x70>)
1a0040f2:	0045      	lsls	r5, r0, #1
1a0040f4:	182a      	adds	r2, r5, r0
1a0040f6:	0093      	lsls	r3, r2, #2
1a0040f8:	18e6      	adds	r6, r4, r3
1a0040fa:	58e7      	ldr	r7, [r4, r3]
1a0040fc:	4638      	mov	r0, r7
1a0040fe:	f7ff f91d 	bl	1a00333c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004102:	4649      	mov	r1, r9
1a004104:	4638      	mov	r0, r7
1a004106:	f7ff f943 	bl	1a003390 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00410a:	2307      	movs	r3, #7
1a00410c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00410e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004110:	2301      	movs	r3, #1
1a004112:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004114:	7930      	ldrb	r0, [r6, #4]
1a004116:	7973      	ldrb	r3, [r6, #5]
1a004118:	79b2      	ldrb	r2, [r6, #6]
1a00411a:	f042 0218 	orr.w	r2, r2, #24
1a00411e:	490f      	ldr	r1, [pc, #60]	; (1a00415c <uartInit+0x74>)
1a004120:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004128:	79f0      	ldrb	r0, [r6, #7]
1a00412a:	7a33      	ldrb	r3, [r6, #8]
1a00412c:	7a72      	ldrb	r2, [r6, #9]
1a00412e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004132:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00413a:	f1b8 0f01 	cmp.w	r8, #1
1a00413e:	d001      	beq.n	1a004144 <uartInit+0x5c>
}
1a004140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004144:	4a06      	ldr	r2, [pc, #24]	; (1a004160 <uartInit+0x78>)
1a004146:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004148:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00414c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00414e:	221a      	movs	r2, #26
1a004150:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004154:	e7f4      	b.n	1a004140 <uartInit+0x58>
1a004156:	bf00      	nop
1a004158:	1a00bec8 	.word	0x1a00bec8
1a00415c:	40086000 	.word	0x40086000
1a004160:	40081000 	.word	0x40081000

1a004164 <uartReadByte>:
{
1a004164:	b538      	push	{r3, r4, r5, lr}
1a004166:	4605      	mov	r5, r0
1a004168:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a00416a:	f7ff ff91 	bl	1a004090 <uartRxReady>
1a00416e:	4603      	mov	r3, r0
1a004170:	b908      	cbnz	r0, 1a004176 <uartReadByte+0x12>
}
1a004172:	4618      	mov	r0, r3
1a004174:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a004176:	4628      	mov	r0, r5
1a004178:	f7ff ffa2 	bl	1a0040c0 <uartRxRead>
1a00417c:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00417e:	2301      	movs	r3, #1
1a004180:	e7f7      	b.n	1a004172 <uartReadByte+0xe>

1a004182 <uartWriteByte>:
{
1a004182:	b538      	push	{r3, r4, r5, lr}
1a004184:	4604      	mov	r4, r0
1a004186:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a004188:	4620      	mov	r0, r4
1a00418a:	f7ff ff8d 	bl	1a0040a8 <uartTxReady>
1a00418e:	2800      	cmp	r0, #0
1a004190:	d0fa      	beq.n	1a004188 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a004192:	4629      	mov	r1, r5
1a004194:	4620      	mov	r0, r4
1a004196:	f7ff ff9d 	bl	1a0040d4 <uartTxWrite>
}
1a00419a:	bd38      	pop	{r3, r4, r5, pc}

1a00419c <uartWriteString>:
{
1a00419c:	b538      	push	{r3, r4, r5, lr}
1a00419e:	4605      	mov	r5, r0
1a0041a0:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0041a2:	7821      	ldrb	r1, [r4, #0]
1a0041a4:	b121      	cbz	r1, 1a0041b0 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a0041a6:	4628      	mov	r0, r5
1a0041a8:	f7ff ffeb 	bl	1a004182 <uartWriteByte>
      str++;
1a0041ac:	3401      	adds	r4, #1
1a0041ae:	e7f8      	b.n	1a0041a2 <uartWriteString+0x6>
}
1a0041b0:	bd38      	pop	{r3, r4, r5, pc}

1a0041b2 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0041b2:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0041b4:	2003      	movs	r0, #3
1a0041b6:	f7ff ff19 	bl	1a003fec <uartProcessIRQ>
}
1a0041ba:	bd08      	pop	{r3, pc}

1a0041bc <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0041bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0041be:	2005      	movs	r0, #5
1a0041c0:	f7ff ff14 	bl	1a003fec <uartProcessIRQ>
}
1a0041c4:	bd08      	pop	{r3, pc}

1a0041c6 <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a0041c6:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a0041c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0041cc:	f7ff febc 	bl	1a003f48 <Sct_Init>
}
1a0041d0:	bd08      	pop	{r3, pc}
1a0041d2:	Address 0x000000001a0041d2 is out of bounds.


1a0041d4 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a0041d4:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a0041d6:	2b0a      	cmp	r3, #10
1a0041d8:	d806      	bhi.n	1a0041e8 <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a0041da:	4a07      	ldr	r2, [pc, #28]	; (1a0041f8 <pwmIsAttached+0x24>)
1a0041dc:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a0041de:	4282      	cmp	r2, r0
1a0041e0:	d002      	beq.n	1a0041e8 <pwmIsAttached+0x14>
      position++;
1a0041e2:	3301      	adds	r3, #1
1a0041e4:	b2db      	uxtb	r3, r3
1a0041e6:	e7f6      	b.n	1a0041d6 <pwmIsAttached+0x2>
   }

   if (position < PWM_TOTALNUMBER) {
1a0041e8:	2b0a      	cmp	r3, #10
1a0041ea:	d802      	bhi.n	1a0041f2 <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a0041ec:	1c58      	adds	r0, r3, #1
1a0041ee:	b2c0      	uxtb	r0, r0
1a0041f0:	4770      	bx	lr
   } else {
      positionInList = 0;
1a0041f2:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a0041f4:	4770      	bx	lr
1a0041f6:	bf00      	nop
1a0041f8:	10000044 	.word	0x10000044

1a0041fc <pwmWrite>:
{
1a0041fc:	b538      	push	{r3, r4, r5, lr}
1a0041fe:	4604      	mov	r4, r0
1a004200:	460d      	mov	r5, r1
   position = pwmIsAttached(pwmNumber);
1a004202:	f7ff ffe7 	bl	1a0041d4 <pwmIsAttached>
   if(position) {
1a004206:	b908      	cbnz	r0, 1a00420c <pwmWrite+0x10>
   bool_t success = FALSE;
1a004208:	2000      	movs	r0, #0
}
1a00420a:	bd38      	pop	{r3, r4, r5, pc}
      Sct_SetDutyCycle(pwmMap[pwmNumber], value);
1a00420c:	4629      	mov	r1, r5
1a00420e:	4b03      	ldr	r3, [pc, #12]	; (1a00421c <pwmWrite+0x20>)
1a004210:	5d18      	ldrb	r0, [r3, r4]
1a004212:	f7ff feb9 	bl	1a003f88 <Sct_SetDutyCycle>
      success = TRUE;
1a004216:	2001      	movs	r0, #1
1a004218:	e7f7      	b.n	1a00420a <pwmWrite+0xe>
1a00421a:	bf00      	nop
1a00421c:	1a00bf10 	.word	0x1a00bf10

1a004220 <pwmAttach>:
{
1a004220:	b510      	push	{r4, lr}
1a004222:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a004224:	f7ff ffd6 	bl	1a0041d4 <pwmIsAttached>
   if(position==0) {
1a004228:	b970      	cbnz	r0, 1a004248 <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a00422a:	20ff      	movs	r0, #255	; 0xff
1a00422c:	f7ff ffd2 	bl	1a0041d4 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a004230:	b908      	cbnz	r0, 1a004236 <pwmAttach+0x16>
   bool_t success = FALSE;
1a004232:	2000      	movs	r0, #0
1a004234:	e009      	b.n	1a00424a <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a004236:	1e43      	subs	r3, r0, #1
1a004238:	4a04      	ldr	r2, [pc, #16]	; (1a00424c <pwmAttach+0x2c>)
1a00423a:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a00423c:	4b04      	ldr	r3, [pc, #16]	; (1a004250 <pwmAttach+0x30>)
1a00423e:	5d18      	ldrb	r0, [r3, r4]
1a004240:	f7ff feae 	bl	1a003fa0 <Sct_EnablePwmFor>
         success = TRUE;
1a004244:	2001      	movs	r0, #1
1a004246:	e000      	b.n	1a00424a <pwmAttach+0x2a>
   bool_t success = FALSE;
1a004248:	2000      	movs	r0, #0
}
1a00424a:	bd10      	pop	{r4, pc}
1a00424c:	10000044 	.word	0x10000044
1a004250:	1a00bf10 	.word	0x1a00bf10

1a004254 <pwmDetach>:
{
1a004254:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a004256:	f7ff ffbd 	bl	1a0041d4 <pwmIsAttached>
   if(position) {
1a00425a:	b128      	cbz	r0, 1a004268 <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a00425c:	1e43      	subs	r3, r0, #1
1a00425e:	4a03      	ldr	r2, [pc, #12]	; (1a00426c <pwmDetach+0x18>)
1a004260:	21ff      	movs	r1, #255	; 0xff
1a004262:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a004264:	2001      	movs	r0, #1
1a004266:	e000      	b.n	1a00426a <pwmDetach+0x16>
   bool_t success = FALSE;
1a004268:	2000      	movs	r0, #0
}
1a00426a:	bd08      	pop	{r3, pc}
1a00426c:	10000044 	.word	0x10000044

1a004270 <pwmInit>:
{
1a004270:	b508      	push	{r3, lr}
   switch(config) {
1a004272:	2902      	cmp	r1, #2
1a004274:	d008      	beq.n	1a004288 <pwmInit+0x18>
1a004276:	2903      	cmp	r1, #3
1a004278:	d009      	beq.n	1a00428e <pwmInit+0x1e>
1a00427a:	b109      	cbz	r1, 1a004280 <pwmInit+0x10>
      ret_val = 0;
1a00427c:	2000      	movs	r0, #0
}
1a00427e:	bd08      	pop	{r3, pc}
      pwmInitTimers();
1a004280:	f7ff ffa1 	bl	1a0041c6 <pwmInitTimers>
   bool_t ret_val = 1;
1a004284:	2001      	movs	r0, #1
      break;
1a004286:	e7fa      	b.n	1a00427e <pwmInit+0xe>
      ret_val = pwmAttach( pwmNumber );
1a004288:	f7ff ffca 	bl	1a004220 <pwmAttach>
      break;
1a00428c:	e7f7      	b.n	1a00427e <pwmInit+0xe>
      ret_val = pwmDetach( pwmNumber );
1a00428e:	f7ff ffe1 	bl	1a004254 <pwmDetach>
      break;
1a004292:	e7f4      	b.n	1a00427e <pwmInit+0xe>

1a004294 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a004294:	b538      	push	{r3, r4, r5, lr}
1a004296:	4604      	mov	r4, r0
1a004298:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00429a:	4b08      	ldr	r3, [pc, #32]	; (1a0042bc <i2cHardwareInit+0x28>)
1a00429c:	f640 0208 	movw	r2, #2056	; 0x808
1a0042a0:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0042a4:	f7fe ffae 	bl	1a003204 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0042a8:	4629      	mov	r1, r5
1a0042aa:	4620      	mov	r0, r4
1a0042ac:	f7fe ffbc 	bl	1a003228 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0042b0:	4903      	ldr	r1, [pc, #12]	; (1a0042c0 <i2cHardwareInit+0x2c>)
1a0042b2:	4620      	mov	r0, r4
1a0042b4:	f7fe ffd4 	bl	1a003260 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0042b8:	2001      	movs	r0, #1
1a0042ba:	bd38      	pop	{r3, r4, r5, pc}
1a0042bc:	40086000 	.word	0x40086000
1a0042c0:	1a0032d9 	.word	0x1a0032d9

1a0042c4 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a0042c4:	b500      	push	{lr}
1a0042c6:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a0042c8:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0042cc:	2100      	movs	r1, #0
1a0042ce:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0042d2:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a0042d6:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a0042d8:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a0042dc:	9b07      	ldr	r3, [sp, #28]
1a0042de:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a0042e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a0042e4:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0042e8:	4669      	mov	r1, sp
1a0042ea:	4805      	ldr	r0, [pc, #20]	; (1a004300 <i2cHardwareRead+0x3c>)
1a0042ec:	f7ff fd8d 	bl	1a003e0a <Chip_I2CM_XferBlocking>
1a0042f0:	b118      	cbz	r0, 1a0042fa <i2cHardwareRead+0x36>
      return FALSE;
   }

   return TRUE;
1a0042f2:	2001      	movs	r0, #1
}
1a0042f4:	b005      	add	sp, #20
1a0042f6:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a0042fa:	2000      	movs	r0, #0
1a0042fc:	e7fa      	b.n	1a0042f4 <i2cHardwareRead+0x30>
1a0042fe:	bf00      	nop
1a004300:	400a1000 	.word	0x400a1000

1a004304 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a004304:	b108      	cbz	r0, 1a00430a <i2cHardwareWrite+0x6>
      return FALSE;
1a004306:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a004308:	4770      	bx	lr
{
1a00430a:	b500      	push	{lr}
1a00430c:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a00430e:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a004312:	2100      	movs	r1, #0
1a004314:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a004318:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a00431c:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00431e:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a004322:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a004324:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a004328:	4669      	mov	r1, sp
1a00432a:	4805      	ldr	r0, [pc, #20]	; (1a004340 <i2cHardwareWrite+0x3c>)
1a00432c:	f7ff fd6d 	bl	1a003e0a <Chip_I2CM_XferBlocking>
1a004330:	b118      	cbz	r0, 1a00433a <i2cHardwareWrite+0x36>
   return TRUE;
1a004332:	2001      	movs	r0, #1
}
1a004334:	b005      	add	sp, #20
1a004336:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a00433a:	2000      	movs	r0, #0
1a00433c:	e7fa      	b.n	1a004334 <i2cHardwareWrite+0x30>
1a00433e:	bf00      	nop
1a004340:	400a1000 	.word	0x400a1000

1a004344 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004344:	b108      	cbz	r0, 1a00434a <i2cInit+0x6>
      return FALSE;
1a004346:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a004348:	4770      	bx	lr
{
1a00434a:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a00434c:	f7ff ffa2 	bl	1a004294 <i2cHardwareInit>
}
1a004350:	bd08      	pop	{r3, pc}

1a004352 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a004352:	b108      	cbz	r0, 1a004358 <i2cRead+0x6>
      return FALSE;
1a004354:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a004356:	4770      	bx	lr
{
1a004358:	b510      	push	{r4, lr}
1a00435a:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a00435c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a004360:	9403      	str	r4, [sp, #12]
1a004362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a004366:	9402      	str	r4, [sp, #8]
1a004368:	9c07      	ldr	r4, [sp, #28]
1a00436a:	9401      	str	r4, [sp, #4]
1a00436c:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a004370:	9400      	str	r4, [sp, #0]
1a004372:	f7ff ffa7 	bl	1a0042c4 <i2cHardwareRead>
}
1a004376:	b004      	add	sp, #16
1a004378:	bd10      	pop	{r4, pc}

1a00437a <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00437a:	b108      	cbz	r0, 1a004380 <i2cWrite+0x6>
      return FALSE;
1a00437c:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a00437e:	4770      	bx	lr
{
1a004380:	b510      	push	{r4, lr}
1a004382:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a004384:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a004388:	9400      	str	r4, [sp, #0]
1a00438a:	f7ff ffbb 	bl	1a004304 <i2cHardwareWrite>
}
1a00438e:	b002      	add	sp, #8
1a004390:	bd10      	pop	{r4, pc}

1a004392 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a004392:	e7fe      	b.n	1a004392 <errorOcurred>

1a004394 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a004394:	4770      	bx	lr
1a004396:	Address 0x000000001a004396 is out of bounds.


1a004398 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004398:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00439a:	2400      	movs	r4, #0
1a00439c:	e001      	b.n	1a0043a2 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00439e:	3401      	adds	r4, #1
1a0043a0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043a2:	2c03      	cmp	r4, #3
1a0043a4:	d812      	bhi.n	1a0043cc <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0043a6:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043a8:	4b09      	ldr	r3, [pc, #36]	; (1a0043d0 <TIMER0_IRQHandler+0x38>)
1a0043aa:	681a      	ldr	r2, [r3, #0]
1a0043ac:	f004 010f 	and.w	r1, r4, #15
1a0043b0:	2301      	movs	r3, #1
1a0043b2:	408b      	lsls	r3, r1
1a0043b4:	421a      	tst	r2, r3
1a0043b6:	d0f2      	beq.n	1a00439e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043b8:	4b06      	ldr	r3, [pc, #24]	; (1a0043d4 <TIMER0_IRQHandler+0x3c>)
1a0043ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0043be:	2000      	movs	r0, #0
1a0043c0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0043c2:	2301      	movs	r3, #1
1a0043c4:	40ab      	lsls	r3, r5
1a0043c6:	4a02      	ldr	r2, [pc, #8]	; (1a0043d0 <TIMER0_IRQHandler+0x38>)
1a0043c8:	6013      	str	r3, [r2, #0]
1a0043ca:	e7e8      	b.n	1a00439e <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0043cc:	bd38      	pop	{r3, r4, r5, pc}
1a0043ce:	bf00      	nop
1a0043d0:	40084000 	.word	0x40084000
1a0043d4:	10000050 	.word	0x10000050

1a0043d8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0043d8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043da:	2400      	movs	r4, #0
1a0043dc:	e001      	b.n	1a0043e2 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043de:	3401      	adds	r4, #1
1a0043e0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043e2:	2c03      	cmp	r4, #3
1a0043e4:	d813      	bhi.n	1a00440e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0043e6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043e8:	4b09      	ldr	r3, [pc, #36]	; (1a004410 <TIMER1_IRQHandler+0x38>)
1a0043ea:	681a      	ldr	r2, [r3, #0]
1a0043ec:	f004 010f 	and.w	r1, r4, #15
1a0043f0:	2301      	movs	r3, #1
1a0043f2:	408b      	lsls	r3, r1
1a0043f4:	421a      	tst	r2, r3
1a0043f6:	d0f2      	beq.n	1a0043de <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043f8:	1d23      	adds	r3, r4, #4
1a0043fa:	4a06      	ldr	r2, [pc, #24]	; (1a004414 <TIMER1_IRQHandler+0x3c>)
1a0043fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004400:	2000      	movs	r0, #0
1a004402:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004404:	2301      	movs	r3, #1
1a004406:	40ab      	lsls	r3, r5
1a004408:	4a01      	ldr	r2, [pc, #4]	; (1a004410 <TIMER1_IRQHandler+0x38>)
1a00440a:	6013      	str	r3, [r2, #0]
1a00440c:	e7e7      	b.n	1a0043de <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00440e:	bd38      	pop	{r3, r4, r5, pc}
1a004410:	40085000 	.word	0x40085000
1a004414:	10000050 	.word	0x10000050

1a004418 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a004418:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00441a:	2400      	movs	r4, #0
1a00441c:	e001      	b.n	1a004422 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00441e:	3401      	adds	r4, #1
1a004420:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004422:	2c03      	cmp	r4, #3
1a004424:	d814      	bhi.n	1a004450 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a004426:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004428:	4b0a      	ldr	r3, [pc, #40]	; (1a004454 <TIMER2_IRQHandler+0x3c>)
1a00442a:	681a      	ldr	r2, [r3, #0]
1a00442c:	f004 010f 	and.w	r1, r4, #15
1a004430:	2301      	movs	r3, #1
1a004432:	408b      	lsls	r3, r1
1a004434:	421a      	tst	r2, r3
1a004436:	d0f2      	beq.n	1a00441e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004438:	f104 0308 	add.w	r3, r4, #8
1a00443c:	4a06      	ldr	r2, [pc, #24]	; (1a004458 <TIMER2_IRQHandler+0x40>)
1a00443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004442:	2000      	movs	r0, #0
1a004444:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004446:	2301      	movs	r3, #1
1a004448:	40ab      	lsls	r3, r5
1a00444a:	4a02      	ldr	r2, [pc, #8]	; (1a004454 <TIMER2_IRQHandler+0x3c>)
1a00444c:	6013      	str	r3, [r2, #0]
1a00444e:	e7e6      	b.n	1a00441e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a004450:	bd38      	pop	{r3, r4, r5, pc}
1a004452:	bf00      	nop
1a004454:	400c3000 	.word	0x400c3000
1a004458:	10000050 	.word	0x10000050

1a00445c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a00445c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00445e:	2400      	movs	r4, #0
1a004460:	e001      	b.n	1a004466 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004462:	3401      	adds	r4, #1
1a004464:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004466:	2c03      	cmp	r4, #3
1a004468:	d814      	bhi.n	1a004494 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00446a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00446c:	4b0a      	ldr	r3, [pc, #40]	; (1a004498 <TIMER3_IRQHandler+0x3c>)
1a00446e:	681a      	ldr	r2, [r3, #0]
1a004470:	f004 010f 	and.w	r1, r4, #15
1a004474:	2301      	movs	r3, #1
1a004476:	408b      	lsls	r3, r1
1a004478:	421a      	tst	r2, r3
1a00447a:	d0f2      	beq.n	1a004462 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00447c:	f104 030c 	add.w	r3, r4, #12
1a004480:	4a06      	ldr	r2, [pc, #24]	; (1a00449c <TIMER3_IRQHandler+0x40>)
1a004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004486:	2000      	movs	r0, #0
1a004488:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00448a:	2301      	movs	r3, #1
1a00448c:	40ab      	lsls	r3, r5
1a00448e:	4a02      	ldr	r2, [pc, #8]	; (1a004498 <TIMER3_IRQHandler+0x3c>)
1a004490:	6013      	str	r3, [r2, #0]
1a004492:	e7e6      	b.n	1a004462 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004494:	bd38      	pop	{r3, r4, r5, pc}
1a004496:	bf00      	nop
1a004498:	400c4000 	.word	0x400c4000
1a00449c:	10000050 	.word	0x10000050

1a0044a0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0044a0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0044a2:	4d0b      	ldr	r5, [pc, #44]	; (1a0044d0 <gpioObtainPinInit+0x30>)
1a0044a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0044a8:	182c      	adds	r4, r5, r0
1a0044aa:	5628      	ldrsb	r0, [r5, r0]
1a0044ac:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0044ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0044b2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0044b4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0044b8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0044ba:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0044be:	9b02      	ldr	r3, [sp, #8]
1a0044c0:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0044c2:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0044c6:	9b03      	ldr	r3, [sp, #12]
1a0044c8:	701a      	strb	r2, [r3, #0]
}
1a0044ca:	bc30      	pop	{r4, r5}
1a0044cc:	4770      	bx	lr
1a0044ce:	bf00      	nop
1a0044d0:	1a00bf1c 	.word	0x1a00bf1c

1a0044d4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0044d4:	f110 0f02 	cmn.w	r0, #2
1a0044d8:	f000 80c7 	beq.w	1a00466a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0044dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0044e0:	f000 80c5 	beq.w	1a00466e <gpioInit+0x19a>
{
1a0044e4:	b570      	push	{r4, r5, r6, lr}
1a0044e6:	b084      	sub	sp, #16
1a0044e8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0044ea:	2300      	movs	r3, #0
1a0044ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0044f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0044f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0044f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0044fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004500:	f10d 030b 	add.w	r3, sp, #11
1a004504:	9301      	str	r3, [sp, #4]
1a004506:	ab03      	add	r3, sp, #12
1a004508:	9300      	str	r3, [sp, #0]
1a00450a:	f10d 030d 	add.w	r3, sp, #13
1a00450e:	f10d 020e 	add.w	r2, sp, #14
1a004512:	f10d 010f 	add.w	r1, sp, #15
1a004516:	f7ff ffc3 	bl	1a0044a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00451a:	2c05      	cmp	r4, #5
1a00451c:	f200 80a9 	bhi.w	1a004672 <gpioInit+0x19e>
1a004520:	e8df f004 	tbb	[pc, r4]
1a004524:	45278109 	.word	0x45278109
1a004528:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00452a:	4853      	ldr	r0, [pc, #332]	; (1a004678 <gpioInit+0x1a4>)
1a00452c:	f7ff fc87 	bl	1a003e3e <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004530:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004532:	b004      	add	sp, #16
1a004534:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004536:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00453a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00453e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004542:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004546:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00454a:	494c      	ldr	r1, [pc, #304]	; (1a00467c <gpioInit+0x1a8>)
1a00454c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004550:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004554:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004558:	2001      	movs	r0, #1
1a00455a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00455e:	4c46      	ldr	r4, [pc, #280]	; (1a004678 <gpioInit+0x1a4>)
1a004560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004564:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004568:	ea22 0201 	bic.w	r2, r2, r1
1a00456c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004570:	e7df      	b.n	1a004532 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004572:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004576:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00457a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00457e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004582:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004586:	493d      	ldr	r1, [pc, #244]	; (1a00467c <gpioInit+0x1a8>)
1a004588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00458c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004590:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004594:	2001      	movs	r0, #1
1a004596:	fa00 f102 	lsl.w	r1, r0, r2
1a00459a:	4c37      	ldr	r4, [pc, #220]	; (1a004678 <gpioInit+0x1a4>)
1a00459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045a0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045a4:	ea22 0201 	bic.w	r2, r2, r1
1a0045a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045ac:	e7c1      	b.n	1a004532 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045ba:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0045be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045c2:	492e      	ldr	r1, [pc, #184]	; (1a00467c <gpioInit+0x1a8>)
1a0045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0045c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0045cc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045d0:	2001      	movs	r0, #1
1a0045d2:	fa00 f102 	lsl.w	r1, r0, r2
1a0045d6:	4c28      	ldr	r4, [pc, #160]	; (1a004678 <gpioInit+0x1a4>)
1a0045d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045e0:	ea22 0201 	bic.w	r2, r2, r1
1a0045e4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045e8:	e7a3      	b.n	1a004532 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045f6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0045fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045fe:	491f      	ldr	r1, [pc, #124]	; (1a00467c <gpioInit+0x1a8>)
1a004600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004604:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004608:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00460c:	2001      	movs	r0, #1
1a00460e:	fa00 f102 	lsl.w	r1, r0, r2
1a004612:	4c19      	ldr	r4, [pc, #100]	; (1a004678 <gpioInit+0x1a4>)
1a004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004618:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00461c:	ea22 0201 	bic.w	r2, r2, r1
1a004620:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004624:	e785      	b.n	1a004532 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004626:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00462a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00462e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004632:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004636:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00463a:	4910      	ldr	r1, [pc, #64]	; (1a00467c <gpioInit+0x1a8>)
1a00463c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004640:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004644:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004648:	2001      	movs	r0, #1
1a00464a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00464e:	4b0a      	ldr	r3, [pc, #40]	; (1a004678 <gpioInit+0x1a4>)
1a004650:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004654:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004658:	4331      	orrs	r1, r6
1a00465a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00465e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004660:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004664:	2100      	movs	r1, #0
1a004666:	5499      	strb	r1, [r3, r2]
1a004668:	e763      	b.n	1a004532 <gpioInit+0x5e>
	  return FALSE;
1a00466a:	2000      	movs	r0, #0
1a00466c:	4770      	bx	lr
	  return FALSE;
1a00466e:	2000      	movs	r0, #0
}
1a004670:	4770      	bx	lr
      ret_val = 0;
1a004672:	2000      	movs	r0, #0
1a004674:	e75d      	b.n	1a004532 <gpioInit+0x5e>
1a004676:	bf00      	nop
1a004678:	400f4000 	.word	0x400f4000
1a00467c:	40086000 	.word	0x40086000

1a004680 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a004680:	f110 0f02 	cmn.w	r0, #2
1a004684:	d02d      	beq.n	1a0046e2 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004686:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00468a:	d02c      	beq.n	1a0046e6 <gpioWrite+0x66>
{
1a00468c:	b510      	push	{r4, lr}
1a00468e:	b084      	sub	sp, #16
1a004690:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004692:	2300      	movs	r3, #0
1a004694:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004698:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00469c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0046a0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0046a4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0046a8:	f10d 030b 	add.w	r3, sp, #11
1a0046ac:	9301      	str	r3, [sp, #4]
1a0046ae:	ab03      	add	r3, sp, #12
1a0046b0:	9300      	str	r3, [sp, #0]
1a0046b2:	f10d 030d 	add.w	r3, sp, #13
1a0046b6:	f10d 020e 	add.w	r2, sp, #14
1a0046ba:	f10d 010f 	add.w	r1, sp, #15
1a0046be:	f7ff feef 	bl	1a0044a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0046c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0046c6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0046ca:	1c21      	adds	r1, r4, #0
1a0046cc:	bf18      	it	ne
1a0046ce:	2101      	movne	r1, #1
1a0046d0:	015b      	lsls	r3, r3, #5
1a0046d2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0046d6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0046da:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0046dc:	2001      	movs	r0, #1
}
1a0046de:	b004      	add	sp, #16
1a0046e0:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0046e2:	2000      	movs	r0, #0
1a0046e4:	4770      	bx	lr
	  return FALSE;
1a0046e6:	2000      	movs	r0, #0
}
1a0046e8:	4770      	bx	lr

1a0046ea <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0046ea:	f110 0f02 	cmn.w	r0, #2
1a0046ee:	d02c      	beq.n	1a00474a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0046f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0046f4:	d02b      	beq.n	1a00474e <gpioRead+0x64>
{
1a0046f6:	b500      	push	{lr}
1a0046f8:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0046fa:	2300      	movs	r3, #0
1a0046fc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004700:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004704:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004708:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00470c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004710:	f10d 030b 	add.w	r3, sp, #11
1a004714:	9301      	str	r3, [sp, #4]
1a004716:	ab03      	add	r3, sp, #12
1a004718:	9300      	str	r3, [sp, #0]
1a00471a:	f10d 030d 	add.w	r3, sp, #13
1a00471e:	f10d 020e 	add.w	r2, sp, #14
1a004722:	f10d 010f 	add.w	r1, sp, #15
1a004726:	f7ff febb 	bl	1a0044a0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00472a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00472e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a004732:	015b      	lsls	r3, r3, #5
1a004734:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004738:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00473c:	5c98      	ldrb	r0, [r3, r2]
1a00473e:	3000      	adds	r0, #0
1a004740:	bf18      	it	ne
1a004742:	2001      	movne	r0, #1

   return ret_val;
}
1a004744:	b005      	add	sp, #20
1a004746:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00474a:	2001      	movs	r0, #1
1a00474c:	4770      	bx	lr
      return FALSE;
1a00474e:	2000      	movs	r0, #0
}
1a004750:	4770      	bx	lr

1a004752 <gpioToggle>:
{
1a004752:	b510      	push	{r4, lr}
1a004754:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a004756:	f7ff ffc8 	bl	1a0046ea <gpioRead>
1a00475a:	fab0 f180 	clz	r1, r0
1a00475e:	0949      	lsrs	r1, r1, #5
1a004760:	4620      	mov	r0, r4
1a004762:	f7ff ff8d 	bl	1a004680 <gpioWrite>
}
1a004766:	bd10      	pop	{r4, pc}

1a004768 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004768:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00476a:	4b04      	ldr	r3, [pc, #16]	; (1a00477c <USB0_IRQHandler+0x14>)
1a00476c:	681b      	ldr	r3, [r3, #0]
1a00476e:	681b      	ldr	r3, [r3, #0]
1a004770:	68db      	ldr	r3, [r3, #12]
1a004772:	4a03      	ldr	r2, [pc, #12]	; (1a004780 <USB0_IRQHandler+0x18>)
1a004774:	6810      	ldr	r0, [r2, #0]
1a004776:	4798      	blx	r3
}
1a004778:	bd08      	pop	{r3, pc}
1a00477a:	bf00      	nop
1a00477c:	10003894 	.word	0x10003894
1a004780:	100034dc 	.word	0x100034dc

1a004784 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004784:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004786:	f7fe fef5 	bl	1a003574 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00478a:	4b18      	ldr	r3, [pc, #96]	; (1a0047ec <boardInit+0x68>)
1a00478c:	6818      	ldr	r0, [r3, #0]
1a00478e:	f7ff fbcd 	bl	1a003f2c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a004792:	2105      	movs	r1, #5
1a004794:	2000      	movs	r0, #0
1a004796:	f7ff fe9d 	bl	1a0044d4 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00479a:	2100      	movs	r1, #0
1a00479c:	2024      	movs	r0, #36	; 0x24
1a00479e:	f7ff fe99 	bl	1a0044d4 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0047a2:	2100      	movs	r1, #0
1a0047a4:	2025      	movs	r0, #37	; 0x25
1a0047a6:	f7ff fe95 	bl	1a0044d4 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0047aa:	2100      	movs	r1, #0
1a0047ac:	2026      	movs	r0, #38	; 0x26
1a0047ae:	f7ff fe91 	bl	1a0044d4 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0047b2:	2100      	movs	r1, #0
1a0047b4:	2027      	movs	r0, #39	; 0x27
1a0047b6:	f7ff fe8d 	bl	1a0044d4 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0047ba:	2101      	movs	r1, #1
1a0047bc:	2028      	movs	r0, #40	; 0x28
1a0047be:	f7ff fe89 	bl	1a0044d4 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0047c2:	2101      	movs	r1, #1
1a0047c4:	2029      	movs	r0, #41	; 0x29
1a0047c6:	f7ff fe85 	bl	1a0044d4 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0047ca:	2101      	movs	r1, #1
1a0047cc:	202a      	movs	r0, #42	; 0x2a
1a0047ce:	f7ff fe81 	bl	1a0044d4 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0047d2:	2101      	movs	r1, #1
1a0047d4:	202b      	movs	r0, #43	; 0x2b
1a0047d6:	f7ff fe7d 	bl	1a0044d4 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0047da:	2101      	movs	r1, #1
1a0047dc:	202c      	movs	r0, #44	; 0x2c
1a0047de:	f7ff fe79 	bl	1a0044d4 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0047e2:	2101      	movs	r1, #1
1a0047e4:	202d      	movs	r0, #45	; 0x2d
1a0047e6:	f7ff fe75 	bl	1a0044d4 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0047ea:	bd08      	pop	{r3, pc}
1a0047ec:	10003890 	.word	0x10003890

1a0047f0 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a0047f0:	b4f0      	push	{r4, r5, r6, r7}
1a0047f2:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a0047f4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a0047f8:	0083      	lsls	r3, r0, #2
1a0047fa:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a0047fe:	181b      	adds	r3, r3, r0
1a004800:	eb41 0202 	adc.w	r2, r1, r2
1a004804:	0211      	lsls	r1, r2, #8
1a004806:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a00480a:	0218      	lsls	r0, r3, #8
1a00480c:	1ac6      	subs	r6, r0, r3
1a00480e:	eb61 0702 	sbc.w	r7, r1, r2
1a004812:	013b      	lsls	r3, r7, #4
1a004814:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a004818:	0132      	lsls	r2, r6, #4
1a00481a:	4616      	mov	r6, r2
1a00481c:	461f      	mov	r7, r3
1a00481e:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a004822:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004826:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00482a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00482e:	4313      	orrs	r3, r2
1a004830:	d008      	beq.n	1a004844 <delayInaccurateMs+0x54>
1a004832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004836:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a00483a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a00483e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a004842:	e7f2      	b.n	1a00482a <delayInaccurateMs+0x3a>
}
1a004844:	b004      	add	sp, #16
1a004846:	bcf0      	pop	{r4, r5, r6, r7}
1a004848:	4770      	bx	lr

1a00484a <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a00484a:	b530      	push	{r4, r5, lr}
1a00484c:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a00484e:	1803      	adds	r3, r0, r0
1a004850:	eb41 0201 	adc.w	r2, r1, r1
1a004854:	1818      	adds	r0, r3, r0
1a004856:	eb42 0101 	adc.w	r1, r2, r1
1a00485a:	010b      	lsls	r3, r1, #4
1a00485c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a004860:	0102      	lsls	r2, r0, #4
1a004862:	1880      	adds	r0, r0, r2
1a004864:	eb43 0101 	adc.w	r1, r3, r1
1a004868:	008b      	lsls	r3, r1, #2
1a00486a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a00486e:	0082      	lsls	r2, r0, #2
1a004870:	4610      	mov	r0, r2
1a004872:	4619      	mov	r1, r3
1a004874:	220a      	movs	r2, #10
1a004876:	2300      	movs	r3, #0
1a004878:	f001 fbe6 	bl	1a006048 <__aeabi_uldivmod>
1a00487c:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a004880:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004884:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a004888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00488c:	4313      	orrs	r3, r2
1a00488e:	d008      	beq.n	1a0048a2 <delayInaccurateUs+0x58>
1a004890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004894:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a004898:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a00489c:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a0048a0:	e7f2      	b.n	1a004888 <delayInaccurateUs+0x3e>
}
1a0048a2:	b005      	add	sp, #20
1a0048a4:	bd30      	pop	{r4, r5, pc}
1a0048a6:	Address 0x000000001a0048a6 is out of bounds.


1a0048a8 <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a0048a8:	b500      	push	{lr}
1a0048aa:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a0048ac:	4b09      	ldr	r3, [pc, #36]	; (1a0048d4 <pcf8574TGpioPortWrite+0x2c>)
1a0048ae:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a0048b0:	4b09      	ldr	r3, [pc, #36]	; (1a0048d8 <pcf8574TGpioPortWrite+0x30>)
1a0048b2:	781b      	ldrb	r3, [r3, #0]
1a0048b4:	4318      	orrs	r0, r3
1a0048b6:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a0048ba:	2301      	movs	r3, #1
1a0048bc:	9300      	str	r3, [sp, #0]
1a0048be:	f10d 020f 	add.w	r2, sp, #15
1a0048c2:	4906      	ldr	r1, [pc, #24]	; (1a0048dc <pcf8574TGpioPortWrite+0x34>)
1a0048c4:	7809      	ldrb	r1, [r1, #0]
1a0048c6:	2000      	movs	r0, #0
1a0048c8:	f7ff fd57 	bl	1a00437a <i2cWrite>
}
1a0048cc:	b005      	add	sp, #20
1a0048ce:	f85d fb04 	ldr.w	pc, [sp], #4
1a0048d2:	bf00      	nop
1a0048d4:	100034eb 	.word	0x100034eb
1a0048d8:	100034ea 	.word	0x100034ea
1a0048dc:	10000090 	.word	0x10000090

1a0048e0 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a0048e0:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a0048e2:	4b08      	ldr	r3, [pc, #32]	; (1a004904 <pcf8574TGpioWrite+0x24>)
1a0048e4:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a0048e6:	b139      	cbz	r1, 1a0048f8 <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a0048e8:	2201      	movs	r2, #1
1a0048ea:	fa02 f000 	lsl.w	r0, r2, r0
1a0048ee:	4303      	orrs	r3, r0
1a0048f0:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a0048f2:	f7ff ffd9 	bl	1a0048a8 <pcf8574TGpioPortWrite>
}
1a0048f6:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a0048f8:	2101      	movs	r1, #1
1a0048fa:	fa01 f000 	lsl.w	r0, r1, r0
1a0048fe:	ea23 0000 	bic.w	r0, r3, r0
1a004902:	e7f6      	b.n	1a0048f2 <pcf8574TGpioWrite+0x12>
1a004904:	100034eb 	.word	0x100034eb

1a004908 <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a004908:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a00490a:	f7ff ffe9 	bl	1a0048e0 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a00490e:	bd08      	pop	{r3, pc}

1a004910 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a004910:	b510      	push	{r4, lr}
1a004912:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a004914:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a004918:	2007      	movs	r0, #7
1a00491a:	f7ff fff5 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a00491e:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a004922:	2006      	movs	r0, #6
1a004924:	f7ff fff0 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a004928:	f004 0120 	and.w	r1, r4, #32
1a00492c:	2005      	movs	r0, #5
1a00492e:	f7ff ffeb 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a004932:	f004 0110 	and.w	r1, r4, #16
1a004936:	2004      	movs	r0, #4
1a004938:	f7ff ffe6 	bl	1a004908 <lcdPinSet>
}
1a00493c:	bd10      	pop	{r4, pc}

1a00493e <lcdEnablePulse>:
{
1a00493e:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a004940:	2101      	movs	r1, #1
1a004942:	2002      	movs	r0, #2
1a004944:	f7ff ffe0 	bl	1a004908 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a004948:	2019      	movs	r0, #25
1a00494a:	2100      	movs	r1, #0
1a00494c:	f7ff ff7d 	bl	1a00484a <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a004950:	2100      	movs	r1, #0
1a004952:	2002      	movs	r0, #2
1a004954:	f7ff ffd8 	bl	1a004908 <lcdPinSet>
}
1a004958:	bd08      	pop	{r3, pc}
1a00495a:	Address 0x000000001a00495a is out of bounds.


1a00495c <pcf8574TGpioPortInit>:
{
1a00495c:	b500      	push	{lr}
1a00495e:	b085      	sub	sp, #20
1a004960:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a004964:	4b06      	ldr	r3, [pc, #24]	; (1a004980 <pcf8574TGpioPortInit+0x24>)
1a004966:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a004968:	2301      	movs	r3, #1
1a00496a:	9300      	str	r3, [sp, #0]
1a00496c:	f10d 020f 	add.w	r2, sp, #15
1a004970:	4904      	ldr	r1, [pc, #16]	; (1a004984 <pcf8574TGpioPortInit+0x28>)
1a004972:	7809      	ldrb	r1, [r1, #0]
1a004974:	2000      	movs	r0, #0
1a004976:	f7ff fd00 	bl	1a00437a <i2cWrite>
}
1a00497a:	b005      	add	sp, #20
1a00497c:	f85d fb04 	ldr.w	pc, [sp], #4
1a004980:	100034ea 	.word	0x100034ea
1a004984:	10000090 	.word	0x10000090

1a004988 <pcf8574TInit>:
{
1a004988:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a00498a:	4b04      	ldr	r3, [pc, #16]	; (1a00499c <pcf8574TInit+0x14>)
1a00498c:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a00498e:	2000      	movs	r0, #0
1a004990:	f7ff ffe4 	bl	1a00495c <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a004994:	2000      	movs	r0, #0
1a004996:	f7ff ff87 	bl	1a0048a8 <pcf8574TGpioPortWrite>
}
1a00499a:	bd08      	pop	{r3, pc}
1a00499c:	10000090 	.word	0x10000090

1a0049a0 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a0049a0:	b510      	push	{r4, lr}
1a0049a2:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a0049a4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0049a8:	f7ff ffb2 	bl	1a004910 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a0049ac:	2100      	movs	r1, #0
1a0049ae:	4608      	mov	r0, r1
1a0049b0:	f7ff ffaa 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a0049b4:	2100      	movs	r1, #0
1a0049b6:	2001      	movs	r0, #1
1a0049b8:	f7ff ffa6 	bl	1a004908 <lcdPinSet>

   lcdEnablePulse();
1a0049bc:	f7ff ffbf 	bl	1a00493e <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a0049c0:	2019      	movs	r0, #25
1a0049c2:	2100      	movs	r1, #0
1a0049c4:	f7ff ff41 	bl	1a00484a <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a0049c8:	0120      	lsls	r0, r4, #4
1a0049ca:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0049ce:	f7ff ff9f 	bl	1a004910 <lcdSendNibble>
   lcdEnablePulse();
1a0049d2:	f7ff ffb4 	bl	1a00493e <lcdEnablePulse>
}
1a0049d6:	bd10      	pop	{r4, pc}

1a0049d8 <lcdData>:

void lcdData( uint8_t data )
{
1a0049d8:	b510      	push	{r4, lr}
1a0049da:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a0049dc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0049e0:	f7ff ff96 	bl	1a004910 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a0049e4:	2101      	movs	r1, #1
1a0049e6:	2000      	movs	r0, #0
1a0049e8:	f7ff ff8e 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a0049ec:	2100      	movs	r1, #0
1a0049ee:	2001      	movs	r0, #1
1a0049f0:	f7ff ff8a 	bl	1a004908 <lcdPinSet>

   lcdEnablePulse();
1a0049f4:	f7ff ffa3 	bl	1a00493e <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a0049f8:	0120      	lsls	r0, r4, #4
1a0049fa:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0049fe:	f7ff ff87 	bl	1a004910 <lcdSendNibble>
   lcdEnablePulse();
1a004a02:	f7ff ff9c 	bl	1a00493e <lcdEnablePulse>
}
1a004a06:	bd10      	pop	{r4, pc}

1a004a08 <lcdGoToXY>:
   lcdClearAndHome();
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a004a08:	b282      	uxth	r2, r0
1a004a0a:	4b11      	ldr	r3, [pc, #68]	; (1a004a50 <lcdGoToXY+0x48>)
1a004a0c:	881b      	ldrh	r3, [r3, #0]
1a004a0e:	429a      	cmp	r2, r3
1a004a10:	d204      	bcs.n	1a004a1c <lcdGoToXY+0x14>
1a004a12:	b28b      	uxth	r3, r1
1a004a14:	4a0e      	ldr	r2, [pc, #56]	; (1a004a50 <lcdGoToXY+0x48>)
1a004a16:	8852      	ldrh	r2, [r2, #2]
1a004a18:	4293      	cmp	r3, r2
1a004a1a:	d300      	bcc.n	1a004a1e <lcdGoToXY+0x16>
1a004a1c:	4770      	bx	lr
{
1a004a1e:	b530      	push	{r4, r5, lr}
1a004a20:	b083      	sub	sp, #12
1a004a22:	460d      	mov	r5, r1
1a004a24:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a004a26:	4b0b      	ldr	r3, [pc, #44]	; (1a004a54 <lcdGoToXY+0x4c>)
1a004a28:	681b      	ldr	r3, [r3, #0]
1a004a2a:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a004a2c:	ab02      	add	r3, sp, #8
1a004a2e:	440b      	add	r3, r1
1a004a30:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a004a34:	4420      	add	r0, r4
1a004a36:	b2c0      	uxtb	r0, r0
1a004a38:	f7ff ffb2 	bl	1a0049a0 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a004a3c:	2064      	movs	r0, #100	; 0x64
1a004a3e:	2100      	movs	r1, #0
1a004a40:	f7ff ff03 	bl	1a00484a <delayInaccurateUs>
   lcd.x = x;
1a004a44:	4b02      	ldr	r3, [pc, #8]	; (1a004a50 <lcdGoToXY+0x48>)
1a004a46:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a004a48:	725d      	strb	r5, [r3, #9]
}
1a004a4a:	b003      	add	sp, #12
1a004a4c:	bd30      	pop	{r4, r5, pc}
1a004a4e:	bf00      	nop
1a004a50:	100034e0 	.word	0x100034e0
1a004a54:	1a00c004 	.word	0x1a00c004

1a004a58 <lcdClear>:

void lcdClear( void )
{
1a004a58:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a004a5a:	2001      	movs	r0, #1
1a004a5c:	f7ff ffa0 	bl	1a0049a0 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a004a60:	2003      	movs	r0, #3
1a004a62:	2100      	movs	r1, #0
1a004a64:	f7ff fec4 	bl	1a0047f0 <delayInaccurateMs>
}
1a004a68:	bd08      	pop	{r3, pc}

1a004a6a <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a004a6a:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a004a6c:	f040 000c 	orr.w	r0, r0, #12
1a004a70:	f7ff ff96 	bl	1a0049a0 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a004a74:	2003      	movs	r0, #3
1a004a76:	2100      	movs	r1, #0
1a004a78:	f7ff feba 	bl	1a0047f0 <delayInaccurateMs>
}
1a004a7c:	bd08      	pop	{r3, pc}

1a004a7e <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a004a7e:	b538      	push	{r3, r4, r5, lr}
1a004a80:	4605      	mov	r5, r0
   uint8_t i = 0;
1a004a82:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a004a84:	5d28      	ldrb	r0, [r5, r4]
1a004a86:	b120      	cbz	r0, 1a004a92 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a004a88:	f7ff ffa6 	bl	1a0049d8 <lcdData>
      i++;
1a004a8c:	3401      	adds	r4, #1
1a004a8e:	b2e4      	uxtb	r4, r4
1a004a90:	e7f8      	b.n	1a004a84 <lcdSendStringRaw+0x6>
   }
}
1a004a92:	bd38      	pop	{r3, r4, r5, pc}

1a004a94 <lcdClearAndHome>:
   lcdSendCustomCharByIndex( customChar->address );
}


void lcdClearAndHome( void )
{
1a004a94:	b508      	push	{r3, lr}
   lcdClear();
1a004a96:	f7ff ffdf 	bl	1a004a58 <lcdClear>
   lcdGoToXY( 0, 0 ); // Poner cursor en 0, 0
1a004a9a:	2100      	movs	r1, #0
1a004a9c:	4608      	mov	r0, r1
1a004a9e:	f7ff ffb3 	bl	1a004a08 <lcdGoToXY>
   //delay(100);
}
1a004aa2:	bd08      	pop	{r3, pc}

1a004aa4 <lcdInit>:
{
1a004aa4:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a004aa6:	4d25      	ldr	r5, [pc, #148]	; (1a004b3c <lcdInit+0x98>)
1a004aa8:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a004aaa:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a004aac:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a004aae:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a004ab0:	2400      	movs	r4, #0
1a004ab2:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a004ab4:	726c      	strb	r4, [r5, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a004ab6:	2127      	movs	r1, #39	; 0x27
1a004ab8:	4620      	mov	r0, r4
1a004aba:	f7ff ff65 	bl	1a004988 <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
1a004abe:	2101      	movs	r1, #1
1a004ac0:	2003      	movs	r0, #3
1a004ac2:	f7ff ff21 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a004ac6:	4621      	mov	r1, r4
1a004ac8:	2001      	movs	r0, #1
1a004aca:	f7ff ff1d 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a004ace:	4621      	mov	r1, r4
1a004ad0:	4620      	mov	r0, r4
1a004ad2:	f7ff ff19 	bl	1a004908 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a004ad6:	4621      	mov	r1, r4
1a004ad8:	2002      	movs	r0, #2
1a004ada:	f7ff ff15 	bl	1a004908 <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a004ade:	2033      	movs	r0, #51	; 0x33
1a004ae0:	f7ff ff5e 	bl	1a0049a0 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004ae4:	202d      	movs	r0, #45	; 0x2d
1a004ae6:	2100      	movs	r1, #0
1a004ae8:	f7ff feaf 	bl	1a00484a <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a004aec:	2032      	movs	r0, #50	; 0x32
1a004aee:	f7ff ff57 	bl	1a0049a0 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004af2:	202d      	movs	r0, #45	; 0x2d
1a004af4:	2100      	movs	r1, #0
1a004af6:	f7ff fea8 	bl	1a00484a <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a004afa:	2028      	movs	r0, #40	; 0x28
1a004afc:	f7ff ff50 	bl	1a0049a0 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004b00:	202d      	movs	r0, #45	; 0x2d
1a004b02:	2100      	movs	r1, #0
1a004b04:	f7ff fea1 	bl	1a00484a <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a004b08:	200e      	movs	r0, #14
1a004b0a:	f7ff ff49 	bl	1a0049a0 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004b0e:	202d      	movs	r0, #45	; 0x2d
1a004b10:	2100      	movs	r1, #0
1a004b12:	f7ff fe9a 	bl	1a00484a <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a004b16:	f7ff ff9f 	bl	1a004a58 <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a004b1a:	2006      	movs	r0, #6
1a004b1c:	f7ff ff40 	bl	1a0049a0 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004b20:	202d      	movs	r0, #45	; 0x2d
1a004b22:	2100      	movs	r1, #0
1a004b24:	f7ff fe91 	bl	1a00484a <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a004b28:	2001      	movs	r0, #1
1a004b2a:	2100      	movs	r1, #0
1a004b2c:	f7ff fe60 	bl	1a0047f0 <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
1a004b30:	4620      	mov	r0, r4
1a004b32:	f7ff ff9a 	bl	1a004a6a <lcdCursorSet>
   lcdClearAndHome();
1a004b36:	f7ff ffad 	bl	1a004a94 <lcdClearAndHome>
}
1a004b3a:	bd38      	pop	{r3, r4, r5, pc}
1a004b3c:	100034e0 	.word	0x100034e0

1a004b40 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a004b40:	b500      	push	{lr}
1a004b42:	b087      	sub	sp, #28
1a004b44:	f88d 0017 	strb.w	r0, [sp, #23]
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a004b48:	4a0a      	ldr	r2, [pc, #40]	; (1a004b74 <mpu9250ReadRegisters+0x34>)
1a004b4a:	f812 0b24 	ldrb.w	r0, [r2], #36
1a004b4e:	2301      	movs	r3, #1
1a004b50:	9303      	str	r3, [sp, #12]
1a004b52:	9102      	str	r1, [sp, #8]
1a004b54:	9201      	str	r2, [sp, #4]
1a004b56:	9300      	str	r3, [sp, #0]
1a004b58:	f10d 0217 	add.w	r2, sp, #23
1a004b5c:	4601      	mov	r1, r0
1a004b5e:	2000      	movs	r0, #0
1a004b60:	f7ff fbf7 	bl	1a004352 <i2cRead>
1a004b64:	b118      	cbz	r0, 1a004b6e <mpu9250ReadRegisters+0x2e>
		return 1;
1a004b66:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a004b68:	b007      	add	sp, #28
1a004b6a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
1a004b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004b72:	e7f9      	b.n	1a004b68 <mpu9250ReadRegisters+0x28>
1a004b74:	100034f0 	.word	0x100034f0

1a004b78 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004b7c:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a004b7e:	2115      	movs	r1, #21
1a004b80:	203b      	movs	r0, #59	; 0x3b
1a004b82:	f7ff ffdd 	bl	1a004b40 <mpu9250ReadRegisters>
1a004b86:	2800      	cmp	r0, #0
1a004b88:	f000 8136 	beq.w	1a004df8 <mpu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a004b8c:	4b9b      	ldr	r3, [pc, #620]	; (1a004dfc <mpu9250Read+0x284>)
1a004b8e:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a004b92:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a004b96:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a004b9a:	fa0f fb81 	sxth.w	fp, r1
1a004b9e:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a004ba2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a004ba6:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a004baa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a004bae:	b209      	sxth	r1, r1
1a004bb0:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a004bb4:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a004bb8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a004bbc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a004bc0:	b212      	sxth	r2, r2
1a004bc2:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a004bc6:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a004bca:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a004bce:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a004bd2:	b200      	sxth	r0, r0
1a004bd4:	ee05 0a90 	vmov	s11, r0
1a004bd8:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a004bdc:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a004be0:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a004be4:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a004be8:	b236      	sxth	r6, r6
1a004bea:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a004bee:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a004bf2:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a004bf6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a004bfa:	b200      	sxth	r0, r0
1a004bfc:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a004c00:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a004c04:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a004c08:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a004c0c:	b22d      	sxth	r5, r5
1a004c0e:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a004c12:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a004c16:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a004c1a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004c1e:	b224      	sxth	r4, r4
1a004c20:	ee06 4a90 	vmov	s13, r4
1a004c24:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a004c28:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a004c2c:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a004c30:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004c34:	b224      	sxth	r4, r4
1a004c36:	ee07 4a10 	vmov	s14, r4
1a004c3a:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a004c3e:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a004c42:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a004c46:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a004c4a:	b224      	sxth	r4, r4
1a004c4c:	ee07 4a90 	vmov	s15, r4
1a004c50:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a004c54:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a004c58:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a004c5c:	fb01 f407 	mul.w	r4, r1, r7
1a004c60:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a004c64:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a004c68:	9401      	str	r4, [sp, #4]
1a004c6a:	fb02 cc04 	mla	ip, r2, r4, ip
1a004c6e:	ee06 ca10 	vmov	s12, ip
1a004c72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004c76:	ed93 5a01 	vldr	s10, [r3, #4]
1a004c7a:	ee26 6a05 	vmul.f32	s12, s12, s10
1a004c7e:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a004c82:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004c86:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a004c8a:	ee26 6a24 	vmul.f32	s12, s12, s9
1a004c8e:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a004c92:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a004c96:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a004c9a:	fb08 fc01 	mul.w	ip, r8, r1
1a004c9e:	fb0e cc0b 	mla	ip, lr, fp, ip
1a004ca2:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a004ca6:	fb04 cc02 	mla	ip, r4, r2, ip
1a004caa:	ee06 ca10 	vmov	s12, ip
1a004cae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004cb2:	ee25 6a06 	vmul.f32	s12, s10, s12
1a004cb6:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a004cba:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004cbe:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a004cc2:	ee26 6a24 	vmul.f32	s12, s12, s9
1a004cc6:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a004cca:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a004cce:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a004cd2:	fb09 f101 	mul.w	r1, r9, r1
1a004cd6:	fb0c 110b 	mla	r1, ip, fp, r1
1a004cda:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a004cde:	fb0b 1102 	mla	r1, fp, r2, r1
1a004ce2:	ee06 1a10 	vmov	s12, r1
1a004ce6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004cea:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004cee:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a004cf2:	ee35 5a46 	vsub.f32	s10, s10, s12
1a004cf6:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a004cfa:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004cfe:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a004d02:	fb00 f707 	mul.w	r7, r0, r7
1a004d06:	fb06 770a 	mla	r7, r6, sl, r7
1a004d0a:	9a01      	ldr	r2, [sp, #4]
1a004d0c:	fb05 7202 	mla	r2, r5, r2, r7
1a004d10:	ee06 2a10 	vmov	s12, r2
1a004d14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004d18:	ed93 5a02 	vldr	s10, [r3, #8]
1a004d1c:	ee26 6a05 	vmul.f32	s12, s12, s10
1a004d20:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a004d24:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004d28:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a004d2c:	fb00 f808 	mul.w	r8, r0, r8
1a004d30:	fb06 8e0e 	mla	lr, r6, lr, r8
1a004d34:	fb05 e204 	mla	r2, r5, r4, lr
1a004d38:	ee06 2a10 	vmov	s12, r2
1a004d3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004d40:	ee25 6a06 	vmul.f32	s12, s10, s12
1a004d44:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a004d48:	ee36 6a64 	vsub.f32	s12, s12, s9
1a004d4c:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a004d50:	fb00 f009 	mul.w	r0, r0, r9
1a004d54:	fb06 000c 	mla	r0, r6, ip, r0
1a004d58:	fb05 050b 	mla	r5, r5, fp, r0
1a004d5c:	ee06 5a10 	vmov	s12, r5
1a004d60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a004d64:	ee25 5a06 	vmul.f32	s10, s10, s12
1a004d68:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a004d6c:	ee35 5a46 	vsub.f32	s10, s10, s12
1a004d70:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a004d74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a004d78:	ed93 6a03 	vldr	s12, [r3, #12]
1a004d7c:	ee66 6a86 	vmul.f32	s13, s13, s12
1a004d80:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a004d84:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a004d88:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a004d8c:	ee66 6a86 	vmul.f32	s13, s13, s12
1a004d90:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a004d94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a004d98:	edd3 6a04 	vldr	s13, [r3, #16]
1a004d9c:	ee27 7a26 	vmul.f32	s14, s14, s13
1a004da0:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a004da4:	ee37 7a66 	vsub.f32	s14, s14, s13
1a004da8:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a004dac:	ee27 7a26 	vmul.f32	s14, s14, s13
1a004db0:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a004db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a004db8:	ed93 7a05 	vldr	s14, [r3, #20]
1a004dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a004dc0:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a004dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a004dc8:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a004dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a004dd0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a004dd4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a004dd8:	edd3 7a07 	vldr	s15, [r3, #28]
1a004ddc:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a004de0:	edd3 6a06 	vldr	s13, [r3, #24]
1a004de4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a004de8:	ee77 7a87 	vadd.f32	s15, s15, s14
1a004dec:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a004df0:	2001      	movs	r0, #1
}
1a004df2:	b003      	add	sp, #12
1a004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a004df8:	2000      	movs	r0, #0
1a004dfa:	e7fa      	b.n	1a004df2 <mpu9250Read+0x27a>
1a004dfc:	100034f0 	.word	0x100034f0

1a004e00 <freeRTOS_mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t freeRTOS_mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a004e00:	4b1b      	ldr	r3, [pc, #108]	; (1a004e70 <freeRTOS_mpu9250InitializeControlStructure+0x70>)
1a004e02:	4a1c      	ldr	r2, [pc, #112]	; (1a004e74 <freeRTOS_mpu9250InitializeControlStructure+0x74>)
1a004e04:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a004e06:	4a1c      	ldr	r2, [pc, #112]	; (1a004e78 <freeRTOS_mpu9250InitializeControlStructure+0x78>)
1a004e08:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a004e0a:	2264      	movs	r2, #100	; 0x64
1a004e0c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a004e10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a004e14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a004e18:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a004e1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a004e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a004e24:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a004e28:	4914      	ldr	r1, [pc, #80]	; (1a004e7c <freeRTOS_mpu9250InitializeControlStructure+0x7c>)
1a004e2a:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a004e2e:	2108      	movs	r1, #8
1a004e30:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a004e34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a004e38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a004e3c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a004e40:	2200      	movs	r2, #0
1a004e42:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a004e46:	2101      	movs	r1, #1
1a004e48:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a004e4c:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a004e50:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a004e54:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a004e58:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a004e5c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a004e60:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a004e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a004e68:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a004e6c:	4770      	bx	lr
1a004e6e:	bf00      	nop
1a004e70:	10003648 	.word	0x10003648
1a004e74:	43a6ef5c 	.word	0x43a6ef5c
1a004e78:	41a80000 	.word	0x41a80000
1a004e7c:	3e99999a 	.word	0x3e99999a

1a004e80 <freeRTOS_mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t freeRTOS_mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a004e80:	b500      	push	{lr}
1a004e82:	b087      	sub	sp, #28
1a004e84:	f88d 0017 	strb.w	r0, [sp, #23]
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a004e88:	4a0a      	ldr	r2, [pc, #40]	; (1a004eb4 <freeRTOS_mpu9250ReadRegisters+0x34>)
1a004e8a:	f812 0b24 	ldrb.w	r0, [r2], #36
1a004e8e:	2301      	movs	r3, #1
1a004e90:	9303      	str	r3, [sp, #12]
1a004e92:	9102      	str	r1, [sp, #8]
1a004e94:	9201      	str	r2, [sp, #4]
1a004e96:	9300      	str	r3, [sp, #0]
1a004e98:	f10d 0217 	add.w	r2, sp, #23
1a004e9c:	4601      	mov	r1, r0
1a004e9e:	2000      	movs	r0, #0
1a004ea0:	f7ff fa57 	bl	1a004352 <i2cRead>
1a004ea4:	b118      	cbz	r0, 1a004eae <freeRTOS_mpu9250ReadRegisters+0x2e>
		return 1;
1a004ea6:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a004ea8:	b007      	add	sp, #28
1a004eaa:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
1a004eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004eb2:	e7f9      	b.n	1a004ea8 <freeRTOS_mpu9250ReadRegisters+0x28>
1a004eb4:	10003648 	.word	0x10003648

1a004eb8 <freeRTOS_mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t freeRTOS_mpu9250WhoAmI( void )
{
1a004eb8:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (freeRTOS_mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a004eba:	2101      	movs	r1, #1
1a004ebc:	2075      	movs	r0, #117	; 0x75
1a004ebe:	f7ff ffdf 	bl	1a004e80 <freeRTOS_mpu9250ReadRegisters>
1a004ec2:	2800      	cmp	r0, #0
1a004ec4:	db03      	blt.n	1a004ece <freeRTOS_mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a004ec6:	4b03      	ldr	r3, [pc, #12]	; (1a004ed4 <freeRTOS_mpu9250WhoAmI+0x1c>)
1a004ec8:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a004ecc:	bd08      	pop	{r3, pc}
		return -1;
1a004ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ed2:	e7fb      	b.n	1a004ecc <freeRTOS_mpu9250WhoAmI+0x14>
1a004ed4:	10003648 	.word	0x10003648

1a004ed8 <freeRTOS_mpu9250WriteRegister>:
{
1a004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004eda:	b085      	sub	sp, #20
1a004edc:	4606      	mov	r6, r0
1a004ede:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a004ee0:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a004ee4:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a004ee8:	4d0c      	ldr	r5, [pc, #48]	; (1a004f1c <freeRTOS_mpu9250WriteRegister+0x44>)
1a004eea:	2701      	movs	r7, #1
1a004eec:	9700      	str	r7, [sp, #0]
1a004eee:	2302      	movs	r3, #2
1a004ef0:	aa03      	add	r2, sp, #12
1a004ef2:	7829      	ldrb	r1, [r5, #0]
1a004ef4:	2000      	movs	r0, #0
1a004ef6:	f7ff fa40 	bl	1a00437a <i2cWrite>
	vTaskDelay(10/portTICK_PERIOD_MS);
1a004efa:	200a      	movs	r0, #10
1a004efc:	f7fd f9e0 	bl	1a0022c0 <vTaskDelay>
	freeRTOS_mpu9250ReadRegisters(subAddress,1);
1a004f00:	4639      	mov	r1, r7
1a004f02:	4630      	mov	r0, r6
1a004f04:	f7ff ffbc 	bl	1a004e80 <freeRTOS_mpu9250ReadRegisters>
	if(control._buffer[0] == data) {
1a004f08:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a004f0c:	42a3      	cmp	r3, r4
1a004f0e:	d003      	beq.n	1a004f18 <freeRTOS_mpu9250WriteRegister+0x40>
      return -1;
1a004f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a004f14:	b005      	add	sp, #20
1a004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 1;
1a004f18:	4638      	mov	r0, r7
1a004f1a:	e7fb      	b.n	1a004f14 <freeRTOS_mpu9250WriteRegister+0x3c>
1a004f1c:	10003648 	.word	0x10003648

1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t freeRTOS_mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a004f20:	b538      	push	{r3, r4, r5, lr}
1a004f22:	4605      	mov	r5, r0
1a004f24:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a004f26:	218c      	movs	r1, #140	; 0x8c
1a004f28:	2025      	movs	r0, #37	; 0x25
1a004f2a:	f7ff ffd5 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004f2e:	2800      	cmp	r0, #0
1a004f30:	db17      	blt.n	1a004f62 <freeRTOS_mpu9250ReadAK8963Registers+0x42>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a004f32:	4629      	mov	r1, r5
1a004f34:	2026      	movs	r0, #38	; 0x26
1a004f36:	f7ff ffcf 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004f3a:	2800      	cmp	r0, #0
1a004f3c:	db14      	blt.n	1a004f68 <freeRTOS_mpu9250ReadAK8963Registers+0x48>
		return -2;
	}
	// enable I2C and request the bytes
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a004f3e:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a004f42:	2027      	movs	r0, #39	; 0x27
1a004f44:	f7ff ffc8 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004f48:	2800      	cmp	r0, #0
1a004f4a:	db10      	blt.n	1a004f6e <freeRTOS_mpu9250ReadAK8963Registers+0x4e>
		return -3;
	}

	//delay(1); // takes some time for these registers to fill
	vTaskDelay(1/portTICK_PERIOD_MS);
1a004f4c:	2001      	movs	r0, #1
1a004f4e:	f7fd f9b7 	bl	1a0022c0 <vTaskDelay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = freeRTOS_mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a004f52:	4621      	mov	r1, r4
1a004f54:	2049      	movs	r0, #73	; 0x49
1a004f56:	f7ff ff93 	bl	1a004e80 <freeRTOS_mpu9250ReadRegisters>
1a004f5a:	4b06      	ldr	r3, [pc, #24]	; (1a004f74 <freeRTOS_mpu9250ReadAK8963Registers+0x54>)
1a004f5c:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a004f60:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004f66:	e7fb      	b.n	1a004f60 <freeRTOS_mpu9250ReadAK8963Registers+0x40>
		return -2;
1a004f68:	f06f 0001 	mvn.w	r0, #1
1a004f6c:	e7f8      	b.n	1a004f60 <freeRTOS_mpu9250ReadAK8963Registers+0x40>
		return -3;
1a004f6e:	f06f 0002 	mvn.w	r0, #2
1a004f72:	e7f5      	b.n	1a004f60 <freeRTOS_mpu9250ReadAK8963Registers+0x40>
1a004f74:	10003648 	.word	0x10003648

1a004f78 <freeRTOS_mpu9250WhoAmIAK8963>:
{
1a004f78:	b508      	push	{r3, lr}
	if (freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a004f7a:	2101      	movs	r1, #1
1a004f7c:	2000      	movs	r0, #0
1a004f7e:	f7ff ffcf 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
1a004f82:	2800      	cmp	r0, #0
1a004f84:	db03      	blt.n	1a004f8e <freeRTOS_mpu9250WhoAmIAK8963+0x16>
	return control._buffer[0];
1a004f86:	4b03      	ldr	r3, [pc, #12]	; (1a004f94 <freeRTOS_mpu9250WhoAmIAK8963+0x1c>)
1a004f88:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a004f8c:	bd08      	pop	{r3, pc}
		return -1;
1a004f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004f92:	e7fb      	b.n	1a004f8c <freeRTOS_mpu9250WhoAmIAK8963+0x14>
1a004f94:	10003648 	.word	0x10003648

1a004f98 <freeRTOS_mpu9250WriteAK8963Register>:
{
1a004f98:	b538      	push	{r3, r4, r5, lr}
1a004f9a:	4604      	mov	r4, r0
1a004f9c:	460d      	mov	r5, r1
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a004f9e:	210c      	movs	r1, #12
1a004fa0:	2025      	movs	r0, #37	; 0x25
1a004fa2:	f7ff ff99 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004fa6:	2800      	cmp	r0, #0
1a004fa8:	db1e      	blt.n	1a004fe8 <freeRTOS_mpu9250WriteAK8963Register+0x50>
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a004faa:	4621      	mov	r1, r4
1a004fac:	2026      	movs	r0, #38	; 0x26
1a004fae:	f7ff ff93 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004fb2:	2800      	cmp	r0, #0
1a004fb4:	db1b      	blt.n	1a004fee <freeRTOS_mpu9250WriteAK8963Register+0x56>
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a004fb6:	4629      	mov	r1, r5
1a004fb8:	2063      	movs	r0, #99	; 0x63
1a004fba:	f7ff ff8d 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004fbe:	2800      	cmp	r0, #0
1a004fc0:	db18      	blt.n	1a004ff4 <freeRTOS_mpu9250WriteAK8963Register+0x5c>
	if (freeRTOS_mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a004fc2:	2181      	movs	r1, #129	; 0x81
1a004fc4:	2027      	movs	r0, #39	; 0x27
1a004fc6:	f7ff ff87 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a004fca:	2800      	cmp	r0, #0
1a004fcc:	db15      	blt.n	1a004ffa <freeRTOS_mpu9250WriteAK8963Register+0x62>
	if (freeRTOS_mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a004fce:	2101      	movs	r1, #1
1a004fd0:	4620      	mov	r0, r4
1a004fd2:	f7ff ffa5 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
1a004fd6:	2800      	cmp	r0, #0
1a004fd8:	db12      	blt.n	1a005000 <freeRTOS_mpu9250WriteAK8963Register+0x68>
	if(control._buffer[0] == data) {
1a004fda:	4b0c      	ldr	r3, [pc, #48]	; (1a00500c <freeRTOS_mpu9250WriteAK8963Register+0x74>)
1a004fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a004fe0:	42ab      	cmp	r3, r5
1a004fe2:	d110      	bne.n	1a005006 <freeRTOS_mpu9250WriteAK8963Register+0x6e>
		return 1;
1a004fe4:	2001      	movs	r0, #1
}
1a004fe6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004fec:	e7fb      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
		return -2;
1a004fee:	f06f 0001 	mvn.w	r0, #1
1a004ff2:	e7f8      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
		return -3;
1a004ff4:	f06f 0002 	mvn.w	r0, #2
1a004ff8:	e7f5      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
		return -4;
1a004ffa:	f06f 0003 	mvn.w	r0, #3
1a004ffe:	e7f2      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
		return -5;
1a005000:	f06f 0004 	mvn.w	r0, #4
1a005004:	e7ef      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
		return -6;
1a005006:	f06f 0005 	mvn.w	r0, #5
1a00500a:	e7ec      	b.n	1a004fe6 <freeRTOS_mpu9250WriteAK8963Register+0x4e>
1a00500c:	10003648 	.word	0x10003648

1a005010 <freeRTOS_mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t freeRTOS_mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a005010:	b510      	push	{r4, lr}
1a005012:	4604      	mov	r4, r0
	switch(range) {
1a005014:	2803      	cmp	r0, #3
1a005016:	d80c      	bhi.n	1a005032 <freeRTOS_mpu9250SetGyroRange+0x22>
1a005018:	e8df f000 	tbb	[pc, r0]
1a00501c:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(freeRTOS_mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a005020:	2100      	movs	r1, #0
1a005022:	201b      	movs	r0, #27
1a005024:	f7ff ff58 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005028:	2800      	cmp	r0, #0
1a00502a:	db25      	blt.n	1a005078 <freeRTOS_mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a00502c:	4b18      	ldr	r3, [pc, #96]	; (1a005090 <freeRTOS_mpu9250SetGyroRange+0x80>)
1a00502e:	4a19      	ldr	r2, [pc, #100]	; (1a005094 <freeRTOS_mpu9250SetGyroRange+0x84>)
1a005030:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a005032:	4b17      	ldr	r3, [pc, #92]	; (1a005090 <freeRTOS_mpu9250SetGyroRange+0x80>)
1a005034:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a005038:	2001      	movs	r0, #1
}
1a00503a:	bd10      	pop	{r4, pc}
		  if(freeRTOS_mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a00503c:	2108      	movs	r1, #8
1a00503e:	201b      	movs	r0, #27
1a005040:	f7ff ff4a 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005044:	2800      	cmp	r0, #0
1a005046:	db1a      	blt.n	1a00507e <freeRTOS_mpu9250SetGyroRange+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a005048:	4b11      	ldr	r3, [pc, #68]	; (1a005090 <freeRTOS_mpu9250SetGyroRange+0x80>)
1a00504a:	4a13      	ldr	r2, [pc, #76]	; (1a005098 <freeRTOS_mpu9250SetGyroRange+0x88>)
1a00504c:	609a      	str	r2, [r3, #8]
		  break;
1a00504e:	e7f0      	b.n	1a005032 <freeRTOS_mpu9250SetGyroRange+0x22>
		  if(freeRTOS_mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a005050:	2110      	movs	r1, #16
1a005052:	201b      	movs	r0, #27
1a005054:	f7ff ff40 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005058:	2800      	cmp	r0, #0
1a00505a:	db13      	blt.n	1a005084 <freeRTOS_mpu9250SetGyroRange+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a00505c:	4b0c      	ldr	r3, [pc, #48]	; (1a005090 <freeRTOS_mpu9250SetGyroRange+0x80>)
1a00505e:	4a0f      	ldr	r2, [pc, #60]	; (1a00509c <freeRTOS_mpu9250SetGyroRange+0x8c>)
1a005060:	609a      	str	r2, [r3, #8]
		  break;
1a005062:	e7e6      	b.n	1a005032 <freeRTOS_mpu9250SetGyroRange+0x22>
		  if(freeRTOS_mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a005064:	2118      	movs	r1, #24
1a005066:	201b      	movs	r0, #27
1a005068:	f7ff ff36 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a00506c:	2800      	cmp	r0, #0
1a00506e:	db0c      	blt.n	1a00508a <freeRTOS_mpu9250SetGyroRange+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a005070:	4b07      	ldr	r3, [pc, #28]	; (1a005090 <freeRTOS_mpu9250SetGyroRange+0x80>)
1a005072:	4a0b      	ldr	r2, [pc, #44]	; (1a0050a0 <freeRTOS_mpu9250SetGyroRange+0x90>)
1a005074:	609a      	str	r2, [r3, #8]
		  break;
1a005076:	e7dc      	b.n	1a005032 <freeRTOS_mpu9250SetGyroRange+0x22>
			return -1;
1a005078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00507c:	e7dd      	b.n	1a00503a <freeRTOS_mpu9250SetGyroRange+0x2a>
			return -1;
1a00507e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005082:	e7da      	b.n	1a00503a <freeRTOS_mpu9250SetGyroRange+0x2a>
			return -1;
1a005084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005088:	e7d7      	b.n	1a00503a <freeRTOS_mpu9250SetGyroRange+0x2a>
			return -1;
1a00508a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00508e:	e7d4      	b.n	1a00503a <freeRTOS_mpu9250SetGyroRange+0x2a>
1a005090:	10003648 	.word	0x10003648
1a005094:	390ba0e4 	.word	0x390ba0e4
1a005098:	398ba0e4 	.word	0x398ba0e4
1a00509c:	3a0ba0e4 	.word	0x3a0ba0e4
1a0050a0:	3a8ba0e4 	.word	0x3a8ba0e4

1a0050a4 <freeRTOS_mpu9250SetDlpfBandwidth>:

static int8_t freeRTOS_mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a0050a4:	b510      	push	{r4, lr}
1a0050a6:	4604      	mov	r4, r0
	switch (bandwidth) {
1a0050a8:	2805      	cmp	r0, #5
1a0050aa:	d810      	bhi.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
1a0050ac:	e8df f000 	tbb	[pc, r0]
1a0050b0:	32231403 	.word	0x32231403
1a0050b4:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a0050b6:	2101      	movs	r1, #1
1a0050b8:	201d      	movs	r0, #29
1a0050ba:	f7ff ff0d 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0050be:	2800      	cmp	r0, #0
1a0050c0:	db55      	blt.n	1a00516e <freeRTOS_mpu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a0050c2:	2101      	movs	r1, #1
1a0050c4:	201a      	movs	r0, #26
1a0050c6:	f7ff ff07 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0050ca:	2800      	cmp	r0, #0
1a0050cc:	db52      	blt.n	1a005174 <freeRTOS_mpu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a0050ce:	4b32      	ldr	r3, [pc, #200]	; (1a005198 <freeRTOS_mpu9250SetDlpfBandwidth+0xf4>)
1a0050d0:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a0050d4:	2001      	movs	r0, #1
}
1a0050d6:	bd10      	pop	{r4, pc}
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a0050d8:	2102      	movs	r1, #2
1a0050da:	201d      	movs	r0, #29
1a0050dc:	f7ff fefc 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0050e0:	2800      	cmp	r0, #0
1a0050e2:	db4a      	blt.n	1a00517a <freeRTOS_mpu9250SetDlpfBandwidth+0xd6>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a0050e4:	2102      	movs	r1, #2
1a0050e6:	201a      	movs	r0, #26
1a0050e8:	f7ff fef6 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0050ec:	2800      	cmp	r0, #0
1a0050ee:	daee      	bge.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0050f0:	f06f 0001 	mvn.w	r0, #1
1a0050f4:	e7ef      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a0050f6:	2103      	movs	r1, #3
1a0050f8:	201d      	movs	r0, #29
1a0050fa:	f7ff feed 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0050fe:	2800      	cmp	r0, #0
1a005100:	db3e      	blt.n	1a005180 <freeRTOS_mpu9250SetDlpfBandwidth+0xdc>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a005102:	2103      	movs	r1, #3
1a005104:	201a      	movs	r0, #26
1a005106:	f7ff fee7 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a00510a:	2800      	cmp	r0, #0
1a00510c:	dadf      	bge.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a00510e:	f06f 0001 	mvn.w	r0, #1
1a005112:	e7e0      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a005114:	2104      	movs	r1, #4
1a005116:	201d      	movs	r0, #29
1a005118:	f7ff fede 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a00511c:	2800      	cmp	r0, #0
1a00511e:	db32      	blt.n	1a005186 <freeRTOS_mpu9250SetDlpfBandwidth+0xe2>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) {
1a005120:	2104      	movs	r1, #4
1a005122:	201a      	movs	r0, #26
1a005124:	f7ff fed8 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005128:	2800      	cmp	r0, #0
1a00512a:	dad0      	bge.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a00512c:	f06f 0001 	mvn.w	r0, #1
1a005130:	e7d1      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a005132:	2105      	movs	r1, #5
1a005134:	201d      	movs	r0, #29
1a005136:	f7ff fecf 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a00513a:	2800      	cmp	r0, #0
1a00513c:	db26      	blt.n	1a00518c <freeRTOS_mpu9250SetDlpfBandwidth+0xe8>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a00513e:	2105      	movs	r1, #5
1a005140:	201a      	movs	r0, #26
1a005142:	f7ff fec9 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005146:	2800      	cmp	r0, #0
1a005148:	dac1      	bge.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a00514a:	f06f 0001 	mvn.w	r0, #1
1a00514e:	e7c2      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a005150:	2106      	movs	r1, #6
1a005152:	201d      	movs	r0, #29
1a005154:	f7ff fec0 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005158:	2800      	cmp	r0, #0
1a00515a:	db1a      	blt.n	1a005192 <freeRTOS_mpu9250SetDlpfBandwidth+0xee>
			if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a00515c:	2106      	movs	r1, #6
1a00515e:	201a      	movs	r0, #26
1a005160:	f7ff feba 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005164:	2800      	cmp	r0, #0
1a005166:	dab2      	bge.n	1a0050ce <freeRTOS_mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a005168:	f06f 0001 	mvn.w	r0, #1
1a00516c:	e7b3      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a00516e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005172:	e7b0      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -2;
1a005174:	f06f 0001 	mvn.w	r0, #1
1a005178:	e7ad      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a00517a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00517e:	e7aa      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a005180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005184:	e7a7      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a005186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00518a:	e7a4      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a00518c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005190:	e7a1      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a005192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005196:	e79e      	b.n	1a0050d6 <freeRTOS_mpu9250SetDlpfBandwidth+0x32>
1a005198:	10003648 	.word	0x10003648

1a00519c <freeRTOS_mpu9250SetSrd>:

static int8_t freeRTOS_mpu9250SetSrd( uint8_t srd )
{
1a00519c:	b510      	push	{r4, lr}
1a00519e:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (freeRTOS_mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a0051a0:	2113      	movs	r1, #19
1a0051a2:	2019      	movs	r0, #25
1a0051a4:	f7ff fe98 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0051a8:	2800      	cmp	r0, #0
1a0051aa:	db39      	blt.n	1a005220 <freeRTOS_mpu9250SetSrd+0x84>
		return -1;
	}
	if (srd > 9) {
1a0051ac:	2c09      	cmp	r4, #9
1a0051ae:	d920      	bls.n	1a0051f2 <freeRTOS_mpu9250SetSrd+0x56>
		// set AK8963 to Power Down
		if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0051b0:	2100      	movs	r1, #0
1a0051b2:	200a      	movs	r0, #10
1a0051b4:	f7ff fef0 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0051b8:	2800      	cmp	r0, #0
1a0051ba:	db34      	blt.n	1a005226 <freeRTOS_mpu9250SetSrd+0x8a>
			return -2;
		}
		//delay(100); // long wait between AK8963 mode changes
		vTaskDelay(100/portTICK_PERIOD_MS);
1a0051bc:	2064      	movs	r0, #100	; 0x64
1a0051be:	f7fd f87f 	bl	1a0022c0 <vTaskDelay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a0051c2:	2112      	movs	r1, #18
1a0051c4:	200a      	movs	r0, #10
1a0051c6:	f7ff fee7 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0051ca:	2800      	cmp	r0, #0
1a0051cc:	db2e      	blt.n	1a00522c <freeRTOS_mpu9250SetSrd+0x90>
			return -3;
		}
		//delay(100); // long wait between AK8963 mode changes
		vTaskDelay(100/portTICK_PERIOD_MS);
1a0051ce:	2064      	movs	r0, #100	; 0x64
1a0051d0:	f7fd f876 	bl	1a0022c0 <vTaskDelay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a0051d4:	2107      	movs	r1, #7
1a0051d6:	2003      	movs	r0, #3
1a0051d8:	f7ff fea2 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
		vTaskDelay(100/portTICK_PERIOD_MS);
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (freeRTOS_mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a0051dc:	4621      	mov	r1, r4
1a0051de:	2019      	movs	r0, #25
1a0051e0:	f7ff fe7a 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0051e4:	2800      	cmp	r0, #0
1a0051e6:	db2a      	blt.n	1a00523e <freeRTOS_mpu9250SetSrd+0xa2>
		return -4;
	}
	control._srd = srd;
1a0051e8:	4b16      	ldr	r3, [pc, #88]	; (1a005244 <freeRTOS_mpu9250SetSrd+0xa8>)
1a0051ea:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a0051ee:	2001      	movs	r0, #1
}
1a0051f0:	bd10      	pop	{r4, pc}
		if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0051f2:	2100      	movs	r1, #0
1a0051f4:	200a      	movs	r0, #10
1a0051f6:	f7ff fecf 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0051fa:	2800      	cmp	r0, #0
1a0051fc:	db19      	blt.n	1a005232 <freeRTOS_mpu9250SetSrd+0x96>
		vTaskDelay(100/portTICK_PERIOD_MS);
1a0051fe:	2064      	movs	r0, #100	; 0x64
1a005200:	f7fd f85e 	bl	1a0022c0 <vTaskDelay>
		if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a005204:	2116      	movs	r1, #22
1a005206:	200a      	movs	r0, #10
1a005208:	f7ff fec6 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a00520c:	2800      	cmp	r0, #0
1a00520e:	db13      	blt.n	1a005238 <freeRTOS_mpu9250SetSrd+0x9c>
		vTaskDelay(100/portTICK_PERIOD_MS);
1a005210:	2064      	movs	r0, #100	; 0x64
1a005212:	f7fd f855 	bl	1a0022c0 <vTaskDelay>
		freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a005216:	2107      	movs	r1, #7
1a005218:	2003      	movs	r0, #3
1a00521a:	f7ff fe81 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
1a00521e:	e7dd      	b.n	1a0051dc <freeRTOS_mpu9250SetSrd+0x40>
		return -1;
1a005220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005224:	e7e4      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
			return -2;
1a005226:	f06f 0001 	mvn.w	r0, #1
1a00522a:	e7e1      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
			return -3;
1a00522c:	f06f 0002 	mvn.w	r0, #2
1a005230:	e7de      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
			return -2;
1a005232:	f06f 0001 	mvn.w	r0, #1
1a005236:	e7db      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
			return -3;
1a005238:	f06f 0002 	mvn.w	r0, #2
1a00523c:	e7d8      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
		return -4;
1a00523e:	f06f 0003 	mvn.w	r0, #3
1a005242:	e7d5      	b.n	1a0051f0 <freeRTOS_mpu9250SetSrd+0x54>
1a005244:	10003648 	.word	0x10003648

1a005248 <freeRTOS_mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float freeRTOS_mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a005248:	4b01      	ldr	r3, [pc, #4]	; (1a005250 <freeRTOS_mpu9250GetGyroX_rads+0x8>)
1a00524a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a00524e:	4770      	bx	lr
1a005250:	10003648 	.word	0x10003648

1a005254 <freeRTOS_mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float freeRTOS_mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a005254:	4b01      	ldr	r3, [pc, #4]	; (1a00525c <freeRTOS_mpu9250GetGyroY_rads+0x8>)
1a005256:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a00525a:	4770      	bx	lr
1a00525c:	10003648 	.word	0x10003648

1a005260 <freeRTOS_mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float freeRTOS_mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a005260:	4b01      	ldr	r3, [pc, #4]	; (1a005268 <freeRTOS_mpu9250GetGyroZ_rads+0x8>)
1a005262:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a005266:	4770      	bx	lr
1a005268:	10003648 	.word	0x10003648

1a00526c <freeRTOS_mpu9250CalibrateGyro>:
{
1a00526c:	b538      	push	{r3, r4, r5, lr}
1a00526e:	ed2d 8b02 	vpush	{d8}
	if (freeRTOS_mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a005272:	2000      	movs	r0, #0
1a005274:	f7ff fecc 	bl	1a005010 <freeRTOS_mpu9250SetGyroRange>
1a005278:	2800      	cmp	r0, #0
1a00527a:	f2c0 808f 	blt.w	1a00539c <freeRTOS_mpu9250CalibrateGyro+0x130>
	if (freeRTOS_mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a00527e:	2003      	movs	r0, #3
1a005280:	f7ff ff10 	bl	1a0050a4 <freeRTOS_mpu9250SetDlpfBandwidth>
1a005284:	2800      	cmp	r0, #0
1a005286:	f2c0 808c 	blt.w	1a0053a2 <freeRTOS_mpu9250CalibrateGyro+0x136>
	if (freeRTOS_mpu9250SetSrd(19) < 0) {
1a00528a:	2013      	movs	r0, #19
1a00528c:	f7ff ff86 	bl	1a00519c <freeRTOS_mpu9250SetSrd>
1a005290:	2800      	cmp	r0, #0
1a005292:	f2c0 8089 	blt.w	1a0053a8 <freeRTOS_mpu9250CalibrateGyro+0x13c>
	control._gxbD = 0;
1a005296:	4b4a      	ldr	r3, [pc, #296]	; (1a0053c0 <freeRTOS_mpu9250CalibrateGyro+0x154>)
1a005298:	2000      	movs	r0, #0
1a00529a:	2100      	movs	r1, #0
1a00529c:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a0052a0:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a0052a4:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a0052a8:	2500      	movs	r5, #0
1a0052aa:	4b45      	ldr	r3, [pc, #276]	; (1a0053c0 <freeRTOS_mpu9250CalibrateGyro+0x154>)
1a0052ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a0052b0:	42ab      	cmp	r3, r5
1a0052b2:	d94a      	bls.n	1a00534a <freeRTOS_mpu9250CalibrateGyro+0xde>
		mpu9250Read();
1a0052b4:	f7ff fc60 	bl	1a004b78 <mpu9250Read>
		control._gxbD += ((freeRTOS_mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a0052b8:	f7ff ffc6 	bl	1a005248 <freeRTOS_mpu9250GetGyroX_rads>
1a0052bc:	4c40      	ldr	r4, [pc, #256]	; (1a0053c0 <freeRTOS_mpu9250CalibrateGyro+0x154>)
1a0052be:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a0052c2:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0052c6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a0052ca:	ee08 3a10 	vmov	s16, r3
1a0052ce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a0052d2:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0052d6:	ee17 0a90 	vmov	r0, s15
1a0052da:	f000 fb73 	bl	1a0059c4 <__aeabi_f2d>
1a0052de:	4602      	mov	r2, r0
1a0052e0:	460b      	mov	r3, r1
1a0052e2:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a0052e6:	f000 fa0f 	bl	1a005708 <__adddf3>
1a0052ea:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((freeRTOS_mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a0052ee:	f7ff ffb1 	bl	1a005254 <freeRTOS_mpu9250GetGyroY_rads>
1a0052f2:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a0052f6:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0052fa:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0052fe:	ee17 0a90 	vmov	r0, s15
1a005302:	f000 fb5f 	bl	1a0059c4 <__aeabi_f2d>
1a005306:	4602      	mov	r2, r0
1a005308:	460b      	mov	r3, r1
1a00530a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00530e:	f000 f9fb 	bl	1a005708 <__adddf3>
1a005312:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((freeRTOS_mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a005316:	f7ff ffa3 	bl	1a005260 <freeRTOS_mpu9250GetGyroZ_rads>
1a00531a:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a00531e:	ee30 0a27 	vadd.f32	s0, s0, s15
1a005322:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a005326:	ee17 0a90 	vmov	r0, s15
1a00532a:	f000 fb4b 	bl	1a0059c4 <__aeabi_f2d>
1a00532e:	4602      	mov	r2, r0
1a005330:	460b      	mov	r3, r1
1a005332:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a005336:	f000 f9e7 	bl	1a005708 <__adddf3>
1a00533a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		vTaskDelay(20/portTICK_PERIOD_MS);
1a00533e:	2014      	movs	r0, #20
1a005340:	f7fc ffbe 	bl	1a0022c0 <vTaskDelay>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a005344:	3501      	adds	r5, #1
1a005346:	b2ed      	uxtb	r5, r5
1a005348:	e7af      	b.n	1a0052aa <freeRTOS_mpu9250CalibrateGyro+0x3e>
	control._gxb = (float)control._gxbD;
1a00534a:	4c1d      	ldr	r4, [pc, #116]	; (1a0053c0 <freeRTOS_mpu9250CalibrateGyro+0x154>)
1a00534c:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a005350:	f000 fe2a 	bl	1a005fa8 <__aeabi_d2f>
1a005354:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a005358:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00535c:	f000 fe24 	bl	1a005fa8 <__aeabi_d2f>
1a005360:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a005364:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a005368:	f000 fe1e 	bl	1a005fa8 <__aeabi_d2f>
1a00536c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (freeRTOS_mpu9250SetGyroRange(control._gyroRange) < 0) {
1a005370:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a005374:	f7ff fe4c 	bl	1a005010 <freeRTOS_mpu9250SetGyroRange>
1a005378:	2800      	cmp	r0, #0
1a00537a:	db18      	blt.n	1a0053ae <freeRTOS_mpu9250CalibrateGyro+0x142>
	if (freeRTOS_mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a00537c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a005380:	f7ff fe90 	bl	1a0050a4 <freeRTOS_mpu9250SetDlpfBandwidth>
1a005384:	2800      	cmp	r0, #0
1a005386:	db15      	blt.n	1a0053b4 <freeRTOS_mpu9250CalibrateGyro+0x148>
	if (freeRTOS_mpu9250SetSrd(control._srd) < 0) {
1a005388:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a00538c:	f7ff ff06 	bl	1a00519c <freeRTOS_mpu9250SetSrd>
1a005390:	2800      	cmp	r0, #0
1a005392:	db12      	blt.n	1a0053ba <freeRTOS_mpu9250CalibrateGyro+0x14e>
	return 1;
1a005394:	2001      	movs	r0, #1
}
1a005396:	ecbd 8b02 	vpop	{d8}
1a00539a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0053a0:	e7f9      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
		return -2;
1a0053a2:	f06f 0001 	mvn.w	r0, #1
1a0053a6:	e7f6      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
		return -3;
1a0053a8:	f06f 0002 	mvn.w	r0, #2
1a0053ac:	e7f3      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
		return -4;
1a0053ae:	f06f 0003 	mvn.w	r0, #3
1a0053b2:	e7f0      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
		return -5;
1a0053b4:	f06f 0004 	mvn.w	r0, #4
1a0053b8:	e7ed      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
		return -6;
1a0053ba:	f06f 0005 	mvn.w	r0, #5
1a0053be:	e7ea      	b.n	1a005396 <freeRTOS_mpu9250CalibrateGyro+0x12a>
1a0053c0:	10003648 	.word	0x10003648

1a0053c4 <freeRTOS_mpu9250Init>:
{
1a0053c4:	b510      	push	{r4, lr}
1a0053c6:	4604      	mov	r4, r0
	freeRTOS_mpu9250InitializeControlStructure();
1a0053c8:	f7ff fd1a 	bl	1a004e00 <freeRTOS_mpu9250InitializeControlStructure>
	control.address = address;
1a0053cc:	4ba0      	ldr	r3, [pc, #640]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a0053ce:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a0053d0:	49a0      	ldr	r1, [pc, #640]	; (1a005654 <freeRTOS_mpu9250Init+0x290>)
1a0053d2:	2000      	movs	r0, #0
1a0053d4:	f7fe ffb6 	bl	1a004344 <i2cInit>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0053d8:	2101      	movs	r1, #1
1a0053da:	206b      	movs	r0, #107	; 0x6b
1a0053dc:	f7ff fd7c 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0053e0:	2800      	cmp	r0, #0
1a0053e2:	f2c0 80f8 	blt.w	1a0055d6 <freeRTOS_mpu9250Init+0x212>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0053e6:	2120      	movs	r1, #32
1a0053e8:	206a      	movs	r0, #106	; 0x6a
1a0053ea:	f7ff fd75 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0053ee:	2800      	cmp	r0, #0
1a0053f0:	f2c0 80f4 	blt.w	1a0055dc <freeRTOS_mpu9250Init+0x218>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0053f4:	210d      	movs	r1, #13
1a0053f6:	2024      	movs	r0, #36	; 0x24
1a0053f8:	f7ff fd6e 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0053fc:	2800      	cmp	r0, #0
1a0053fe:	f2c0 80f0 	blt.w	1a0055e2 <freeRTOS_mpu9250Init+0x21e>
	freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a005402:	2100      	movs	r1, #0
1a005404:	200a      	movs	r0, #10
1a005406:	f7ff fdc7 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
	freeRTOS_mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a00540a:	2180      	movs	r1, #128	; 0x80
1a00540c:	206b      	movs	r0, #107	; 0x6b
1a00540e:	f7ff fd63 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
	vTaskDelay(1/portTICK_PERIOD_MS);
1a005412:	2001      	movs	r0, #1
1a005414:	f7fc ff54 	bl	1a0022c0 <vTaskDelay>
	freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a005418:	2101      	movs	r1, #1
1a00541a:	200b      	movs	r0, #11
1a00541c:	f7ff fdbc 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a005420:	2101      	movs	r1, #1
1a005422:	206b      	movs	r0, #107	; 0x6b
1a005424:	f7ff fd58 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005428:	2800      	cmp	r0, #0
1a00542a:	f2c0 80dd 	blt.w	1a0055e8 <freeRTOS_mpu9250Init+0x224>
	if ((freeRTOS_mpu9250WhoAmI() != 113) && (freeRTOS_mpu9250WhoAmI() != 115)) {
1a00542e:	f7ff fd43 	bl	1a004eb8 <freeRTOS_mpu9250WhoAmI>
1a005432:	2871      	cmp	r0, #113	; 0x71
1a005434:	d004      	beq.n	1a005440 <freeRTOS_mpu9250Init+0x7c>
1a005436:	f7ff fd3f 	bl	1a004eb8 <freeRTOS_mpu9250WhoAmI>
1a00543a:	2873      	cmp	r0, #115	; 0x73
1a00543c:	f040 80d7 	bne.w	1a0055ee <freeRTOS_mpu9250Init+0x22a>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a005440:	2100      	movs	r1, #0
1a005442:	206c      	movs	r0, #108	; 0x6c
1a005444:	f7ff fd48 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005448:	2800      	cmp	r0, #0
1a00544a:	f2c0 80d3 	blt.w	1a0055f4 <freeRTOS_mpu9250Init+0x230>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a00544e:	2118      	movs	r1, #24
1a005450:	201c      	movs	r0, #28
1a005452:	f7ff fd41 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005456:	2800      	cmp	r0, #0
1a005458:	f2c0 80cf 	blt.w	1a0055fa <freeRTOS_mpu9250Init+0x236>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a00545c:	4b7c      	ldr	r3, [pc, #496]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a00545e:	4a7e      	ldr	r2, [pc, #504]	; (1a005658 <freeRTOS_mpu9250Init+0x294>)
1a005460:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a005462:	2203      	movs	r2, #3
1a005464:	f883 2020 	strb.w	r2, [r3, #32]
	if (freeRTOS_mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a005468:	2118      	movs	r1, #24
1a00546a:	201b      	movs	r0, #27
1a00546c:	f7ff fd34 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005470:	2800      	cmp	r0, #0
1a005472:	f2c0 80c5 	blt.w	1a005600 <freeRTOS_mpu9250Init+0x23c>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a005476:	4b76      	ldr	r3, [pc, #472]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a005478:	4a78      	ldr	r2, [pc, #480]	; (1a00565c <freeRTOS_mpu9250Init+0x298>)
1a00547a:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a00547c:	2203      	movs	r2, #3
1a00547e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (freeRTOS_mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a005482:	2101      	movs	r1, #1
1a005484:	201d      	movs	r0, #29
1a005486:	f7ff fd27 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a00548a:	2800      	cmp	r0, #0
1a00548c:	f2c0 80bb 	blt.w	1a005606 <freeRTOS_mpu9250Init+0x242>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a005490:	2101      	movs	r1, #1
1a005492:	201a      	movs	r0, #26
1a005494:	f7ff fd20 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a005498:	2800      	cmp	r0, #0
1a00549a:	f2c0 80b7 	blt.w	1a00560c <freeRTOS_mpu9250Init+0x248>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a00549e:	2100      	movs	r1, #0
1a0054a0:	4b6b      	ldr	r3, [pc, #428]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a0054a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (freeRTOS_mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a0054a6:	2019      	movs	r0, #25
1a0054a8:	f7ff fd16 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0054ac:	2800      	cmp	r0, #0
1a0054ae:	f2c0 80b0 	blt.w	1a005612 <freeRTOS_mpu9250Init+0x24e>
	control._srd = 0;
1a0054b2:	4b67      	ldr	r3, [pc, #412]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a0054b4:	2200      	movs	r2, #0
1a0054b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (freeRTOS_mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0054ba:	2120      	movs	r1, #32
1a0054bc:	206a      	movs	r0, #106	; 0x6a
1a0054be:	f7ff fd0b 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0054c2:	2800      	cmp	r0, #0
1a0054c4:	f2c0 80a8 	blt.w	1a005618 <freeRTOS_mpu9250Init+0x254>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0054c8:	210d      	movs	r1, #13
1a0054ca:	2024      	movs	r0, #36	; 0x24
1a0054cc:	f7ff fd04 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0054d0:	2800      	cmp	r0, #0
1a0054d2:	f2c0 80a4 	blt.w	1a00561e <freeRTOS_mpu9250Init+0x25a>
	if (freeRTOS_mpu9250WhoAmIAK8963() != 72) {
1a0054d6:	f7ff fd4f 	bl	1a004f78 <freeRTOS_mpu9250WhoAmIAK8963>
1a0054da:	2848      	cmp	r0, #72	; 0x48
1a0054dc:	f040 80a2 	bne.w	1a005624 <freeRTOS_mpu9250Init+0x260>
	if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0054e0:	2100      	movs	r1, #0
1a0054e2:	200a      	movs	r0, #10
1a0054e4:	f7ff fd58 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0054e8:	2800      	cmp	r0, #0
1a0054ea:	f2c0 809e 	blt.w	1a00562a <freeRTOS_mpu9250Init+0x266>
	vTaskDelay(100/portTICK_PERIOD_MS);
1a0054ee:	2064      	movs	r0, #100	; 0x64
1a0054f0:	f7fc fee6 	bl	1a0022c0 <vTaskDelay>
	if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a0054f4:	210f      	movs	r1, #15
1a0054f6:	200a      	movs	r0, #10
1a0054f8:	f7ff fd4e 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0054fc:	2800      	cmp	r0, #0
1a0054fe:	f2c0 8097 	blt.w	1a005630 <freeRTOS_mpu9250Init+0x26c>
	vTaskDelay(100/portTICK_PERIOD_MS);
1a005502:	2064      	movs	r0, #100	; 0x64
1a005504:	f7fc fedc 	bl	1a0022c0 <vTaskDelay>
	freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a005508:	2103      	movs	r1, #3
1a00550a:	2010      	movs	r0, #16
1a00550c:	f7ff fd08 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005510:	4b4f      	ldr	r3, [pc, #316]	; (1a005650 <freeRTOS_mpu9250Init+0x28c>)
1a005512:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a005516:	ee07 2a10 	vmov	s14, r2
1a00551a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a00551e:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a005660 <freeRTOS_mpu9250Init+0x29c>
1a005522:	ee37 7a64 	vsub.f32	s14, s14, s9
1a005526:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a005664 <freeRTOS_mpu9250Init+0x2a0>
1a00552a:	ee27 7a05 	vmul.f32	s14, s14, s10
1a00552e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a005532:	ee37 7a25 	vadd.f32	s14, s14, s11
1a005536:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a005668 <freeRTOS_mpu9250Init+0x2a4>
1a00553a:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a00553e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a00566c <freeRTOS_mpu9250Init+0x2a8>
1a005542:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a005546:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00554a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a00554e:	ee07 2a10 	vmov	s14, r2
1a005552:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a005556:	ee37 7a64 	vsub.f32	s14, s14, s9
1a00555a:	ee27 7a05 	vmul.f32	s14, s14, s10
1a00555e:	ee37 7a25 	vadd.f32	s14, s14, s11
1a005562:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a005566:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00556a:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00556e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a005572:	ee07 2a90 	vmov	s15, r2
1a005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a00557a:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a00557e:	ee67 7a85 	vmul.f32	s15, s15, s10
1a005582:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a005586:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a00558a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00558e:	ed83 7a05 	vstr	s14, [r3, #20]
	if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a005592:	2100      	movs	r1, #0
1a005594:	200a      	movs	r0, #10
1a005596:	f7ff fcff 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a00559a:	2800      	cmp	r0, #0
1a00559c:	db4b      	blt.n	1a005636 <freeRTOS_mpu9250Init+0x272>
	vTaskDelay(100/portTICK_PERIOD_MS);
1a00559e:	2064      	movs	r0, #100	; 0x64
1a0055a0:	f7fc fe8e 	bl	1a0022c0 <vTaskDelay>
	if (freeRTOS_mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a0055a4:	2116      	movs	r1, #22
1a0055a6:	200a      	movs	r0, #10
1a0055a8:	f7ff fcf6 	bl	1a004f98 <freeRTOS_mpu9250WriteAK8963Register>
1a0055ac:	2800      	cmp	r0, #0
1a0055ae:	db45      	blt.n	1a00563c <freeRTOS_mpu9250Init+0x278>
	vTaskDelay(100/portTICK_PERIOD_MS);
1a0055b0:	2064      	movs	r0, #100	; 0x64
1a0055b2:	f7fc fe85 	bl	1a0022c0 <vTaskDelay>
	if (freeRTOS_mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0055b6:	2101      	movs	r1, #1
1a0055b8:	206b      	movs	r0, #107	; 0x6b
1a0055ba:	f7ff fc8d 	bl	1a004ed8 <freeRTOS_mpu9250WriteRegister>
1a0055be:	2800      	cmp	r0, #0
1a0055c0:	db3f      	blt.n	1a005642 <freeRTOS_mpu9250Init+0x27e>
	freeRTOS_mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a0055c2:	2107      	movs	r1, #7
1a0055c4:	2003      	movs	r0, #3
1a0055c6:	f7ff fcab 	bl	1a004f20 <freeRTOS_mpu9250ReadAK8963Registers>
	if (freeRTOS_mpu9250CalibrateGyro() < 0) {
1a0055ca:	f7ff fe4f 	bl	1a00526c <freeRTOS_mpu9250CalibrateGyro>
1a0055ce:	2800      	cmp	r0, #0
1a0055d0:	db3a      	blt.n	1a005648 <freeRTOS_mpu9250Init+0x284>
	return 1;
1a0055d2:	2001      	movs	r0, #1
}
1a0055d4:	bd10      	pop	{r4, pc}
		return -1;
1a0055d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0055da:	e7fb      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -2;
1a0055dc:	f06f 0001 	mvn.w	r0, #1
1a0055e0:	e7f8      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -3;
1a0055e2:	f06f 0002 	mvn.w	r0, #2
1a0055e6:	e7f5      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -4;
1a0055e8:	f06f 0003 	mvn.w	r0, #3
1a0055ec:	e7f2      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -5;
1a0055ee:	f06f 0004 	mvn.w	r0, #4
1a0055f2:	e7ef      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -6;
1a0055f4:	f06f 0005 	mvn.w	r0, #5
1a0055f8:	e7ec      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -7;
1a0055fa:	f06f 0006 	mvn.w	r0, #6
1a0055fe:	e7e9      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -8;
1a005600:	f06f 0007 	mvn.w	r0, #7
1a005604:	e7e6      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -9;
1a005606:	f06f 0008 	mvn.w	r0, #8
1a00560a:	e7e3      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -10;
1a00560c:	f06f 0009 	mvn.w	r0, #9
1a005610:	e7e0      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -11;
1a005612:	f06f 000a 	mvn.w	r0, #10
1a005616:	e7dd      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -12;
1a005618:	f06f 000b 	mvn.w	r0, #11
1a00561c:	e7da      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -13;
1a00561e:	f06f 000c 	mvn.w	r0, #12
1a005622:	e7d7      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -14;
1a005624:	f06f 000d 	mvn.w	r0, #13
1a005628:	e7d4      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -15;
1a00562a:	f06f 000e 	mvn.w	r0, #14
1a00562e:	e7d1      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -16;
1a005630:	f06f 000f 	mvn.w	r0, #15
1a005634:	e7ce      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -17;
1a005636:	f06f 0010 	mvn.w	r0, #16
1a00563a:	e7cb      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -18;
1a00563c:	f06f 0011 	mvn.w	r0, #17
1a005640:	e7c8      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -19;
1a005642:	f06f 0012 	mvn.w	r0, #18
1a005646:	e7c5      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
		return -20;
1a005648:	f06f 0013 	mvn.w	r0, #19
1a00564c:	e7c2      	b.n	1a0055d4 <freeRTOS_mpu9250Init+0x210>
1a00564e:	bf00      	nop
1a005650:	10003648 	.word	0x10003648
1a005654:	00061a80 	.word	0x00061a80
1a005658:	3b9cea16 	.word	0x3b9cea16
1a00565c:	3a8ba0e4 	.word	0x3a8ba0e4
1a005660:	43000000 	.word	0x43000000
1a005664:	3b800000 	.word	0x3b800000
1a005668:	45998000 	.word	0x45998000
1a00566c:	46fff000 	.word	0x46fff000

1a005670 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a005670:	2301      	movs	r3, #1
1a005672:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a005676:	4b01      	ldr	r3, [pc, #4]	; (1a00567c <clearInterrupt+0xc>)
1a005678:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00567a:	4770      	bx	lr
1a00567c:	40087000 	.word	0x40087000

1a005680 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a005682:	4b12      	ldr	r3, [pc, #72]	; (1a0056cc <serveInterrupt+0x4c>)
1a005684:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a005686:	4b12      	ldr	r3, [pc, #72]	; (1a0056d0 <serveInterrupt+0x50>)
1a005688:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00568a:	2301      	movs	r3, #1
1a00568c:	4083      	lsls	r3, r0
1a00568e:	420b      	tst	r3, r1
1a005690:	d00c      	beq.n	1a0056ac <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a005692:	4910      	ldr	r1, [pc, #64]	; (1a0056d4 <serveInterrupt+0x54>)
1a005694:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a005696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00569a:	00d1      	lsls	r1, r2, #3
1a00569c:	4a0e      	ldr	r2, [pc, #56]	; (1a0056d8 <serveInterrupt+0x58>)
1a00569e:	440a      	add	r2, r1
1a0056a0:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0056a2:	4a0b      	ldr	r2, [pc, #44]	; (1a0056d0 <serveInterrupt+0x50>)
1a0056a4:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0056a6:	f7ff ffe3 	bl	1a005670 <clearInterrupt>
}
1a0056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0056ac:	4909      	ldr	r1, [pc, #36]	; (1a0056d4 <serveInterrupt+0x54>)
1a0056ae:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0056b0:	4d09      	ldr	r5, [pc, #36]	; (1a0056d8 <serveInterrupt+0x58>)
1a0056b2:	0051      	lsls	r1, r2, #1
1a0056b4:	188f      	adds	r7, r1, r2
1a0056b6:	00fc      	lsls	r4, r7, #3
1a0056b8:	4627      	mov	r7, r4
1a0056ba:	442c      	add	r4, r5
1a0056bc:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0056be:	6864      	ldr	r4, [r4, #4]
1a0056c0:	1b36      	subs	r6, r6, r4
1a0056c2:	443d      	add	r5, r7
1a0056c4:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0056c6:	4a02      	ldr	r2, [pc, #8]	; (1a0056d0 <serveInterrupt+0x50>)
1a0056c8:	6213      	str	r3, [r2, #32]
1a0056ca:	e7ec      	b.n	1a0056a6 <serveInterrupt+0x26>
1a0056cc:	1a00c008 	.word	0x1a00c008
1a0056d0:	40087000 	.word	0x40087000
1a0056d4:	40084000 	.word	0x40084000
1a0056d8:	10000094 	.word	0x10000094

1a0056dc <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0056dc:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0056de:	2000      	movs	r0, #0
1a0056e0:	f7ff ffce 	bl	1a005680 <serveInterrupt>
}
1a0056e4:	bd08      	pop	{r3, pc}

1a0056e6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0056e6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0056e8:	2001      	movs	r0, #1
1a0056ea:	f7ff ffc9 	bl	1a005680 <serveInterrupt>
}
1a0056ee:	bd08      	pop	{r3, pc}

1a0056f0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0056f0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0056f2:	2002      	movs	r0, #2
1a0056f4:	f7ff ffc4 	bl	1a005680 <serveInterrupt>
}
1a0056f8:	bd08      	pop	{r3, pc}
1a0056fa:	Address 0x000000001a0056fa is out of bounds.


1a0056fc <__aeabi_drsub>:
1a0056fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a005700:	e002      	b.n	1a005708 <__adddf3>
1a005702:	bf00      	nop

1a005704 <__aeabi_dsub>:
1a005704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a005708 <__adddf3>:
1a005708:	b530      	push	{r4, r5, lr}
1a00570a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00570e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a005712:	ea94 0f05 	teq	r4, r5
1a005716:	bf08      	it	eq
1a005718:	ea90 0f02 	teqeq	r0, r2
1a00571c:	bf1f      	itttt	ne
1a00571e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a005722:	ea55 0c02 	orrsne.w	ip, r5, r2
1a005726:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00572a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00572e:	f000 80e2 	beq.w	1a0058f6 <__adddf3+0x1ee>
1a005732:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a005736:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00573a:	bfb8      	it	lt
1a00573c:	426d      	neglt	r5, r5
1a00573e:	dd0c      	ble.n	1a00575a <__adddf3+0x52>
1a005740:	442c      	add	r4, r5
1a005742:	ea80 0202 	eor.w	r2, r0, r2
1a005746:	ea81 0303 	eor.w	r3, r1, r3
1a00574a:	ea82 0000 	eor.w	r0, r2, r0
1a00574e:	ea83 0101 	eor.w	r1, r3, r1
1a005752:	ea80 0202 	eor.w	r2, r0, r2
1a005756:	ea81 0303 	eor.w	r3, r1, r3
1a00575a:	2d36      	cmp	r5, #54	; 0x36
1a00575c:	bf88      	it	hi
1a00575e:	bd30      	pophi	{r4, r5, pc}
1a005760:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a005764:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005768:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00576c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a005770:	d002      	beq.n	1a005778 <__adddf3+0x70>
1a005772:	4240      	negs	r0, r0
1a005774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a005778:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00577c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005780:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a005784:	d002      	beq.n	1a00578c <__adddf3+0x84>
1a005786:	4252      	negs	r2, r2
1a005788:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00578c:	ea94 0f05 	teq	r4, r5
1a005790:	f000 80a7 	beq.w	1a0058e2 <__adddf3+0x1da>
1a005794:	f1a4 0401 	sub.w	r4, r4, #1
1a005798:	f1d5 0e20 	rsbs	lr, r5, #32
1a00579c:	db0d      	blt.n	1a0057ba <__adddf3+0xb2>
1a00579e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0057a2:	fa22 f205 	lsr.w	r2, r2, r5
1a0057a6:	1880      	adds	r0, r0, r2
1a0057a8:	f141 0100 	adc.w	r1, r1, #0
1a0057ac:	fa03 f20e 	lsl.w	r2, r3, lr
1a0057b0:	1880      	adds	r0, r0, r2
1a0057b2:	fa43 f305 	asr.w	r3, r3, r5
1a0057b6:	4159      	adcs	r1, r3
1a0057b8:	e00e      	b.n	1a0057d8 <__adddf3+0xd0>
1a0057ba:	f1a5 0520 	sub.w	r5, r5, #32
1a0057be:	f10e 0e20 	add.w	lr, lr, #32
1a0057c2:	2a01      	cmp	r2, #1
1a0057c4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0057c8:	bf28      	it	cs
1a0057ca:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0057ce:	fa43 f305 	asr.w	r3, r3, r5
1a0057d2:	18c0      	adds	r0, r0, r3
1a0057d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0057d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0057dc:	d507      	bpl.n	1a0057ee <__adddf3+0xe6>
1a0057de:	f04f 0e00 	mov.w	lr, #0
1a0057e2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0057e6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0057ea:	eb6e 0101 	sbc.w	r1, lr, r1
1a0057ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0057f2:	d31b      	bcc.n	1a00582c <__adddf3+0x124>
1a0057f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0057f8:	d30c      	bcc.n	1a005814 <__adddf3+0x10c>
1a0057fa:	0849      	lsrs	r1, r1, #1
1a0057fc:	ea5f 0030 	movs.w	r0, r0, rrx
1a005800:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a005804:	f104 0401 	add.w	r4, r4, #1
1a005808:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00580c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a005810:	f080 809a 	bcs.w	1a005948 <__adddf3+0x240>
1a005814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a005818:	bf08      	it	eq
1a00581a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00581e:	f150 0000 	adcs.w	r0, r0, #0
1a005822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005826:	ea41 0105 	orr.w	r1, r1, r5
1a00582a:	bd30      	pop	{r4, r5, pc}
1a00582c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a005830:	4140      	adcs	r0, r0
1a005832:	eb41 0101 	adc.w	r1, r1, r1
1a005836:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00583a:	f1a4 0401 	sub.w	r4, r4, #1
1a00583e:	d1e9      	bne.n	1a005814 <__adddf3+0x10c>
1a005840:	f091 0f00 	teq	r1, #0
1a005844:	bf04      	itt	eq
1a005846:	4601      	moveq	r1, r0
1a005848:	2000      	moveq	r0, #0
1a00584a:	fab1 f381 	clz	r3, r1
1a00584e:	bf08      	it	eq
1a005850:	3320      	addeq	r3, #32
1a005852:	f1a3 030b 	sub.w	r3, r3, #11
1a005856:	f1b3 0220 	subs.w	r2, r3, #32
1a00585a:	da0c      	bge.n	1a005876 <__adddf3+0x16e>
1a00585c:	320c      	adds	r2, #12
1a00585e:	dd08      	ble.n	1a005872 <__adddf3+0x16a>
1a005860:	f102 0c14 	add.w	ip, r2, #20
1a005864:	f1c2 020c 	rsb	r2, r2, #12
1a005868:	fa01 f00c 	lsl.w	r0, r1, ip
1a00586c:	fa21 f102 	lsr.w	r1, r1, r2
1a005870:	e00c      	b.n	1a00588c <__adddf3+0x184>
1a005872:	f102 0214 	add.w	r2, r2, #20
1a005876:	bfd8      	it	le
1a005878:	f1c2 0c20 	rsble	ip, r2, #32
1a00587c:	fa01 f102 	lsl.w	r1, r1, r2
1a005880:	fa20 fc0c 	lsr.w	ip, r0, ip
1a005884:	bfdc      	itt	le
1a005886:	ea41 010c 	orrle.w	r1, r1, ip
1a00588a:	4090      	lslle	r0, r2
1a00588c:	1ae4      	subs	r4, r4, r3
1a00588e:	bfa2      	ittt	ge
1a005890:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a005894:	4329      	orrge	r1, r5
1a005896:	bd30      	popge	{r4, r5, pc}
1a005898:	ea6f 0404 	mvn.w	r4, r4
1a00589c:	3c1f      	subs	r4, #31
1a00589e:	da1c      	bge.n	1a0058da <__adddf3+0x1d2>
1a0058a0:	340c      	adds	r4, #12
1a0058a2:	dc0e      	bgt.n	1a0058c2 <__adddf3+0x1ba>
1a0058a4:	f104 0414 	add.w	r4, r4, #20
1a0058a8:	f1c4 0220 	rsb	r2, r4, #32
1a0058ac:	fa20 f004 	lsr.w	r0, r0, r4
1a0058b0:	fa01 f302 	lsl.w	r3, r1, r2
1a0058b4:	ea40 0003 	orr.w	r0, r0, r3
1a0058b8:	fa21 f304 	lsr.w	r3, r1, r4
1a0058bc:	ea45 0103 	orr.w	r1, r5, r3
1a0058c0:	bd30      	pop	{r4, r5, pc}
1a0058c2:	f1c4 040c 	rsb	r4, r4, #12
1a0058c6:	f1c4 0220 	rsb	r2, r4, #32
1a0058ca:	fa20 f002 	lsr.w	r0, r0, r2
1a0058ce:	fa01 f304 	lsl.w	r3, r1, r4
1a0058d2:	ea40 0003 	orr.w	r0, r0, r3
1a0058d6:	4629      	mov	r1, r5
1a0058d8:	bd30      	pop	{r4, r5, pc}
1a0058da:	fa21 f004 	lsr.w	r0, r1, r4
1a0058de:	4629      	mov	r1, r5
1a0058e0:	bd30      	pop	{r4, r5, pc}
1a0058e2:	f094 0f00 	teq	r4, #0
1a0058e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0058ea:	bf06      	itte	eq
1a0058ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0058f0:	3401      	addeq	r4, #1
1a0058f2:	3d01      	subne	r5, #1
1a0058f4:	e74e      	b.n	1a005794 <__adddf3+0x8c>
1a0058f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0058fa:	bf18      	it	ne
1a0058fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a005900:	d029      	beq.n	1a005956 <__adddf3+0x24e>
1a005902:	ea94 0f05 	teq	r4, r5
1a005906:	bf08      	it	eq
1a005908:	ea90 0f02 	teqeq	r0, r2
1a00590c:	d005      	beq.n	1a00591a <__adddf3+0x212>
1a00590e:	ea54 0c00 	orrs.w	ip, r4, r0
1a005912:	bf04      	itt	eq
1a005914:	4619      	moveq	r1, r3
1a005916:	4610      	moveq	r0, r2
1a005918:	bd30      	pop	{r4, r5, pc}
1a00591a:	ea91 0f03 	teq	r1, r3
1a00591e:	bf1e      	ittt	ne
1a005920:	2100      	movne	r1, #0
1a005922:	2000      	movne	r0, #0
1a005924:	bd30      	popne	{r4, r5, pc}
1a005926:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00592a:	d105      	bne.n	1a005938 <__adddf3+0x230>
1a00592c:	0040      	lsls	r0, r0, #1
1a00592e:	4149      	adcs	r1, r1
1a005930:	bf28      	it	cs
1a005932:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a005936:	bd30      	pop	{r4, r5, pc}
1a005938:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00593c:	bf3c      	itt	cc
1a00593e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a005942:	bd30      	popcc	{r4, r5, pc}
1a005944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005948:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00594c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a005950:	f04f 0000 	mov.w	r0, #0
1a005954:	bd30      	pop	{r4, r5, pc}
1a005956:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00595a:	bf1a      	itte	ne
1a00595c:	4619      	movne	r1, r3
1a00595e:	4610      	movne	r0, r2
1a005960:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a005964:	bf1c      	itt	ne
1a005966:	460b      	movne	r3, r1
1a005968:	4602      	movne	r2, r0
1a00596a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00596e:	bf06      	itte	eq
1a005970:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a005974:	ea91 0f03 	teqeq	r1, r3
1a005978:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00597c:	bd30      	pop	{r4, r5, pc}
1a00597e:	bf00      	nop

1a005980 <__aeabi_ui2d>:
1a005980:	f090 0f00 	teq	r0, #0
1a005984:	bf04      	itt	eq
1a005986:	2100      	moveq	r1, #0
1a005988:	4770      	bxeq	lr
1a00598a:	b530      	push	{r4, r5, lr}
1a00598c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a005990:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005994:	f04f 0500 	mov.w	r5, #0
1a005998:	f04f 0100 	mov.w	r1, #0
1a00599c:	e750      	b.n	1a005840 <__adddf3+0x138>
1a00599e:	bf00      	nop

1a0059a0 <__aeabi_i2d>:
1a0059a0:	f090 0f00 	teq	r0, #0
1a0059a4:	bf04      	itt	eq
1a0059a6:	2100      	moveq	r1, #0
1a0059a8:	4770      	bxeq	lr
1a0059aa:	b530      	push	{r4, r5, lr}
1a0059ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0059b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0059b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0059b8:	bf48      	it	mi
1a0059ba:	4240      	negmi	r0, r0
1a0059bc:	f04f 0100 	mov.w	r1, #0
1a0059c0:	e73e      	b.n	1a005840 <__adddf3+0x138>
1a0059c2:	bf00      	nop

1a0059c4 <__aeabi_f2d>:
1a0059c4:	0042      	lsls	r2, r0, #1
1a0059c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0059ca:	ea4f 0131 	mov.w	r1, r1, rrx
1a0059ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0059d2:	bf1f      	itttt	ne
1a0059d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0059d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0059dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0059e0:	4770      	bxne	lr
1a0059e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0059e6:	bf08      	it	eq
1a0059e8:	4770      	bxeq	lr
1a0059ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0059ee:	bf04      	itt	eq
1a0059f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0059f4:	4770      	bxeq	lr
1a0059f6:	b530      	push	{r4, r5, lr}
1a0059f8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0059fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005a04:	e71c      	b.n	1a005840 <__adddf3+0x138>
1a005a06:	bf00      	nop

1a005a08 <__aeabi_ul2d>:
1a005a08:	ea50 0201 	orrs.w	r2, r0, r1
1a005a0c:	bf08      	it	eq
1a005a0e:	4770      	bxeq	lr
1a005a10:	b530      	push	{r4, r5, lr}
1a005a12:	f04f 0500 	mov.w	r5, #0
1a005a16:	e00a      	b.n	1a005a2e <__aeabi_l2d+0x16>

1a005a18 <__aeabi_l2d>:
1a005a18:	ea50 0201 	orrs.w	r2, r0, r1
1a005a1c:	bf08      	it	eq
1a005a1e:	4770      	bxeq	lr
1a005a20:	b530      	push	{r4, r5, lr}
1a005a22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a005a26:	d502      	bpl.n	1a005a2e <__aeabi_l2d+0x16>
1a005a28:	4240      	negs	r0, r0
1a005a2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a005a2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a005a32:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005a36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a005a3a:	f43f aed8 	beq.w	1a0057ee <__adddf3+0xe6>
1a005a3e:	f04f 0203 	mov.w	r2, #3
1a005a42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a005a46:	bf18      	it	ne
1a005a48:	3203      	addne	r2, #3
1a005a4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a005a4e:	bf18      	it	ne
1a005a50:	3203      	addne	r2, #3
1a005a52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a005a56:	f1c2 0320 	rsb	r3, r2, #32
1a005a5a:	fa00 fc03 	lsl.w	ip, r0, r3
1a005a5e:	fa20 f002 	lsr.w	r0, r0, r2
1a005a62:	fa01 fe03 	lsl.w	lr, r1, r3
1a005a66:	ea40 000e 	orr.w	r0, r0, lr
1a005a6a:	fa21 f102 	lsr.w	r1, r1, r2
1a005a6e:	4414      	add	r4, r2
1a005a70:	e6bd      	b.n	1a0057ee <__adddf3+0xe6>
1a005a72:	bf00      	nop

1a005a74 <__aeabi_dmul>:
1a005a74:	b570      	push	{r4, r5, r6, lr}
1a005a76:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a005a7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a005a7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005a82:	bf1d      	ittte	ne
1a005a84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005a88:	ea94 0f0c 	teqne	r4, ip
1a005a8c:	ea95 0f0c 	teqne	r5, ip
1a005a90:	f000 f8de 	bleq	1a005c50 <__aeabi_dmul+0x1dc>
1a005a94:	442c      	add	r4, r5
1a005a96:	ea81 0603 	eor.w	r6, r1, r3
1a005a9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a005a9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a005aa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a005aa6:	bf18      	it	ne
1a005aa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a005aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a005ab4:	d038      	beq.n	1a005b28 <__aeabi_dmul+0xb4>
1a005ab6:	fba0 ce02 	umull	ip, lr, r0, r2
1a005aba:	f04f 0500 	mov.w	r5, #0
1a005abe:	fbe1 e502 	umlal	lr, r5, r1, r2
1a005ac2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a005ac6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a005aca:	f04f 0600 	mov.w	r6, #0
1a005ace:	fbe1 5603 	umlal	r5, r6, r1, r3
1a005ad2:	f09c 0f00 	teq	ip, #0
1a005ad6:	bf18      	it	ne
1a005ad8:	f04e 0e01 	orrne.w	lr, lr, #1
1a005adc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a005ae0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a005ae4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a005ae8:	d204      	bcs.n	1a005af4 <__aeabi_dmul+0x80>
1a005aea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a005aee:	416d      	adcs	r5, r5
1a005af0:	eb46 0606 	adc.w	r6, r6, r6
1a005af4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a005af8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a005afc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a005b00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a005b04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a005b08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005b0c:	bf88      	it	hi
1a005b0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a005b12:	d81e      	bhi.n	1a005b52 <__aeabi_dmul+0xde>
1a005b14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a005b18:	bf08      	it	eq
1a005b1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a005b1e:	f150 0000 	adcs.w	r0, r0, #0
1a005b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005b26:	bd70      	pop	{r4, r5, r6, pc}
1a005b28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a005b2c:	ea46 0101 	orr.w	r1, r6, r1
1a005b30:	ea40 0002 	orr.w	r0, r0, r2
1a005b34:	ea81 0103 	eor.w	r1, r1, r3
1a005b38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a005b3c:	bfc2      	ittt	gt
1a005b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a005b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a005b46:	bd70      	popgt	{r4, r5, r6, pc}
1a005b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005b4c:	f04f 0e00 	mov.w	lr, #0
1a005b50:	3c01      	subs	r4, #1
1a005b52:	f300 80ab 	bgt.w	1a005cac <__aeabi_dmul+0x238>
1a005b56:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a005b5a:	bfde      	ittt	le
1a005b5c:	2000      	movle	r0, #0
1a005b5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a005b62:	bd70      	pople	{r4, r5, r6, pc}
1a005b64:	f1c4 0400 	rsb	r4, r4, #0
1a005b68:	3c20      	subs	r4, #32
1a005b6a:	da35      	bge.n	1a005bd8 <__aeabi_dmul+0x164>
1a005b6c:	340c      	adds	r4, #12
1a005b6e:	dc1b      	bgt.n	1a005ba8 <__aeabi_dmul+0x134>
1a005b70:	f104 0414 	add.w	r4, r4, #20
1a005b74:	f1c4 0520 	rsb	r5, r4, #32
1a005b78:	fa00 f305 	lsl.w	r3, r0, r5
1a005b7c:	fa20 f004 	lsr.w	r0, r0, r4
1a005b80:	fa01 f205 	lsl.w	r2, r1, r5
1a005b84:	ea40 0002 	orr.w	r0, r0, r2
1a005b88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a005b8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005b90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005b94:	fa21 f604 	lsr.w	r6, r1, r4
1a005b98:	eb42 0106 	adc.w	r1, r2, r6
1a005b9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005ba0:	bf08      	it	eq
1a005ba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005ba6:	bd70      	pop	{r4, r5, r6, pc}
1a005ba8:	f1c4 040c 	rsb	r4, r4, #12
1a005bac:	f1c4 0520 	rsb	r5, r4, #32
1a005bb0:	fa00 f304 	lsl.w	r3, r0, r4
1a005bb4:	fa20 f005 	lsr.w	r0, r0, r5
1a005bb8:	fa01 f204 	lsl.w	r2, r1, r4
1a005bbc:	ea40 0002 	orr.w	r0, r0, r2
1a005bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005bc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005bc8:	f141 0100 	adc.w	r1, r1, #0
1a005bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005bd0:	bf08      	it	eq
1a005bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005bd6:	bd70      	pop	{r4, r5, r6, pc}
1a005bd8:	f1c4 0520 	rsb	r5, r4, #32
1a005bdc:	fa00 f205 	lsl.w	r2, r0, r5
1a005be0:	ea4e 0e02 	orr.w	lr, lr, r2
1a005be4:	fa20 f304 	lsr.w	r3, r0, r4
1a005be8:	fa01 f205 	lsl.w	r2, r1, r5
1a005bec:	ea43 0302 	orr.w	r3, r3, r2
1a005bf0:	fa21 f004 	lsr.w	r0, r1, r4
1a005bf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005bf8:	fa21 f204 	lsr.w	r2, r1, r4
1a005bfc:	ea20 0002 	bic.w	r0, r0, r2
1a005c00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a005c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005c08:	bf08      	it	eq
1a005c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005c0e:	bd70      	pop	{r4, r5, r6, pc}
1a005c10:	f094 0f00 	teq	r4, #0
1a005c14:	d10f      	bne.n	1a005c36 <__aeabi_dmul+0x1c2>
1a005c16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a005c1a:	0040      	lsls	r0, r0, #1
1a005c1c:	eb41 0101 	adc.w	r1, r1, r1
1a005c20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005c24:	bf08      	it	eq
1a005c26:	3c01      	subeq	r4, #1
1a005c28:	d0f7      	beq.n	1a005c1a <__aeabi_dmul+0x1a6>
1a005c2a:	ea41 0106 	orr.w	r1, r1, r6
1a005c2e:	f095 0f00 	teq	r5, #0
1a005c32:	bf18      	it	ne
1a005c34:	4770      	bxne	lr
1a005c36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a005c3a:	0052      	lsls	r2, r2, #1
1a005c3c:	eb43 0303 	adc.w	r3, r3, r3
1a005c40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a005c44:	bf08      	it	eq
1a005c46:	3d01      	subeq	r5, #1
1a005c48:	d0f7      	beq.n	1a005c3a <__aeabi_dmul+0x1c6>
1a005c4a:	ea43 0306 	orr.w	r3, r3, r6
1a005c4e:	4770      	bx	lr
1a005c50:	ea94 0f0c 	teq	r4, ip
1a005c54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005c58:	bf18      	it	ne
1a005c5a:	ea95 0f0c 	teqne	r5, ip
1a005c5e:	d00c      	beq.n	1a005c7a <__aeabi_dmul+0x206>
1a005c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a005c64:	bf18      	it	ne
1a005c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005c6a:	d1d1      	bne.n	1a005c10 <__aeabi_dmul+0x19c>
1a005c6c:	ea81 0103 	eor.w	r1, r1, r3
1a005c70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005c74:	f04f 0000 	mov.w	r0, #0
1a005c78:	bd70      	pop	{r4, r5, r6, pc}
1a005c7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a005c7e:	bf06      	itte	eq
1a005c80:	4610      	moveq	r0, r2
1a005c82:	4619      	moveq	r1, r3
1a005c84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005c88:	d019      	beq.n	1a005cbe <__aeabi_dmul+0x24a>
1a005c8a:	ea94 0f0c 	teq	r4, ip
1a005c8e:	d102      	bne.n	1a005c96 <__aeabi_dmul+0x222>
1a005c90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a005c94:	d113      	bne.n	1a005cbe <__aeabi_dmul+0x24a>
1a005c96:	ea95 0f0c 	teq	r5, ip
1a005c9a:	d105      	bne.n	1a005ca8 <__aeabi_dmul+0x234>
1a005c9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a005ca0:	bf1c      	itt	ne
1a005ca2:	4610      	movne	r0, r2
1a005ca4:	4619      	movne	r1, r3
1a005ca6:	d10a      	bne.n	1a005cbe <__aeabi_dmul+0x24a>
1a005ca8:	ea81 0103 	eor.w	r1, r1, r3
1a005cac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005cb0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a005cb8:	f04f 0000 	mov.w	r0, #0
1a005cbc:	bd70      	pop	{r4, r5, r6, pc}
1a005cbe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a005cc2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a005cc6:	bd70      	pop	{r4, r5, r6, pc}

1a005cc8 <__aeabi_ddiv>:
1a005cc8:	b570      	push	{r4, r5, r6, lr}
1a005cca:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a005cce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a005cd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005cd6:	bf1d      	ittte	ne
1a005cd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005cdc:	ea94 0f0c 	teqne	r4, ip
1a005ce0:	ea95 0f0c 	teqne	r5, ip
1a005ce4:	f000 f8a7 	bleq	1a005e36 <__aeabi_ddiv+0x16e>
1a005ce8:	eba4 0405 	sub.w	r4, r4, r5
1a005cec:	ea81 0e03 	eor.w	lr, r1, r3
1a005cf0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a005cf4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005cf8:	f000 8088 	beq.w	1a005e0c <__aeabi_ddiv+0x144>
1a005cfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a005d00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a005d04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a005d08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a005d0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a005d10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a005d14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a005d18:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a005d1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a005d20:	429d      	cmp	r5, r3
1a005d22:	bf08      	it	eq
1a005d24:	4296      	cmpeq	r6, r2
1a005d26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a005d2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a005d2e:	d202      	bcs.n	1a005d36 <__aeabi_ddiv+0x6e>
1a005d30:	085b      	lsrs	r3, r3, #1
1a005d32:	ea4f 0232 	mov.w	r2, r2, rrx
1a005d36:	1ab6      	subs	r6, r6, r2
1a005d38:	eb65 0503 	sbc.w	r5, r5, r3
1a005d3c:	085b      	lsrs	r3, r3, #1
1a005d3e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005d42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a005d46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a005d4a:	ebb6 0e02 	subs.w	lr, r6, r2
1a005d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005d52:	bf22      	ittt	cs
1a005d54:	1ab6      	subcs	r6, r6, r2
1a005d56:	4675      	movcs	r5, lr
1a005d58:	ea40 000c 	orrcs.w	r0, r0, ip
1a005d5c:	085b      	lsrs	r3, r3, #1
1a005d5e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005d62:	ebb6 0e02 	subs.w	lr, r6, r2
1a005d66:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005d6a:	bf22      	ittt	cs
1a005d6c:	1ab6      	subcs	r6, r6, r2
1a005d6e:	4675      	movcs	r5, lr
1a005d70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a005d74:	085b      	lsrs	r3, r3, #1
1a005d76:	ea4f 0232 	mov.w	r2, r2, rrx
1a005d7a:	ebb6 0e02 	subs.w	lr, r6, r2
1a005d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005d82:	bf22      	ittt	cs
1a005d84:	1ab6      	subcs	r6, r6, r2
1a005d86:	4675      	movcs	r5, lr
1a005d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a005d8c:	085b      	lsrs	r3, r3, #1
1a005d8e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005d92:	ebb6 0e02 	subs.w	lr, r6, r2
1a005d96:	eb75 0e03 	sbcs.w	lr, r5, r3
1a005d9a:	bf22      	ittt	cs
1a005d9c:	1ab6      	subcs	r6, r6, r2
1a005d9e:	4675      	movcs	r5, lr
1a005da0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a005da4:	ea55 0e06 	orrs.w	lr, r5, r6
1a005da8:	d018      	beq.n	1a005ddc <__aeabi_ddiv+0x114>
1a005daa:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a005dae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a005db2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a005db6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a005dba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a005dbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a005dc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a005dc6:	d1c0      	bne.n	1a005d4a <__aeabi_ddiv+0x82>
1a005dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005dcc:	d10b      	bne.n	1a005de6 <__aeabi_ddiv+0x11e>
1a005dce:	ea41 0100 	orr.w	r1, r1, r0
1a005dd2:	f04f 0000 	mov.w	r0, #0
1a005dd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a005dda:	e7b6      	b.n	1a005d4a <__aeabi_ddiv+0x82>
1a005ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005de0:	bf04      	itt	eq
1a005de2:	4301      	orreq	r1, r0
1a005de4:	2000      	moveq	r0, #0
1a005de6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005dea:	bf88      	it	hi
1a005dec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a005df0:	f63f aeaf 	bhi.w	1a005b52 <__aeabi_dmul+0xde>
1a005df4:	ebb5 0c03 	subs.w	ip, r5, r3
1a005df8:	bf04      	itt	eq
1a005dfa:	ebb6 0c02 	subseq.w	ip, r6, r2
1a005dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a005e02:	f150 0000 	adcs.w	r0, r0, #0
1a005e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005e0a:	bd70      	pop	{r4, r5, r6, pc}
1a005e0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a005e10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a005e14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a005e18:	bfc2      	ittt	gt
1a005e1a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a005e1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a005e22:	bd70      	popgt	{r4, r5, r6, pc}
1a005e24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005e28:	f04f 0e00 	mov.w	lr, #0
1a005e2c:	3c01      	subs	r4, #1
1a005e2e:	e690      	b.n	1a005b52 <__aeabi_dmul+0xde>
1a005e30:	ea45 0e06 	orr.w	lr, r5, r6
1a005e34:	e68d      	b.n	1a005b52 <__aeabi_dmul+0xde>
1a005e36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005e3a:	ea94 0f0c 	teq	r4, ip
1a005e3e:	bf08      	it	eq
1a005e40:	ea95 0f0c 	teqeq	r5, ip
1a005e44:	f43f af3b 	beq.w	1a005cbe <__aeabi_dmul+0x24a>
1a005e48:	ea94 0f0c 	teq	r4, ip
1a005e4c:	d10a      	bne.n	1a005e64 <__aeabi_ddiv+0x19c>
1a005e4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a005e52:	f47f af34 	bne.w	1a005cbe <__aeabi_dmul+0x24a>
1a005e56:	ea95 0f0c 	teq	r5, ip
1a005e5a:	f47f af25 	bne.w	1a005ca8 <__aeabi_dmul+0x234>
1a005e5e:	4610      	mov	r0, r2
1a005e60:	4619      	mov	r1, r3
1a005e62:	e72c      	b.n	1a005cbe <__aeabi_dmul+0x24a>
1a005e64:	ea95 0f0c 	teq	r5, ip
1a005e68:	d106      	bne.n	1a005e78 <__aeabi_ddiv+0x1b0>
1a005e6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a005e6e:	f43f aefd 	beq.w	1a005c6c <__aeabi_dmul+0x1f8>
1a005e72:	4610      	mov	r0, r2
1a005e74:	4619      	mov	r1, r3
1a005e76:	e722      	b.n	1a005cbe <__aeabi_dmul+0x24a>
1a005e78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a005e7c:	bf18      	it	ne
1a005e7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a005e82:	f47f aec5 	bne.w	1a005c10 <__aeabi_dmul+0x19c>
1a005e86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a005e8a:	f47f af0d 	bne.w	1a005ca8 <__aeabi_dmul+0x234>
1a005e8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a005e92:	f47f aeeb 	bne.w	1a005c6c <__aeabi_dmul+0x1f8>
1a005e96:	e712      	b.n	1a005cbe <__aeabi_dmul+0x24a>

1a005e98 <__gedf2>:
1a005e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a005e9c:	e006      	b.n	1a005eac <__cmpdf2+0x4>
1a005e9e:	bf00      	nop

1a005ea0 <__ledf2>:
1a005ea0:	f04f 0c01 	mov.w	ip, #1
1a005ea4:	e002      	b.n	1a005eac <__cmpdf2+0x4>
1a005ea6:	bf00      	nop

1a005ea8 <__cmpdf2>:
1a005ea8:	f04f 0c01 	mov.w	ip, #1
1a005eac:	f84d cd04 	str.w	ip, [sp, #-4]!
1a005eb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005eb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a005ebc:	bf18      	it	ne
1a005ebe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a005ec2:	d01b      	beq.n	1a005efc <__cmpdf2+0x54>
1a005ec4:	b001      	add	sp, #4
1a005ec6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a005eca:	bf0c      	ite	eq
1a005ecc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a005ed0:	ea91 0f03 	teqne	r1, r3
1a005ed4:	bf02      	ittt	eq
1a005ed6:	ea90 0f02 	teqeq	r0, r2
1a005eda:	2000      	moveq	r0, #0
1a005edc:	4770      	bxeq	lr
1a005ede:	f110 0f00 	cmn.w	r0, #0
1a005ee2:	ea91 0f03 	teq	r1, r3
1a005ee6:	bf58      	it	pl
1a005ee8:	4299      	cmppl	r1, r3
1a005eea:	bf08      	it	eq
1a005eec:	4290      	cmpeq	r0, r2
1a005eee:	bf2c      	ite	cs
1a005ef0:	17d8      	asrcs	r0, r3, #31
1a005ef2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a005ef6:	f040 0001 	orr.w	r0, r0, #1
1a005efa:	4770      	bx	lr
1a005efc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005f00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005f04:	d102      	bne.n	1a005f0c <__cmpdf2+0x64>
1a005f06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a005f0a:	d107      	bne.n	1a005f1c <__cmpdf2+0x74>
1a005f0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a005f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005f14:	d1d6      	bne.n	1a005ec4 <__cmpdf2+0x1c>
1a005f16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a005f1a:	d0d3      	beq.n	1a005ec4 <__cmpdf2+0x1c>
1a005f1c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a005f20:	4770      	bx	lr
1a005f22:	bf00      	nop

1a005f24 <__aeabi_cdrcmple>:
1a005f24:	4684      	mov	ip, r0
1a005f26:	4610      	mov	r0, r2
1a005f28:	4662      	mov	r2, ip
1a005f2a:	468c      	mov	ip, r1
1a005f2c:	4619      	mov	r1, r3
1a005f2e:	4663      	mov	r3, ip
1a005f30:	e000      	b.n	1a005f34 <__aeabi_cdcmpeq>
1a005f32:	bf00      	nop

1a005f34 <__aeabi_cdcmpeq>:
1a005f34:	b501      	push	{r0, lr}
1a005f36:	f7ff ffb7 	bl	1a005ea8 <__cmpdf2>
1a005f3a:	2800      	cmp	r0, #0
1a005f3c:	bf48      	it	mi
1a005f3e:	f110 0f00 	cmnmi.w	r0, #0
1a005f42:	bd01      	pop	{r0, pc}

1a005f44 <__aeabi_dcmpeq>:
1a005f44:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005f48:	f7ff fff4 	bl	1a005f34 <__aeabi_cdcmpeq>
1a005f4c:	bf0c      	ite	eq
1a005f4e:	2001      	moveq	r0, #1
1a005f50:	2000      	movne	r0, #0
1a005f52:	f85d fb08 	ldr.w	pc, [sp], #8
1a005f56:	bf00      	nop

1a005f58 <__aeabi_dcmplt>:
1a005f58:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005f5c:	f7ff ffea 	bl	1a005f34 <__aeabi_cdcmpeq>
1a005f60:	bf34      	ite	cc
1a005f62:	2001      	movcc	r0, #1
1a005f64:	2000      	movcs	r0, #0
1a005f66:	f85d fb08 	ldr.w	pc, [sp], #8
1a005f6a:	bf00      	nop

1a005f6c <__aeabi_dcmple>:
1a005f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005f70:	f7ff ffe0 	bl	1a005f34 <__aeabi_cdcmpeq>
1a005f74:	bf94      	ite	ls
1a005f76:	2001      	movls	r0, #1
1a005f78:	2000      	movhi	r0, #0
1a005f7a:	f85d fb08 	ldr.w	pc, [sp], #8
1a005f7e:	bf00      	nop

1a005f80 <__aeabi_dcmpge>:
1a005f80:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005f84:	f7ff ffce 	bl	1a005f24 <__aeabi_cdrcmple>
1a005f88:	bf94      	ite	ls
1a005f8a:	2001      	movls	r0, #1
1a005f8c:	2000      	movhi	r0, #0
1a005f8e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005f92:	bf00      	nop

1a005f94 <__aeabi_dcmpgt>:
1a005f94:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005f98:	f7ff ffc4 	bl	1a005f24 <__aeabi_cdrcmple>
1a005f9c:	bf34      	ite	cc
1a005f9e:	2001      	movcc	r0, #1
1a005fa0:	2000      	movcs	r0, #0
1a005fa2:	f85d fb08 	ldr.w	pc, [sp], #8
1a005fa6:	bf00      	nop

1a005fa8 <__aeabi_d2f>:
1a005fa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005fac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a005fb0:	bf24      	itt	cs
1a005fb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a005fb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a005fba:	d90d      	bls.n	1a005fd8 <__aeabi_d2f+0x30>
1a005fbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a005fc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a005fc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a005fc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a005fcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a005fd0:	bf08      	it	eq
1a005fd2:	f020 0001 	biceq.w	r0, r0, #1
1a005fd6:	4770      	bx	lr
1a005fd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a005fdc:	d121      	bne.n	1a006022 <__aeabi_d2f+0x7a>
1a005fde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a005fe2:	bfbc      	itt	lt
1a005fe4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a005fe8:	4770      	bxlt	lr
1a005fea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005fee:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a005ff2:	f1c2 0218 	rsb	r2, r2, #24
1a005ff6:	f1c2 0c20 	rsb	ip, r2, #32
1a005ffa:	fa10 f30c 	lsls.w	r3, r0, ip
1a005ffe:	fa20 f002 	lsr.w	r0, r0, r2
1a006002:	bf18      	it	ne
1a006004:	f040 0001 	orrne.w	r0, r0, #1
1a006008:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00600c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a006010:	fa03 fc0c 	lsl.w	ip, r3, ip
1a006014:	ea40 000c 	orr.w	r0, r0, ip
1a006018:	fa23 f302 	lsr.w	r3, r3, r2
1a00601c:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a006020:	e7cc      	b.n	1a005fbc <__aeabi_d2f+0x14>
1a006022:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a006026:	d107      	bne.n	1a006038 <__aeabi_d2f+0x90>
1a006028:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a00602c:	bf1e      	ittt	ne
1a00602e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a006032:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a006036:	4770      	bxne	lr
1a006038:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a00603c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a006040:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a006044:	4770      	bx	lr
1a006046:	bf00      	nop

1a006048 <__aeabi_uldivmod>:
1a006048:	b953      	cbnz	r3, 1a006060 <__aeabi_uldivmod+0x18>
1a00604a:	b94a      	cbnz	r2, 1a006060 <__aeabi_uldivmod+0x18>
1a00604c:	2900      	cmp	r1, #0
1a00604e:	bf08      	it	eq
1a006050:	2800      	cmpeq	r0, #0
1a006052:	bf1c      	itt	ne
1a006054:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a006058:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00605c:	f000 b974 	b.w	1a006348 <__aeabi_idiv0>
1a006060:	f1ad 0c08 	sub.w	ip, sp, #8
1a006064:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a006068:	f000 f806 	bl	1a006078 <__udivmoddi4>
1a00606c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006074:	b004      	add	sp, #16
1a006076:	4770      	bx	lr

1a006078 <__udivmoddi4>:
1a006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00607c:	9e08      	ldr	r6, [sp, #32]
1a00607e:	4604      	mov	r4, r0
1a006080:	4688      	mov	r8, r1
1a006082:	2b00      	cmp	r3, #0
1a006084:	f040 8085 	bne.w	1a006192 <__udivmoddi4+0x11a>
1a006088:	428a      	cmp	r2, r1
1a00608a:	4615      	mov	r5, r2
1a00608c:	d948      	bls.n	1a006120 <__udivmoddi4+0xa8>
1a00608e:	fab2 f282 	clz	r2, r2
1a006092:	b14a      	cbz	r2, 1a0060a8 <__udivmoddi4+0x30>
1a006094:	f1c2 0720 	rsb	r7, r2, #32
1a006098:	fa01 f302 	lsl.w	r3, r1, r2
1a00609c:	fa20 f707 	lsr.w	r7, r0, r7
1a0060a0:	4095      	lsls	r5, r2
1a0060a2:	ea47 0803 	orr.w	r8, r7, r3
1a0060a6:	4094      	lsls	r4, r2
1a0060a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0060ac:	0c23      	lsrs	r3, r4, #16
1a0060ae:	fbb8 f7fe 	udiv	r7, r8, lr
1a0060b2:	fa1f fc85 	uxth.w	ip, r5
1a0060b6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0060ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0060be:	fb07 f10c 	mul.w	r1, r7, ip
1a0060c2:	4299      	cmp	r1, r3
1a0060c4:	d909      	bls.n	1a0060da <__udivmoddi4+0x62>
1a0060c6:	18eb      	adds	r3, r5, r3
1a0060c8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0060cc:	f080 80e3 	bcs.w	1a006296 <__udivmoddi4+0x21e>
1a0060d0:	4299      	cmp	r1, r3
1a0060d2:	f240 80e0 	bls.w	1a006296 <__udivmoddi4+0x21e>
1a0060d6:	3f02      	subs	r7, #2
1a0060d8:	442b      	add	r3, r5
1a0060da:	1a5b      	subs	r3, r3, r1
1a0060dc:	b2a4      	uxth	r4, r4
1a0060de:	fbb3 f0fe 	udiv	r0, r3, lr
1a0060e2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0060e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0060ea:	fb00 fc0c 	mul.w	ip, r0, ip
1a0060ee:	45a4      	cmp	ip, r4
1a0060f0:	d909      	bls.n	1a006106 <__udivmoddi4+0x8e>
1a0060f2:	192c      	adds	r4, r5, r4
1a0060f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0060f8:	f080 80cb 	bcs.w	1a006292 <__udivmoddi4+0x21a>
1a0060fc:	45a4      	cmp	ip, r4
1a0060fe:	f240 80c8 	bls.w	1a006292 <__udivmoddi4+0x21a>
1a006102:	3802      	subs	r0, #2
1a006104:	442c      	add	r4, r5
1a006106:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00610a:	eba4 040c 	sub.w	r4, r4, ip
1a00610e:	2700      	movs	r7, #0
1a006110:	b11e      	cbz	r6, 1a00611a <__udivmoddi4+0xa2>
1a006112:	40d4      	lsrs	r4, r2
1a006114:	2300      	movs	r3, #0
1a006116:	e9c6 4300 	strd	r4, r3, [r6]
1a00611a:	4639      	mov	r1, r7
1a00611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006120:	2a00      	cmp	r2, #0
1a006122:	d053      	beq.n	1a0061cc <__udivmoddi4+0x154>
1a006124:	fab2 f282 	clz	r2, r2
1a006128:	2a00      	cmp	r2, #0
1a00612a:	f040 80b6 	bne.w	1a00629a <__udivmoddi4+0x222>
1a00612e:	1b49      	subs	r1, r1, r5
1a006130:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006134:	fa1f f885 	uxth.w	r8, r5
1a006138:	2701      	movs	r7, #1
1a00613a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00613e:	0c23      	lsrs	r3, r4, #16
1a006140:	fb0e 111c 	mls	r1, lr, ip, r1
1a006144:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006148:	fb08 f10c 	mul.w	r1, r8, ip
1a00614c:	4299      	cmp	r1, r3
1a00614e:	d907      	bls.n	1a006160 <__udivmoddi4+0xe8>
1a006150:	18eb      	adds	r3, r5, r3
1a006152:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a006156:	d202      	bcs.n	1a00615e <__udivmoddi4+0xe6>
1a006158:	4299      	cmp	r1, r3
1a00615a:	f200 80ec 	bhi.w	1a006336 <__udivmoddi4+0x2be>
1a00615e:	4684      	mov	ip, r0
1a006160:	1a59      	subs	r1, r3, r1
1a006162:	b2a3      	uxth	r3, r4
1a006164:	fbb1 f0fe 	udiv	r0, r1, lr
1a006168:	fb0e 1410 	mls	r4, lr, r0, r1
1a00616c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a006170:	fb08 f800 	mul.w	r8, r8, r0
1a006174:	45a0      	cmp	r8, r4
1a006176:	d907      	bls.n	1a006188 <__udivmoddi4+0x110>
1a006178:	192c      	adds	r4, r5, r4
1a00617a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00617e:	d202      	bcs.n	1a006186 <__udivmoddi4+0x10e>
1a006180:	45a0      	cmp	r8, r4
1a006182:	f200 80dc 	bhi.w	1a00633e <__udivmoddi4+0x2c6>
1a006186:	4618      	mov	r0, r3
1a006188:	eba4 0408 	sub.w	r4, r4, r8
1a00618c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a006190:	e7be      	b.n	1a006110 <__udivmoddi4+0x98>
1a006192:	428b      	cmp	r3, r1
1a006194:	d908      	bls.n	1a0061a8 <__udivmoddi4+0x130>
1a006196:	2e00      	cmp	r6, #0
1a006198:	d078      	beq.n	1a00628c <__udivmoddi4+0x214>
1a00619a:	2700      	movs	r7, #0
1a00619c:	e9c6 0100 	strd	r0, r1, [r6]
1a0061a0:	4638      	mov	r0, r7
1a0061a2:	4639      	mov	r1, r7
1a0061a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0061a8:	fab3 f783 	clz	r7, r3
1a0061ac:	b97f      	cbnz	r7, 1a0061ce <__udivmoddi4+0x156>
1a0061ae:	428b      	cmp	r3, r1
1a0061b0:	d302      	bcc.n	1a0061b8 <__udivmoddi4+0x140>
1a0061b2:	4282      	cmp	r2, r0
1a0061b4:	f200 80bd 	bhi.w	1a006332 <__udivmoddi4+0x2ba>
1a0061b8:	1a84      	subs	r4, r0, r2
1a0061ba:	eb61 0303 	sbc.w	r3, r1, r3
1a0061be:	2001      	movs	r0, #1
1a0061c0:	4698      	mov	r8, r3
1a0061c2:	2e00      	cmp	r6, #0
1a0061c4:	d0a9      	beq.n	1a00611a <__udivmoddi4+0xa2>
1a0061c6:	e9c6 4800 	strd	r4, r8, [r6]
1a0061ca:	e7a6      	b.n	1a00611a <__udivmoddi4+0xa2>
1a0061cc:	deff      	udf	#255	; 0xff
1a0061ce:	f1c7 0520 	rsb	r5, r7, #32
1a0061d2:	40bb      	lsls	r3, r7
1a0061d4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0061d8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0061dc:	fa01 f407 	lsl.w	r4, r1, r7
1a0061e0:	fa20 f805 	lsr.w	r8, r0, r5
1a0061e4:	fa21 f305 	lsr.w	r3, r1, r5
1a0061e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0061ec:	ea48 0404 	orr.w	r4, r8, r4
1a0061f0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0061f4:	0c21      	lsrs	r1, r4, #16
1a0061f6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0061fa:	fa1f f88c 	uxth.w	r8, ip
1a0061fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a006202:	fb09 fa08 	mul.w	sl, r9, r8
1a006206:	459a      	cmp	sl, r3
1a006208:	fa02 f207 	lsl.w	r2, r2, r7
1a00620c:	fa00 f107 	lsl.w	r1, r0, r7
1a006210:	d90b      	bls.n	1a00622a <__udivmoddi4+0x1b2>
1a006212:	eb1c 0303 	adds.w	r3, ip, r3
1a006216:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00621a:	f080 8088 	bcs.w	1a00632e <__udivmoddi4+0x2b6>
1a00621e:	459a      	cmp	sl, r3
1a006220:	f240 8085 	bls.w	1a00632e <__udivmoddi4+0x2b6>
1a006224:	f1a9 0902 	sub.w	r9, r9, #2
1a006228:	4463      	add	r3, ip
1a00622a:	eba3 030a 	sub.w	r3, r3, sl
1a00622e:	b2a4      	uxth	r4, r4
1a006230:	fbb3 f0fe 	udiv	r0, r3, lr
1a006234:	fb0e 3310 	mls	r3, lr, r0, r3
1a006238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00623c:	fb00 f808 	mul.w	r8, r0, r8
1a006240:	45a0      	cmp	r8, r4
1a006242:	d908      	bls.n	1a006256 <__udivmoddi4+0x1de>
1a006244:	eb1c 0404 	adds.w	r4, ip, r4
1a006248:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00624c:	d26b      	bcs.n	1a006326 <__udivmoddi4+0x2ae>
1a00624e:	45a0      	cmp	r8, r4
1a006250:	d969      	bls.n	1a006326 <__udivmoddi4+0x2ae>
1a006252:	3802      	subs	r0, #2
1a006254:	4464      	add	r4, ip
1a006256:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00625a:	eba4 0408 	sub.w	r4, r4, r8
1a00625e:	fba0 8902 	umull	r8, r9, r0, r2
1a006262:	454c      	cmp	r4, r9
1a006264:	46c6      	mov	lr, r8
1a006266:	464b      	mov	r3, r9
1a006268:	d354      	bcc.n	1a006314 <__udivmoddi4+0x29c>
1a00626a:	d051      	beq.n	1a006310 <__udivmoddi4+0x298>
1a00626c:	2e00      	cmp	r6, #0
1a00626e:	d069      	beq.n	1a006344 <__udivmoddi4+0x2cc>
1a006270:	ebb1 020e 	subs.w	r2, r1, lr
1a006274:	eb64 0403 	sbc.w	r4, r4, r3
1a006278:	fa04 f505 	lsl.w	r5, r4, r5
1a00627c:	fa22 f307 	lsr.w	r3, r2, r7
1a006280:	40fc      	lsrs	r4, r7
1a006282:	431d      	orrs	r5, r3
1a006284:	e9c6 5400 	strd	r5, r4, [r6]
1a006288:	2700      	movs	r7, #0
1a00628a:	e746      	b.n	1a00611a <__udivmoddi4+0xa2>
1a00628c:	4637      	mov	r7, r6
1a00628e:	4630      	mov	r0, r6
1a006290:	e743      	b.n	1a00611a <__udivmoddi4+0xa2>
1a006292:	4618      	mov	r0, r3
1a006294:	e737      	b.n	1a006106 <__udivmoddi4+0x8e>
1a006296:	4607      	mov	r7, r0
1a006298:	e71f      	b.n	1a0060da <__udivmoddi4+0x62>
1a00629a:	f1c2 0320 	rsb	r3, r2, #32
1a00629e:	fa20 f703 	lsr.w	r7, r0, r3
1a0062a2:	4095      	lsls	r5, r2
1a0062a4:	fa01 f002 	lsl.w	r0, r1, r2
1a0062a8:	fa21 f303 	lsr.w	r3, r1, r3
1a0062ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0062b0:	4338      	orrs	r0, r7
1a0062b2:	0c01      	lsrs	r1, r0, #16
1a0062b4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0062b8:	fa1f f885 	uxth.w	r8, r5
1a0062bc:	fb0e 3317 	mls	r3, lr, r7, r3
1a0062c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0062c4:	fb07 f308 	mul.w	r3, r7, r8
1a0062c8:	428b      	cmp	r3, r1
1a0062ca:	fa04 f402 	lsl.w	r4, r4, r2
1a0062ce:	d907      	bls.n	1a0062e0 <__udivmoddi4+0x268>
1a0062d0:	1869      	adds	r1, r5, r1
1a0062d2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0062d6:	d228      	bcs.n	1a00632a <__udivmoddi4+0x2b2>
1a0062d8:	428b      	cmp	r3, r1
1a0062da:	d926      	bls.n	1a00632a <__udivmoddi4+0x2b2>
1a0062dc:	3f02      	subs	r7, #2
1a0062de:	4429      	add	r1, r5
1a0062e0:	1acb      	subs	r3, r1, r3
1a0062e2:	b281      	uxth	r1, r0
1a0062e4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0062e8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0062ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0062f0:	fb00 f308 	mul.w	r3, r0, r8
1a0062f4:	428b      	cmp	r3, r1
1a0062f6:	d907      	bls.n	1a006308 <__udivmoddi4+0x290>
1a0062f8:	1869      	adds	r1, r5, r1
1a0062fa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0062fe:	d210      	bcs.n	1a006322 <__udivmoddi4+0x2aa>
1a006300:	428b      	cmp	r3, r1
1a006302:	d90e      	bls.n	1a006322 <__udivmoddi4+0x2aa>
1a006304:	3802      	subs	r0, #2
1a006306:	4429      	add	r1, r5
1a006308:	1ac9      	subs	r1, r1, r3
1a00630a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00630e:	e714      	b.n	1a00613a <__udivmoddi4+0xc2>
1a006310:	4541      	cmp	r1, r8
1a006312:	d2ab      	bcs.n	1a00626c <__udivmoddi4+0x1f4>
1a006314:	ebb8 0e02 	subs.w	lr, r8, r2
1a006318:	eb69 020c 	sbc.w	r2, r9, ip
1a00631c:	3801      	subs	r0, #1
1a00631e:	4613      	mov	r3, r2
1a006320:	e7a4      	b.n	1a00626c <__udivmoddi4+0x1f4>
1a006322:	4660      	mov	r0, ip
1a006324:	e7f0      	b.n	1a006308 <__udivmoddi4+0x290>
1a006326:	4618      	mov	r0, r3
1a006328:	e795      	b.n	1a006256 <__udivmoddi4+0x1de>
1a00632a:	4667      	mov	r7, ip
1a00632c:	e7d8      	b.n	1a0062e0 <__udivmoddi4+0x268>
1a00632e:	4681      	mov	r9, r0
1a006330:	e77b      	b.n	1a00622a <__udivmoddi4+0x1b2>
1a006332:	4638      	mov	r0, r7
1a006334:	e745      	b.n	1a0061c2 <__udivmoddi4+0x14a>
1a006336:	f1ac 0c02 	sub.w	ip, ip, #2
1a00633a:	442b      	add	r3, r5
1a00633c:	e710      	b.n	1a006160 <__udivmoddi4+0xe8>
1a00633e:	3802      	subs	r0, #2
1a006340:	442c      	add	r4, r5
1a006342:	e721      	b.n	1a006188 <__udivmoddi4+0x110>
1a006344:	4637      	mov	r7, r6
1a006346:	e6e8      	b.n	1a00611a <__udivmoddi4+0xa2>

1a006348 <__aeabi_idiv0>:
1a006348:	4770      	bx	lr
1a00634a:	bf00      	nop

1a00634c <atoi>:
1a00634c:	220a      	movs	r2, #10
1a00634e:	2100      	movs	r1, #0
1a006350:	f001 bade 	b.w	1a007910 <strtol>

1a006354 <_fclose_r>:
1a006354:	b570      	push	{r4, r5, r6, lr}
1a006356:	2900      	cmp	r1, #0
1a006358:	d04a      	beq.n	1a0063f0 <_fclose_r+0x9c>
1a00635a:	4605      	mov	r5, r0
1a00635c:	460c      	mov	r4, r1
1a00635e:	b110      	cbz	r0, 1a006366 <_fclose_r+0x12>
1a006360:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a006362:	2b00      	cmp	r3, #0
1a006364:	d047      	beq.n	1a0063f6 <_fclose_r+0xa2>
1a006366:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00636c:	07d8      	lsls	r0, r3, #31
1a00636e:	d532      	bpl.n	1a0063d6 <_fclose_r+0x82>
1a006370:	2a00      	cmp	r2, #0
1a006372:	d03d      	beq.n	1a0063f0 <_fclose_r+0x9c>
1a006374:	4621      	mov	r1, r4
1a006376:	4628      	mov	r0, r5
1a006378:	f000 f854 	bl	1a006424 <__sflush_r>
1a00637c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00637e:	4606      	mov	r6, r0
1a006380:	b133      	cbz	r3, 1a006390 <_fclose_r+0x3c>
1a006382:	69e1      	ldr	r1, [r4, #28]
1a006384:	4628      	mov	r0, r5
1a006386:	4798      	blx	r3
1a006388:	2800      	cmp	r0, #0
1a00638a:	bfb8      	it	lt
1a00638c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a006390:	89a3      	ldrh	r3, [r4, #12]
1a006392:	061a      	lsls	r2, r3, #24
1a006394:	d43c      	bmi.n	1a006410 <_fclose_r+0xbc>
1a006396:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a006398:	b141      	cbz	r1, 1a0063ac <_fclose_r+0x58>
1a00639a:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00639e:	4299      	cmp	r1, r3
1a0063a0:	d002      	beq.n	1a0063a8 <_fclose_r+0x54>
1a0063a2:	4628      	mov	r0, r5
1a0063a4:	f000 f9c6 	bl	1a006734 <_free_r>
1a0063a8:	2300      	movs	r3, #0
1a0063aa:	6323      	str	r3, [r4, #48]	; 0x30
1a0063ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a0063ae:	b121      	cbz	r1, 1a0063ba <_fclose_r+0x66>
1a0063b0:	4628      	mov	r0, r5
1a0063b2:	f000 f9bf 	bl	1a006734 <_free_r>
1a0063b6:	2300      	movs	r3, #0
1a0063b8:	6463      	str	r3, [r4, #68]	; 0x44
1a0063ba:	f000 f95f 	bl	1a00667c <__sfp_lock_acquire>
1a0063be:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0063c0:	2200      	movs	r2, #0
1a0063c2:	07db      	lsls	r3, r3, #31
1a0063c4:	81a2      	strh	r2, [r4, #12]
1a0063c6:	d528      	bpl.n	1a00641a <_fclose_r+0xc6>
1a0063c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0063ca:	f000 faf9 	bl	1a0069c0 <__retarget_lock_close_recursive>
1a0063ce:	f000 f95b 	bl	1a006688 <__sfp_lock_release>
1a0063d2:	4630      	mov	r0, r6
1a0063d4:	bd70      	pop	{r4, r5, r6, pc}
1a0063d6:	0591      	lsls	r1, r2, #22
1a0063d8:	d4cc      	bmi.n	1a006374 <_fclose_r+0x20>
1a0063da:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0063dc:	f000 faf2 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a0063e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0063e4:	2b00      	cmp	r3, #0
1a0063e6:	d1c5      	bne.n	1a006374 <_fclose_r+0x20>
1a0063e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0063ea:	f016 0601 	ands.w	r6, r6, #1
1a0063ee:	d00a      	beq.n	1a006406 <_fclose_r+0xb2>
1a0063f0:	2600      	movs	r6, #0
1a0063f2:	4630      	mov	r0, r6
1a0063f4:	bd70      	pop	{r4, r5, r6, pc}
1a0063f6:	f000 f917 	bl	1a006628 <__sinit>
1a0063fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0063fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006400:	07d8      	lsls	r0, r3, #31
1a006402:	d4b5      	bmi.n	1a006370 <_fclose_r+0x1c>
1a006404:	e7e7      	b.n	1a0063d6 <_fclose_r+0x82>
1a006406:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006408:	f000 fade 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a00640c:	4630      	mov	r0, r6
1a00640e:	bd70      	pop	{r4, r5, r6, pc}
1a006410:	6921      	ldr	r1, [r4, #16]
1a006412:	4628      	mov	r0, r5
1a006414:	f000 f98e 	bl	1a006734 <_free_r>
1a006418:	e7bd      	b.n	1a006396 <_fclose_r+0x42>
1a00641a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00641c:	f000 fad4 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a006420:	e7d2      	b.n	1a0063c8 <_fclose_r+0x74>
1a006422:	bf00      	nop

1a006424 <__sflush_r>:
1a006424:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006428:	b29a      	uxth	r2, r3
1a00642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00642e:	460c      	mov	r4, r1
1a006430:	0711      	lsls	r1, r2, #28
1a006432:	4680      	mov	r8, r0
1a006434:	d448      	bmi.n	1a0064c8 <__sflush_r+0xa4>
1a006436:	6862      	ldr	r2, [r4, #4]
1a006438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00643c:	2a00      	cmp	r2, #0
1a00643e:	81a3      	strh	r3, [r4, #12]
1a006440:	dd5d      	ble.n	1a0064fe <__sflush_r+0xda>
1a006442:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a006444:	2d00      	cmp	r5, #0
1a006446:	d057      	beq.n	1a0064f8 <__sflush_r+0xd4>
1a006448:	2200      	movs	r2, #0
1a00644a:	b29b      	uxth	r3, r3
1a00644c:	f8d8 6000 	ldr.w	r6, [r8]
1a006450:	69e1      	ldr	r1, [r4, #28]
1a006452:	f8c8 2000 	str.w	r2, [r8]
1a006456:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a00645a:	d154      	bne.n	1a006506 <__sflush_r+0xe2>
1a00645c:	2301      	movs	r3, #1
1a00645e:	4640      	mov	r0, r8
1a006460:	47a8      	blx	r5
1a006462:	1c43      	adds	r3, r0, #1
1a006464:	4602      	mov	r2, r0
1a006466:	d065      	beq.n	1a006534 <__sflush_r+0x110>
1a006468:	89a3      	ldrh	r3, [r4, #12]
1a00646a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a00646c:	69e1      	ldr	r1, [r4, #28]
1a00646e:	075f      	lsls	r7, r3, #29
1a006470:	d505      	bpl.n	1a00647e <__sflush_r+0x5a>
1a006472:	6860      	ldr	r0, [r4, #4]
1a006474:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a006476:	1a12      	subs	r2, r2, r0
1a006478:	b10b      	cbz	r3, 1a00647e <__sflush_r+0x5a>
1a00647a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00647c:	1ad2      	subs	r2, r2, r3
1a00647e:	2300      	movs	r3, #0
1a006480:	4640      	mov	r0, r8
1a006482:	47a8      	blx	r5
1a006484:	1c45      	adds	r5, r0, #1
1a006486:	d148      	bne.n	1a00651a <__sflush_r+0xf6>
1a006488:	f8d8 2000 	ldr.w	r2, [r8]
1a00648c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006490:	2a00      	cmp	r2, #0
1a006492:	d05c      	beq.n	1a00654e <__sflush_r+0x12a>
1a006494:	2a1d      	cmp	r2, #29
1a006496:	d001      	beq.n	1a00649c <__sflush_r+0x78>
1a006498:	2a16      	cmp	r2, #22
1a00649a:	d164      	bne.n	1a006566 <__sflush_r+0x142>
1a00649c:	6922      	ldr	r2, [r4, #16]
1a00649e:	2100      	movs	r1, #0
1a0064a0:	e9c4 2100 	strd	r2, r1, [r4]
1a0064a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a0064a8:	81a3      	strh	r3, [r4, #12]
1a0064aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0064ac:	f8c8 6000 	str.w	r6, [r8]
1a0064b0:	b311      	cbz	r1, 1a0064f8 <__sflush_r+0xd4>
1a0064b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0064b6:	4299      	cmp	r1, r3
1a0064b8:	d002      	beq.n	1a0064c0 <__sflush_r+0x9c>
1a0064ba:	4640      	mov	r0, r8
1a0064bc:	f000 f93a 	bl	1a006734 <_free_r>
1a0064c0:	2000      	movs	r0, #0
1a0064c2:	6320      	str	r0, [r4, #48]	; 0x30
1a0064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0064c8:	6926      	ldr	r6, [r4, #16]
1a0064ca:	b1ae      	cbz	r6, 1a0064f8 <__sflush_r+0xd4>
1a0064cc:	6825      	ldr	r5, [r4, #0]
1a0064ce:	6026      	str	r6, [r4, #0]
1a0064d0:	0791      	lsls	r1, r2, #30
1a0064d2:	bf0c      	ite	eq
1a0064d4:	6963      	ldreq	r3, [r4, #20]
1a0064d6:	2300      	movne	r3, #0
1a0064d8:	1bad      	subs	r5, r5, r6
1a0064da:	60a3      	str	r3, [r4, #8]
1a0064dc:	e00a      	b.n	1a0064f4 <__sflush_r+0xd0>
1a0064de:	462b      	mov	r3, r5
1a0064e0:	4632      	mov	r2, r6
1a0064e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0064e4:	69e1      	ldr	r1, [r4, #28]
1a0064e6:	4640      	mov	r0, r8
1a0064e8:	47b8      	blx	r7
1a0064ea:	2800      	cmp	r0, #0
1a0064ec:	eba5 0500 	sub.w	r5, r5, r0
1a0064f0:	4406      	add	r6, r0
1a0064f2:	dd0a      	ble.n	1a00650a <__sflush_r+0xe6>
1a0064f4:	2d00      	cmp	r5, #0
1a0064f6:	dcf2      	bgt.n	1a0064de <__sflush_r+0xba>
1a0064f8:	2000      	movs	r0, #0
1a0064fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0064fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a006500:	2a00      	cmp	r2, #0
1a006502:	dc9e      	bgt.n	1a006442 <__sflush_r+0x1e>
1a006504:	e7f8      	b.n	1a0064f8 <__sflush_r+0xd4>
1a006506:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a006508:	e7b1      	b.n	1a00646e <__sflush_r+0x4a>
1a00650a:	89a3      	ldrh	r3, [r4, #12]
1a00650c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006510:	81a3      	strh	r3, [r4, #12]
1a006512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00651e:	6922      	ldr	r2, [r4, #16]
1a006520:	6022      	str	r2, [r4, #0]
1a006522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006526:	2200      	movs	r2, #0
1a006528:	6062      	str	r2, [r4, #4]
1a00652a:	04da      	lsls	r2, r3, #19
1a00652c:	81a3      	strh	r3, [r4, #12]
1a00652e:	d5bc      	bpl.n	1a0064aa <__sflush_r+0x86>
1a006530:	6520      	str	r0, [r4, #80]	; 0x50
1a006532:	e7ba      	b.n	1a0064aa <__sflush_r+0x86>
1a006534:	f8d8 3000 	ldr.w	r3, [r8]
1a006538:	2b00      	cmp	r3, #0
1a00653a:	d095      	beq.n	1a006468 <__sflush_r+0x44>
1a00653c:	2b1d      	cmp	r3, #29
1a00653e:	d00f      	beq.n	1a006560 <__sflush_r+0x13c>
1a006540:	2b16      	cmp	r3, #22
1a006542:	d00d      	beq.n	1a006560 <__sflush_r+0x13c>
1a006544:	89a3      	ldrh	r3, [r4, #12]
1a006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00654a:	81a3      	strh	r3, [r4, #12]
1a00654c:	e7d5      	b.n	1a0064fa <__sflush_r+0xd6>
1a00654e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006552:	6921      	ldr	r1, [r4, #16]
1a006554:	81a3      	strh	r3, [r4, #12]
1a006556:	04db      	lsls	r3, r3, #19
1a006558:	e9c4 1200 	strd	r1, r2, [r4]
1a00655c:	d5a5      	bpl.n	1a0064aa <__sflush_r+0x86>
1a00655e:	e7e7      	b.n	1a006530 <__sflush_r+0x10c>
1a006560:	f8c8 6000 	str.w	r6, [r8]
1a006564:	e7c8      	b.n	1a0064f8 <__sflush_r+0xd4>
1a006566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00656a:	81a3      	strh	r3, [r4, #12]
1a00656c:	e7c5      	b.n	1a0064fa <__sflush_r+0xd6>
1a00656e:	bf00      	nop

1a006570 <_fflush_r>:
1a006570:	b538      	push	{r3, r4, r5, lr}
1a006572:	460d      	mov	r5, r1
1a006574:	4604      	mov	r4, r0
1a006576:	b108      	cbz	r0, 1a00657c <_fflush_r+0xc>
1a006578:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00657a:	b1a3      	cbz	r3, 1a0065a6 <_fflush_r+0x36>
1a00657c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a006580:	b1b8      	cbz	r0, 1a0065b2 <_fflush_r+0x42>
1a006582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a006584:	07db      	lsls	r3, r3, #31
1a006586:	d401      	bmi.n	1a00658c <_fflush_r+0x1c>
1a006588:	0581      	lsls	r1, r0, #22
1a00658a:	d515      	bpl.n	1a0065b8 <_fflush_r+0x48>
1a00658c:	4620      	mov	r0, r4
1a00658e:	4629      	mov	r1, r5
1a006590:	f7ff ff48 	bl	1a006424 <__sflush_r>
1a006594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a006596:	07da      	lsls	r2, r3, #31
1a006598:	4604      	mov	r4, r0
1a00659a:	d402      	bmi.n	1a0065a2 <_fflush_r+0x32>
1a00659c:	89ab      	ldrh	r3, [r5, #12]
1a00659e:	059b      	lsls	r3, r3, #22
1a0065a0:	d50e      	bpl.n	1a0065c0 <_fflush_r+0x50>
1a0065a2:	4620      	mov	r0, r4
1a0065a4:	bd38      	pop	{r3, r4, r5, pc}
1a0065a6:	f000 f83f 	bl	1a006628 <__sinit>
1a0065aa:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a0065ae:	2800      	cmp	r0, #0
1a0065b0:	d1e7      	bne.n	1a006582 <_fflush_r+0x12>
1a0065b2:	4604      	mov	r4, r0
1a0065b4:	4620      	mov	r0, r4
1a0065b6:	bd38      	pop	{r3, r4, r5, pc}
1a0065b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0065ba:	f000 fa03 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a0065be:	e7e5      	b.n	1a00658c <_fflush_r+0x1c>
1a0065c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0065c2:	f000 fa01 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a0065c6:	4620      	mov	r0, r4
1a0065c8:	bd38      	pop	{r3, r4, r5, pc}
1a0065ca:	bf00      	nop

1a0065cc <std>:
1a0065cc:	b510      	push	{r4, lr}
1a0065ce:	2300      	movs	r3, #0
1a0065d0:	4604      	mov	r4, r0
1a0065d2:	8181      	strh	r1, [r0, #12]
1a0065d4:	81c2      	strh	r2, [r0, #14]
1a0065d6:	e9c0 3300 	strd	r3, r3, [r0]
1a0065da:	6083      	str	r3, [r0, #8]
1a0065dc:	6643      	str	r3, [r0, #100]	; 0x64
1a0065de:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0065e2:	6183      	str	r3, [r0, #24]
1a0065e4:	4619      	mov	r1, r3
1a0065e6:	2208      	movs	r2, #8
1a0065e8:	305c      	adds	r0, #92	; 0x5c
1a0065ea:	f000 fd41 	bl	1a007070 <memset>
1a0065ee:	4807      	ldr	r0, [pc, #28]	; (1a00660c <std+0x40>)
1a0065f0:	4907      	ldr	r1, [pc, #28]	; (1a006610 <std+0x44>)
1a0065f2:	4a08      	ldr	r2, [pc, #32]	; (1a006614 <std+0x48>)
1a0065f4:	4b08      	ldr	r3, [pc, #32]	; (1a006618 <std+0x4c>)
1a0065f6:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0065f8:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0065fc:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a006600:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a006604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a006608:	f000 b9d8 	b.w	1a0069bc <__retarget_lock_init_recursive>
1a00660c:	1a0071fd 	.word	0x1a0071fd
1a006610:	1a007221 	.word	0x1a007221
1a006614:	1a007261 	.word	0x1a007261
1a006618:	1a007281 	.word	0x1a007281

1a00661c <_cleanup_r>:
1a00661c:	4901      	ldr	r1, [pc, #4]	; (1a006624 <_cleanup_r+0x8>)
1a00661e:	f000 b97f 	b.w	1a006920 <_fwalk_reent>
1a006622:	bf00      	nop
1a006624:	1a006355 	.word	0x1a006355

1a006628 <__sinit>:
1a006628:	b510      	push	{r4, lr}
1a00662a:	4604      	mov	r4, r0
1a00662c:	4811      	ldr	r0, [pc, #68]	; (1a006674 <__sinit+0x4c>)
1a00662e:	f000 f9c9 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a006632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a006634:	b9c2      	cbnz	r2, 1a006668 <__sinit+0x40>
1a006636:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a00663a:	480f      	ldr	r0, [pc, #60]	; (1a006678 <__sinit+0x50>)
1a00663c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a006640:	2103      	movs	r1, #3
1a006642:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a006646:	63e0      	str	r0, [r4, #60]	; 0x3c
1a006648:	2104      	movs	r1, #4
1a00664a:	6860      	ldr	r0, [r4, #4]
1a00664c:	f7ff ffbe 	bl	1a0065cc <std>
1a006650:	2201      	movs	r2, #1
1a006652:	2109      	movs	r1, #9
1a006654:	68a0      	ldr	r0, [r4, #8]
1a006656:	f7ff ffb9 	bl	1a0065cc <std>
1a00665a:	2202      	movs	r2, #2
1a00665c:	2112      	movs	r1, #18
1a00665e:	68e0      	ldr	r0, [r4, #12]
1a006660:	f7ff ffb4 	bl	1a0065cc <std>
1a006664:	2301      	movs	r3, #1
1a006666:	63a3      	str	r3, [r4, #56]	; 0x38
1a006668:	4802      	ldr	r0, [pc, #8]	; (1a006674 <__sinit+0x4c>)
1a00666a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00666e:	f000 b9ab 	b.w	1a0069c8 <__retarget_lock_release_recursive>
1a006672:	bf00      	nop
1a006674:	100038a4 	.word	0x100038a4
1a006678:	1a00661d 	.word	0x1a00661d

1a00667c <__sfp_lock_acquire>:
1a00667c:	4801      	ldr	r0, [pc, #4]	; (1a006684 <__sfp_lock_acquire+0x8>)
1a00667e:	f000 b9a1 	b.w	1a0069c4 <__retarget_lock_acquire_recursive>
1a006682:	bf00      	nop
1a006684:	100038b8 	.word	0x100038b8

1a006688 <__sfp_lock_release>:
1a006688:	4801      	ldr	r0, [pc, #4]	; (1a006690 <__sfp_lock_release+0x8>)
1a00668a:	f000 b99d 	b.w	1a0069c8 <__retarget_lock_release_recursive>
1a00668e:	bf00      	nop
1a006690:	100038b8 	.word	0x100038b8

1a006694 <_malloc_trim_r>:
1a006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006696:	4f24      	ldr	r7, [pc, #144]	; (1a006728 <_malloc_trim_r+0x94>)
1a006698:	460c      	mov	r4, r1
1a00669a:	4606      	mov	r6, r0
1a00669c:	f000 fd38 	bl	1a007110 <__malloc_lock>
1a0066a0:	68bb      	ldr	r3, [r7, #8]
1a0066a2:	685d      	ldr	r5, [r3, #4]
1a0066a4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a0066a8:	310f      	adds	r1, #15
1a0066aa:	f025 0503 	bic.w	r5, r5, #3
1a0066ae:	4429      	add	r1, r5
1a0066b0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0066b4:	f021 010f 	bic.w	r1, r1, #15
1a0066b8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0066bc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0066c0:	db07      	blt.n	1a0066d2 <_malloc_trim_r+0x3e>
1a0066c2:	2100      	movs	r1, #0
1a0066c4:	4630      	mov	r0, r6
1a0066c6:	f7fa fe2b 	bl	1a001320 <_sbrk_r>
1a0066ca:	68bb      	ldr	r3, [r7, #8]
1a0066cc:	442b      	add	r3, r5
1a0066ce:	4298      	cmp	r0, r3
1a0066d0:	d004      	beq.n	1a0066dc <_malloc_trim_r+0x48>
1a0066d2:	4630      	mov	r0, r6
1a0066d4:	f000 fd22 	bl	1a00711c <__malloc_unlock>
1a0066d8:	2000      	movs	r0, #0
1a0066da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0066dc:	4261      	negs	r1, r4
1a0066de:	4630      	mov	r0, r6
1a0066e0:	f7fa fe1e 	bl	1a001320 <_sbrk_r>
1a0066e4:	3001      	adds	r0, #1
1a0066e6:	d00d      	beq.n	1a006704 <_malloc_trim_r+0x70>
1a0066e8:	4b10      	ldr	r3, [pc, #64]	; (1a00672c <_malloc_trim_r+0x98>)
1a0066ea:	68ba      	ldr	r2, [r7, #8]
1a0066ec:	6819      	ldr	r1, [r3, #0]
1a0066ee:	1b2d      	subs	r5, r5, r4
1a0066f0:	f045 0501 	orr.w	r5, r5, #1
1a0066f4:	4630      	mov	r0, r6
1a0066f6:	1b09      	subs	r1, r1, r4
1a0066f8:	6055      	str	r5, [r2, #4]
1a0066fa:	6019      	str	r1, [r3, #0]
1a0066fc:	f000 fd0e 	bl	1a00711c <__malloc_unlock>
1a006700:	2001      	movs	r0, #1
1a006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006704:	2100      	movs	r1, #0
1a006706:	4630      	mov	r0, r6
1a006708:	f7fa fe0a 	bl	1a001320 <_sbrk_r>
1a00670c:	68ba      	ldr	r2, [r7, #8]
1a00670e:	1a83      	subs	r3, r0, r2
1a006710:	2b0f      	cmp	r3, #15
1a006712:	ddde      	ble.n	1a0066d2 <_malloc_trim_r+0x3e>
1a006714:	4c06      	ldr	r4, [pc, #24]	; (1a006730 <_malloc_trim_r+0x9c>)
1a006716:	4905      	ldr	r1, [pc, #20]	; (1a00672c <_malloc_trim_r+0x98>)
1a006718:	6824      	ldr	r4, [r4, #0]
1a00671a:	f043 0301 	orr.w	r3, r3, #1
1a00671e:	1b00      	subs	r0, r0, r4
1a006720:	6053      	str	r3, [r2, #4]
1a006722:	6008      	str	r0, [r1, #0]
1a006724:	e7d5      	b.n	1a0066d2 <_malloc_trim_r+0x3e>
1a006726:	bf00      	nop
1a006728:	10000508 	.word	0x10000508
1a00672c:	100037a0 	.word	0x100037a0
1a006730:	10000910 	.word	0x10000910

1a006734 <_free_r>:
1a006734:	2900      	cmp	r1, #0
1a006736:	d05d      	beq.n	1a0067f4 <_free_r+0xc0>
1a006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00673a:	460f      	mov	r7, r1
1a00673c:	4606      	mov	r6, r0
1a00673e:	f000 fce7 	bl	1a007110 <__malloc_lock>
1a006742:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a006746:	4c73      	ldr	r4, [pc, #460]	; (1a006914 <_free_r+0x1e0>)
1a006748:	f02c 0301 	bic.w	r3, ip, #1
1a00674c:	f1a7 0008 	sub.w	r0, r7, #8
1a006750:	18c2      	adds	r2, r0, r3
1a006752:	68a1      	ldr	r1, [r4, #8]
1a006754:	6855      	ldr	r5, [r2, #4]
1a006756:	4291      	cmp	r1, r2
1a006758:	f025 0503 	bic.w	r5, r5, #3
1a00675c:	d07f      	beq.n	1a00685e <_free_r+0x12a>
1a00675e:	f01c 0f01 	tst.w	ip, #1
1a006762:	6055      	str	r5, [r2, #4]
1a006764:	eb02 0105 	add.w	r1, r2, r5
1a006768:	d133      	bne.n	1a0067d2 <_free_r+0x9e>
1a00676a:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a00676e:	6849      	ldr	r1, [r1, #4]
1a006770:	eba0 000e 	sub.w	r0, r0, lr
1a006774:	f104 0c08 	add.w	ip, r4, #8
1a006778:	6887      	ldr	r7, [r0, #8]
1a00677a:	4567      	cmp	r7, ip
1a00677c:	4473      	add	r3, lr
1a00677e:	f001 0101 	and.w	r1, r1, #1
1a006782:	d060      	beq.n	1a006846 <_free_r+0x112>
1a006784:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a006788:	f8c7 e00c 	str.w	lr, [r7, #12]
1a00678c:	f8ce 7008 	str.w	r7, [lr, #8]
1a006790:	2900      	cmp	r1, #0
1a006792:	f000 8089 	beq.w	1a0068a8 <_free_r+0x174>
1a006796:	f043 0101 	orr.w	r1, r3, #1
1a00679a:	6041      	str	r1, [r0, #4]
1a00679c:	6013      	str	r3, [r2, #0]
1a00679e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0067a2:	d230      	bcs.n	1a006806 <_free_r+0xd2>
1a0067a4:	08db      	lsrs	r3, r3, #3
1a0067a6:	1c59      	adds	r1, r3, #1
1a0067a8:	6865      	ldr	r5, [r4, #4]
1a0067aa:	109a      	asrs	r2, r3, #2
1a0067ac:	2301      	movs	r3, #1
1a0067ae:	4093      	lsls	r3, r2
1a0067b0:	432b      	orrs	r3, r5
1a0067b2:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a0067b6:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a0067ba:	6063      	str	r3, [r4, #4]
1a0067bc:	3a08      	subs	r2, #8
1a0067be:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0067c2:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0067c6:	60e8      	str	r0, [r5, #12]
1a0067c8:	4630      	mov	r0, r6
1a0067ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0067ce:	f000 bca5 	b.w	1a00711c <__malloc_unlock>
1a0067d2:	6849      	ldr	r1, [r1, #4]
1a0067d4:	07c9      	lsls	r1, r1, #31
1a0067d6:	d40e      	bmi.n	1a0067f6 <_free_r+0xc2>
1a0067d8:	442b      	add	r3, r5
1a0067da:	f104 0c08 	add.w	ip, r4, #8
1a0067de:	6891      	ldr	r1, [r2, #8]
1a0067e0:	4561      	cmp	r1, ip
1a0067e2:	f043 0501 	orr.w	r5, r3, #1
1a0067e6:	d067      	beq.n	1a0068b8 <_free_r+0x184>
1a0067e8:	68d2      	ldr	r2, [r2, #12]
1a0067ea:	60ca      	str	r2, [r1, #12]
1a0067ec:	6091      	str	r1, [r2, #8]
1a0067ee:	6045      	str	r5, [r0, #4]
1a0067f0:	50c3      	str	r3, [r0, r3]
1a0067f2:	e7d4      	b.n	1a00679e <_free_r+0x6a>
1a0067f4:	4770      	bx	lr
1a0067f6:	f043 0101 	orr.w	r1, r3, #1
1a0067fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0067fe:	f847 1c04 	str.w	r1, [r7, #-4]
1a006802:	6013      	str	r3, [r2, #0]
1a006804:	d3ce      	bcc.n	1a0067a4 <_free_r+0x70>
1a006806:	0a5a      	lsrs	r2, r3, #9
1a006808:	2a04      	cmp	r2, #4
1a00680a:	d842      	bhi.n	1a006892 <_free_r+0x15e>
1a00680c:	099a      	lsrs	r2, r3, #6
1a00680e:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a006812:	00ff      	lsls	r7, r7, #3
1a006814:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a006818:	19e5      	adds	r5, r4, r7
1a00681a:	59e2      	ldr	r2, [r4, r7]
1a00681c:	3d08      	subs	r5, #8
1a00681e:	4295      	cmp	r5, r2
1a006820:	d051      	beq.n	1a0068c6 <_free_r+0x192>
1a006822:	6851      	ldr	r1, [r2, #4]
1a006824:	f021 0103 	bic.w	r1, r1, #3
1a006828:	4299      	cmp	r1, r3
1a00682a:	d902      	bls.n	1a006832 <_free_r+0xfe>
1a00682c:	6892      	ldr	r2, [r2, #8]
1a00682e:	4295      	cmp	r5, r2
1a006830:	d1f7      	bne.n	1a006822 <_free_r+0xee>
1a006832:	68d5      	ldr	r5, [r2, #12]
1a006834:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a006838:	60a8      	str	r0, [r5, #8]
1a00683a:	60d0      	str	r0, [r2, #12]
1a00683c:	4630      	mov	r0, r6
1a00683e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a006842:	f000 bc6b 	b.w	1a00711c <__malloc_unlock>
1a006846:	2900      	cmp	r1, #0
1a006848:	d15e      	bne.n	1a006908 <_free_r+0x1d4>
1a00684a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a00684e:	442b      	add	r3, r5
1a006850:	f043 0401 	orr.w	r4, r3, #1
1a006854:	60ca      	str	r2, [r1, #12]
1a006856:	6091      	str	r1, [r2, #8]
1a006858:	6044      	str	r4, [r0, #4]
1a00685a:	50c3      	str	r3, [r0, r3]
1a00685c:	e7b4      	b.n	1a0067c8 <_free_r+0x94>
1a00685e:	f01c 0f01 	tst.w	ip, #1
1a006862:	442b      	add	r3, r5
1a006864:	d107      	bne.n	1a006876 <_free_r+0x142>
1a006866:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a00686a:	1a80      	subs	r0, r0, r2
1a00686c:	4413      	add	r3, r2
1a00686e:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a006872:	60ca      	str	r2, [r1, #12]
1a006874:	6091      	str	r1, [r2, #8]
1a006876:	4a28      	ldr	r2, [pc, #160]	; (1a006918 <_free_r+0x1e4>)
1a006878:	6812      	ldr	r2, [r2, #0]
1a00687a:	f043 0101 	orr.w	r1, r3, #1
1a00687e:	429a      	cmp	r2, r3
1a006880:	6041      	str	r1, [r0, #4]
1a006882:	60a0      	str	r0, [r4, #8]
1a006884:	d8a0      	bhi.n	1a0067c8 <_free_r+0x94>
1a006886:	4b25      	ldr	r3, [pc, #148]	; (1a00691c <_free_r+0x1e8>)
1a006888:	4630      	mov	r0, r6
1a00688a:	6819      	ldr	r1, [r3, #0]
1a00688c:	f7ff ff02 	bl	1a006694 <_malloc_trim_r>
1a006890:	e79a      	b.n	1a0067c8 <_free_r+0x94>
1a006892:	2a14      	cmp	r2, #20
1a006894:	d90a      	bls.n	1a0068ac <_free_r+0x178>
1a006896:	2a54      	cmp	r2, #84	; 0x54
1a006898:	d81d      	bhi.n	1a0068d6 <_free_r+0x1a2>
1a00689a:	0b1a      	lsrs	r2, r3, #12
1a00689c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a0068a0:	00ff      	lsls	r7, r7, #3
1a0068a2:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a0068a6:	e7b7      	b.n	1a006818 <_free_r+0xe4>
1a0068a8:	442b      	add	r3, r5
1a0068aa:	e798      	b.n	1a0067de <_free_r+0xaa>
1a0068ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a0068b0:	00ff      	lsls	r7, r7, #3
1a0068b2:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a0068b6:	e7af      	b.n	1a006818 <_free_r+0xe4>
1a0068b8:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0068bc:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0068c0:	6045      	str	r5, [r0, #4]
1a0068c2:	50c3      	str	r3, [r0, r3]
1a0068c4:	e780      	b.n	1a0067c8 <_free_r+0x94>
1a0068c6:	6863      	ldr	r3, [r4, #4]
1a0068c8:	1089      	asrs	r1, r1, #2
1a0068ca:	2701      	movs	r7, #1
1a0068cc:	fa07 f101 	lsl.w	r1, r7, r1
1a0068d0:	4319      	orrs	r1, r3
1a0068d2:	6061      	str	r1, [r4, #4]
1a0068d4:	e7ae      	b.n	1a006834 <_free_r+0x100>
1a0068d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0068da:	d806      	bhi.n	1a0068ea <_free_r+0x1b6>
1a0068dc:	0bda      	lsrs	r2, r3, #15
1a0068de:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0068e2:	00ff      	lsls	r7, r7, #3
1a0068e4:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0068e8:	e796      	b.n	1a006818 <_free_r+0xe4>
1a0068ea:	f240 5154 	movw	r1, #1364	; 0x554
1a0068ee:	428a      	cmp	r2, r1
1a0068f0:	d806      	bhi.n	1a006900 <_free_r+0x1cc>
1a0068f2:	0c9a      	lsrs	r2, r3, #18
1a0068f4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0068f8:	00ff      	lsls	r7, r7, #3
1a0068fa:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0068fe:	e78b      	b.n	1a006818 <_free_r+0xe4>
1a006900:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a006904:	217e      	movs	r1, #126	; 0x7e
1a006906:	e787      	b.n	1a006818 <_free_r+0xe4>
1a006908:	f043 0101 	orr.w	r1, r3, #1
1a00690c:	6041      	str	r1, [r0, #4]
1a00690e:	6013      	str	r3, [r2, #0]
1a006910:	e75a      	b.n	1a0067c8 <_free_r+0x94>
1a006912:	bf00      	nop
1a006914:	10000508 	.word	0x10000508
1a006918:	10000914 	.word	0x10000914
1a00691c:	100037d0 	.word	0x100037d0

1a006920 <_fwalk_reent>:
1a006920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006924:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a006928:	d01f      	beq.n	1a00696a <_fwalk_reent+0x4a>
1a00692a:	4688      	mov	r8, r1
1a00692c:	4606      	mov	r6, r0
1a00692e:	f04f 0900 	mov.w	r9, #0
1a006932:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a006936:	3d01      	subs	r5, #1
1a006938:	d411      	bmi.n	1a00695e <_fwalk_reent+0x3e>
1a00693a:	89a3      	ldrh	r3, [r4, #12]
1a00693c:	2b01      	cmp	r3, #1
1a00693e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006942:	d908      	bls.n	1a006956 <_fwalk_reent+0x36>
1a006944:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a006948:	3301      	adds	r3, #1
1a00694a:	4621      	mov	r1, r4
1a00694c:	4630      	mov	r0, r6
1a00694e:	d002      	beq.n	1a006956 <_fwalk_reent+0x36>
1a006950:	47c0      	blx	r8
1a006952:	ea49 0900 	orr.w	r9, r9, r0
1a006956:	1c6b      	adds	r3, r5, #1
1a006958:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00695c:	d1ed      	bne.n	1a00693a <_fwalk_reent+0x1a>
1a00695e:	683f      	ldr	r7, [r7, #0]
1a006960:	2f00      	cmp	r7, #0
1a006962:	d1e6      	bne.n	1a006932 <_fwalk_reent+0x12>
1a006964:	4648      	mov	r0, r9
1a006966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00696a:	46b9      	mov	r9, r7
1a00696c:	4648      	mov	r0, r9
1a00696e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006972:	bf00      	nop

1a006974 <__libc_init_array>:
1a006974:	b570      	push	{r4, r5, r6, lr}
1a006976:	4e0d      	ldr	r6, [pc, #52]	; (1a0069ac <__libc_init_array+0x38>)
1a006978:	4d0d      	ldr	r5, [pc, #52]	; (1a0069b0 <__libc_init_array+0x3c>)
1a00697a:	1b76      	subs	r6, r6, r5
1a00697c:	10b6      	asrs	r6, r6, #2
1a00697e:	d006      	beq.n	1a00698e <__libc_init_array+0x1a>
1a006980:	2400      	movs	r4, #0
1a006982:	3401      	adds	r4, #1
1a006984:	f855 3b04 	ldr.w	r3, [r5], #4
1a006988:	4798      	blx	r3
1a00698a:	42a6      	cmp	r6, r4
1a00698c:	d1f9      	bne.n	1a006982 <__libc_init_array+0xe>
1a00698e:	4e09      	ldr	r6, [pc, #36]	; (1a0069b4 <__libc_init_array+0x40>)
1a006990:	4d09      	ldr	r5, [pc, #36]	; (1a0069b8 <__libc_init_array+0x44>)
1a006992:	1b76      	subs	r6, r6, r5
1a006994:	f7fa fc6f 	bl	1a001276 <_init>
1a006998:	10b6      	asrs	r6, r6, #2
1a00699a:	d006      	beq.n	1a0069aa <__libc_init_array+0x36>
1a00699c:	2400      	movs	r4, #0
1a00699e:	3401      	adds	r4, #1
1a0069a0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0069a4:	4798      	blx	r3
1a0069a6:	42a6      	cmp	r6, r4
1a0069a8:	d1f9      	bne.n	1a00699e <__libc_init_array+0x2a>
1a0069aa:	bd70      	pop	{r4, r5, r6, pc}
1a0069ac:	1a00c294 	.word	0x1a00c294
1a0069b0:	1a00c294 	.word	0x1a00c294
1a0069b4:	1a00c298 	.word	0x1a00c298
1a0069b8:	1a00c294 	.word	0x1a00c294

1a0069bc <__retarget_lock_init_recursive>:
1a0069bc:	4770      	bx	lr
1a0069be:	bf00      	nop

1a0069c0 <__retarget_lock_close_recursive>:
1a0069c0:	4770      	bx	lr
1a0069c2:	bf00      	nop

1a0069c4 <__retarget_lock_acquire_recursive>:
1a0069c4:	4770      	bx	lr
1a0069c6:	bf00      	nop

1a0069c8 <__retarget_lock_release_recursive>:
1a0069c8:	4770      	bx	lr
1a0069ca:	bf00      	nop

1a0069cc <_malloc_r>:
1a0069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0069d0:	f101 050b 	add.w	r5, r1, #11
1a0069d4:	2d16      	cmp	r5, #22
1a0069d6:	b083      	sub	sp, #12
1a0069d8:	4606      	mov	r6, r0
1a0069da:	d823      	bhi.n	1a006a24 <_malloc_r+0x58>
1a0069dc:	2910      	cmp	r1, #16
1a0069de:	f200 80b9 	bhi.w	1a006b54 <_malloc_r+0x188>
1a0069e2:	f000 fb95 	bl	1a007110 <__malloc_lock>
1a0069e6:	2510      	movs	r5, #16
1a0069e8:	2318      	movs	r3, #24
1a0069ea:	2002      	movs	r0, #2
1a0069ec:	4fba      	ldr	r7, [pc, #744]	; (1a006cd8 <_malloc_r+0x30c>)
1a0069ee:	443b      	add	r3, r7
1a0069f0:	f1a3 0208 	sub.w	r2, r3, #8
1a0069f4:	685c      	ldr	r4, [r3, #4]
1a0069f6:	4294      	cmp	r4, r2
1a0069f8:	f000 80b9 	beq.w	1a006b6e <_malloc_r+0x1a2>
1a0069fc:	6863      	ldr	r3, [r4, #4]
1a0069fe:	f023 0303 	bic.w	r3, r3, #3
1a006a02:	4423      	add	r3, r4
1a006a04:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a006a08:	685a      	ldr	r2, [r3, #4]
1a006a0a:	60e9      	str	r1, [r5, #12]
1a006a0c:	f042 0201 	orr.w	r2, r2, #1
1a006a10:	4630      	mov	r0, r6
1a006a12:	608d      	str	r5, [r1, #8]
1a006a14:	605a      	str	r2, [r3, #4]
1a006a16:	f000 fb81 	bl	1a00711c <__malloc_unlock>
1a006a1a:	3408      	adds	r4, #8
1a006a1c:	4620      	mov	r0, r4
1a006a1e:	b003      	add	sp, #12
1a006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006a24:	f035 0507 	bics.w	r5, r5, #7
1a006a28:	f100 8094 	bmi.w	1a006b54 <_malloc_r+0x188>
1a006a2c:	42a9      	cmp	r1, r5
1a006a2e:	f200 8091 	bhi.w	1a006b54 <_malloc_r+0x188>
1a006a32:	f000 fb6d 	bl	1a007110 <__malloc_lock>
1a006a36:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a006a3a:	f0c0 81a2 	bcc.w	1a006d82 <_malloc_r+0x3b6>
1a006a3e:	0a6b      	lsrs	r3, r5, #9
1a006a40:	f000 808f 	beq.w	1a006b62 <_malloc_r+0x196>
1a006a44:	2b04      	cmp	r3, #4
1a006a46:	f200 8178 	bhi.w	1a006d3a <_malloc_r+0x36e>
1a006a4a:	09ab      	lsrs	r3, r5, #6
1a006a4c:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a006a50:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a006a54:	00c3      	lsls	r3, r0, #3
1a006a56:	4fa0      	ldr	r7, [pc, #640]	; (1a006cd8 <_malloc_r+0x30c>)
1a006a58:	443b      	add	r3, r7
1a006a5a:	f1a3 0108 	sub.w	r1, r3, #8
1a006a5e:	685c      	ldr	r4, [r3, #4]
1a006a60:	42a1      	cmp	r1, r4
1a006a62:	d106      	bne.n	1a006a72 <_malloc_r+0xa6>
1a006a64:	e00c      	b.n	1a006a80 <_malloc_r+0xb4>
1a006a66:	2a00      	cmp	r2, #0
1a006a68:	f280 8127 	bge.w	1a006cba <_malloc_r+0x2ee>
1a006a6c:	68e4      	ldr	r4, [r4, #12]
1a006a6e:	42a1      	cmp	r1, r4
1a006a70:	d006      	beq.n	1a006a80 <_malloc_r+0xb4>
1a006a72:	6863      	ldr	r3, [r4, #4]
1a006a74:	f023 0303 	bic.w	r3, r3, #3
1a006a78:	1b5a      	subs	r2, r3, r5
1a006a7a:	2a0f      	cmp	r2, #15
1a006a7c:	ddf3      	ble.n	1a006a66 <_malloc_r+0x9a>
1a006a7e:	4660      	mov	r0, ip
1a006a80:	693c      	ldr	r4, [r7, #16]
1a006a82:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a006cec <_malloc_r+0x320>
1a006a86:	4564      	cmp	r4, ip
1a006a88:	d07c      	beq.n	1a006b84 <_malloc_r+0x1b8>
1a006a8a:	6863      	ldr	r3, [r4, #4]
1a006a8c:	f023 0303 	bic.w	r3, r3, #3
1a006a90:	1b5a      	subs	r2, r3, r5
1a006a92:	2a0f      	cmp	r2, #15
1a006a94:	f300 8183 	bgt.w	1a006d9e <_malloc_r+0x3d2>
1a006a98:	2a00      	cmp	r2, #0
1a006a9a:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006a9e:	f280 8174 	bge.w	1a006d8a <_malloc_r+0x3be>
1a006aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a006aa6:	f080 8125 	bcs.w	1a006cf4 <_malloc_r+0x328>
1a006aaa:	08db      	lsrs	r3, r3, #3
1a006aac:	1c59      	adds	r1, r3, #1
1a006aae:	687a      	ldr	r2, [r7, #4]
1a006ab0:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a006ab4:	f8c4 8008 	str.w	r8, [r4, #8]
1a006ab8:	f04f 0e01 	mov.w	lr, #1
1a006abc:	109b      	asrs	r3, r3, #2
1a006abe:	fa0e f303 	lsl.w	r3, lr, r3
1a006ac2:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a006ac6:	4313      	orrs	r3, r2
1a006ac8:	f1ae 0208 	sub.w	r2, lr, #8
1a006acc:	60e2      	str	r2, [r4, #12]
1a006ace:	607b      	str	r3, [r7, #4]
1a006ad0:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a006ad4:	f8c8 400c 	str.w	r4, [r8, #12]
1a006ad8:	1082      	asrs	r2, r0, #2
1a006ada:	2401      	movs	r4, #1
1a006adc:	4094      	lsls	r4, r2
1a006ade:	429c      	cmp	r4, r3
1a006ae0:	d856      	bhi.n	1a006b90 <_malloc_r+0x1c4>
1a006ae2:	421c      	tst	r4, r3
1a006ae4:	d106      	bne.n	1a006af4 <_malloc_r+0x128>
1a006ae6:	f020 0003 	bic.w	r0, r0, #3
1a006aea:	0064      	lsls	r4, r4, #1
1a006aec:	421c      	tst	r4, r3
1a006aee:	f100 0004 	add.w	r0, r0, #4
1a006af2:	d0fa      	beq.n	1a006aea <_malloc_r+0x11e>
1a006af4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a006af8:	46ce      	mov	lr, r9
1a006afa:	4680      	mov	r8, r0
1a006afc:	f8de 300c 	ldr.w	r3, [lr, #12]
1a006b00:	459e      	cmp	lr, r3
1a006b02:	d107      	bne.n	1a006b14 <_malloc_r+0x148>
1a006b04:	e125      	b.n	1a006d52 <_malloc_r+0x386>
1a006b06:	2a00      	cmp	r2, #0
1a006b08:	f280 812c 	bge.w	1a006d64 <_malloc_r+0x398>
1a006b0c:	68db      	ldr	r3, [r3, #12]
1a006b0e:	459e      	cmp	lr, r3
1a006b10:	f000 811f 	beq.w	1a006d52 <_malloc_r+0x386>
1a006b14:	6859      	ldr	r1, [r3, #4]
1a006b16:	f021 0103 	bic.w	r1, r1, #3
1a006b1a:	1b4a      	subs	r2, r1, r5
1a006b1c:	2a0f      	cmp	r2, #15
1a006b1e:	ddf2      	ble.n	1a006b06 <_malloc_r+0x13a>
1a006b20:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a006b24:	195c      	adds	r4, r3, r5
1a006b26:	f045 0501 	orr.w	r5, r5, #1
1a006b2a:	605d      	str	r5, [r3, #4]
1a006b2c:	f042 0501 	orr.w	r5, r2, #1
1a006b30:	f8c8 e00c 	str.w	lr, [r8, #12]
1a006b34:	4630      	mov	r0, r6
1a006b36:	f8ce 8008 	str.w	r8, [lr, #8]
1a006b3a:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a006b3e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a006b42:	6065      	str	r5, [r4, #4]
1a006b44:	505a      	str	r2, [r3, r1]
1a006b46:	9300      	str	r3, [sp, #0]
1a006b48:	f000 fae8 	bl	1a00711c <__malloc_unlock>
1a006b4c:	9b00      	ldr	r3, [sp, #0]
1a006b4e:	f103 0408 	add.w	r4, r3, #8
1a006b52:	e002      	b.n	1a006b5a <_malloc_r+0x18e>
1a006b54:	230c      	movs	r3, #12
1a006b56:	6033      	str	r3, [r6, #0]
1a006b58:	2400      	movs	r4, #0
1a006b5a:	4620      	mov	r0, r4
1a006b5c:	b003      	add	sp, #12
1a006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006b62:	f44f 7300 	mov.w	r3, #512	; 0x200
1a006b66:	2040      	movs	r0, #64	; 0x40
1a006b68:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006b6c:	e773      	b.n	1a006a56 <_malloc_r+0x8a>
1a006b6e:	68dc      	ldr	r4, [r3, #12]
1a006b70:	42a3      	cmp	r3, r4
1a006b72:	bf08      	it	eq
1a006b74:	3002      	addeq	r0, #2
1a006b76:	f47f af41 	bne.w	1a0069fc <_malloc_r+0x30>
1a006b7a:	693c      	ldr	r4, [r7, #16]
1a006b7c:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a006cec <_malloc_r+0x320>
1a006b80:	4564      	cmp	r4, ip
1a006b82:	d182      	bne.n	1a006a8a <_malloc_r+0xbe>
1a006b84:	687b      	ldr	r3, [r7, #4]
1a006b86:	1082      	asrs	r2, r0, #2
1a006b88:	2401      	movs	r4, #1
1a006b8a:	4094      	lsls	r4, r2
1a006b8c:	429c      	cmp	r4, r3
1a006b8e:	d9a8      	bls.n	1a006ae2 <_malloc_r+0x116>
1a006b90:	68bc      	ldr	r4, [r7, #8]
1a006b92:	6863      	ldr	r3, [r4, #4]
1a006b94:	f023 0803 	bic.w	r8, r3, #3
1a006b98:	45a8      	cmp	r8, r5
1a006b9a:	d303      	bcc.n	1a006ba4 <_malloc_r+0x1d8>
1a006b9c:	eba8 0305 	sub.w	r3, r8, r5
1a006ba0:	2b0f      	cmp	r3, #15
1a006ba2:	dc7a      	bgt.n	1a006c9a <_malloc_r+0x2ce>
1a006ba4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a006cf0 <_malloc_r+0x324>
1a006ba8:	4b4c      	ldr	r3, [pc, #304]	; (1a006cdc <_malloc_r+0x310>)
1a006baa:	f8d9 2000 	ldr.w	r2, [r9]
1a006bae:	681b      	ldr	r3, [r3, #0]
1a006bb0:	3201      	adds	r2, #1
1a006bb2:	442b      	add	r3, r5
1a006bb4:	eb04 0a08 	add.w	sl, r4, r8
1a006bb8:	f000 813c 	beq.w	1a006e34 <_malloc_r+0x468>
1a006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a006bc0:	330f      	adds	r3, #15
1a006bc2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a006bc6:	f02b 0b0f 	bic.w	fp, fp, #15
1a006bca:	4659      	mov	r1, fp
1a006bcc:	4630      	mov	r0, r6
1a006bce:	f7fa fba7 	bl	1a001320 <_sbrk_r>
1a006bd2:	1c41      	adds	r1, r0, #1
1a006bd4:	4602      	mov	r2, r0
1a006bd6:	f000 80fc 	beq.w	1a006dd2 <_malloc_r+0x406>
1a006bda:	4582      	cmp	sl, r0
1a006bdc:	f200 80f7 	bhi.w	1a006dce <_malloc_r+0x402>
1a006be0:	4b3f      	ldr	r3, [pc, #252]	; (1a006ce0 <_malloc_r+0x314>)
1a006be2:	6818      	ldr	r0, [r3, #0]
1a006be4:	4458      	add	r0, fp
1a006be6:	6018      	str	r0, [r3, #0]
1a006be8:	4601      	mov	r1, r0
1a006bea:	f000 8157 	beq.w	1a006e9c <_malloc_r+0x4d0>
1a006bee:	f8d9 0000 	ldr.w	r0, [r9]
1a006bf2:	9301      	str	r3, [sp, #4]
1a006bf4:	3001      	adds	r0, #1
1a006bf6:	bf1b      	ittet	ne
1a006bf8:	eba2 0a0a 	subne.w	sl, r2, sl
1a006bfc:	4451      	addne	r1, sl
1a006bfe:	f8c9 2000 	streq.w	r2, [r9]
1a006c02:	6019      	strne	r1, [r3, #0]
1a006c04:	f012 0a07 	ands.w	sl, r2, #7
1a006c08:	f000 8120 	beq.w	1a006e4c <_malloc_r+0x480>
1a006c0c:	f1ca 0108 	rsb	r1, sl, #8
1a006c10:	440a      	add	r2, r1
1a006c12:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a006c16:	4493      	add	fp, r2
1a006c18:	3108      	adds	r1, #8
1a006c1a:	eba1 010b 	sub.w	r1, r1, fp
1a006c1e:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a006c22:	4649      	mov	r1, r9
1a006c24:	4630      	mov	r0, r6
1a006c26:	9200      	str	r2, [sp, #0]
1a006c28:	f7fa fb7a 	bl	1a001320 <_sbrk_r>
1a006c2c:	1c42      	adds	r2, r0, #1
1a006c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006c32:	f000 8158 	beq.w	1a006ee6 <_malloc_r+0x51a>
1a006c36:	1a80      	subs	r0, r0, r2
1a006c38:	eb00 0b09 	add.w	fp, r0, r9
1a006c3c:	6818      	ldr	r0, [r3, #0]
1a006c3e:	60ba      	str	r2, [r7, #8]
1a006c40:	f04b 0101 	orr.w	r1, fp, #1
1a006c44:	4448      	add	r0, r9
1a006c46:	42bc      	cmp	r4, r7
1a006c48:	6051      	str	r1, [r2, #4]
1a006c4a:	6018      	str	r0, [r3, #0]
1a006c4c:	f000 8132 	beq.w	1a006eb4 <_malloc_r+0x4e8>
1a006c50:	f1b8 0f0f 	cmp.w	r8, #15
1a006c54:	f240 8130 	bls.w	1a006eb8 <_malloc_r+0x4ec>
1a006c58:	6861      	ldr	r1, [r4, #4]
1a006c5a:	f1a8 0c0c 	sub.w	ip, r8, #12
1a006c5e:	f02c 0c07 	bic.w	ip, ip, #7
1a006c62:	f001 0101 	and.w	r1, r1, #1
1a006c66:	eb04 0e0c 	add.w	lr, r4, ip
1a006c6a:	ea41 010c 	orr.w	r1, r1, ip
1a006c6e:	f04f 0805 	mov.w	r8, #5
1a006c72:	f1bc 0f0f 	cmp.w	ip, #15
1a006c76:	6061      	str	r1, [r4, #4]
1a006c78:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a006c7c:	f200 813b 	bhi.w	1a006ef6 <_malloc_r+0x52a>
1a006c80:	6851      	ldr	r1, [r2, #4]
1a006c82:	4614      	mov	r4, r2
1a006c84:	4b17      	ldr	r3, [pc, #92]	; (1a006ce4 <_malloc_r+0x318>)
1a006c86:	681a      	ldr	r2, [r3, #0]
1a006c88:	4282      	cmp	r2, r0
1a006c8a:	bf38      	it	cc
1a006c8c:	6018      	strcc	r0, [r3, #0]
1a006c8e:	4b16      	ldr	r3, [pc, #88]	; (1a006ce8 <_malloc_r+0x31c>)
1a006c90:	681a      	ldr	r2, [r3, #0]
1a006c92:	4282      	cmp	r2, r0
1a006c94:	bf38      	it	cc
1a006c96:	6018      	strcc	r0, [r3, #0]
1a006c98:	e09d      	b.n	1a006dd6 <_malloc_r+0x40a>
1a006c9a:	1962      	adds	r2, r4, r5
1a006c9c:	f043 0301 	orr.w	r3, r3, #1
1a006ca0:	f045 0501 	orr.w	r5, r5, #1
1a006ca4:	6065      	str	r5, [r4, #4]
1a006ca6:	4630      	mov	r0, r6
1a006ca8:	60ba      	str	r2, [r7, #8]
1a006caa:	6053      	str	r3, [r2, #4]
1a006cac:	f000 fa36 	bl	1a00711c <__malloc_unlock>
1a006cb0:	3408      	adds	r4, #8
1a006cb2:	4620      	mov	r0, r4
1a006cb4:	b003      	add	sp, #12
1a006cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006cba:	4423      	add	r3, r4
1a006cbc:	68e1      	ldr	r1, [r4, #12]
1a006cbe:	685a      	ldr	r2, [r3, #4]
1a006cc0:	68a5      	ldr	r5, [r4, #8]
1a006cc2:	f042 0201 	orr.w	r2, r2, #1
1a006cc6:	60e9      	str	r1, [r5, #12]
1a006cc8:	4630      	mov	r0, r6
1a006cca:	608d      	str	r5, [r1, #8]
1a006ccc:	605a      	str	r2, [r3, #4]
1a006cce:	f000 fa25 	bl	1a00711c <__malloc_unlock>
1a006cd2:	3408      	adds	r4, #8
1a006cd4:	e741      	b.n	1a006b5a <_malloc_r+0x18e>
1a006cd6:	bf00      	nop
1a006cd8:	10000508 	.word	0x10000508
1a006cdc:	100037d0 	.word	0x100037d0
1a006ce0:	100037a0 	.word	0x100037a0
1a006ce4:	100037c8 	.word	0x100037c8
1a006ce8:	100037cc 	.word	0x100037cc
1a006cec:	10000510 	.word	0x10000510
1a006cf0:	10000910 	.word	0x10000910
1a006cf4:	0a5a      	lsrs	r2, r3, #9
1a006cf6:	2a04      	cmp	r2, #4
1a006cf8:	d963      	bls.n	1a006dc2 <_malloc_r+0x3f6>
1a006cfa:	2a14      	cmp	r2, #20
1a006cfc:	f200 80b7 	bhi.w	1a006e6e <_malloc_r+0x4a2>
1a006d00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a006d04:	00c9      	lsls	r1, r1, #3
1a006d06:	325b      	adds	r2, #91	; 0x5b
1a006d08:	eb07 0e01 	add.w	lr, r7, r1
1a006d0c:	5879      	ldr	r1, [r7, r1]
1a006d0e:	f1ae 0e08 	sub.w	lr, lr, #8
1a006d12:	458e      	cmp	lr, r1
1a006d14:	f000 8091 	beq.w	1a006e3a <_malloc_r+0x46e>
1a006d18:	684a      	ldr	r2, [r1, #4]
1a006d1a:	f022 0203 	bic.w	r2, r2, #3
1a006d1e:	429a      	cmp	r2, r3
1a006d20:	d902      	bls.n	1a006d28 <_malloc_r+0x35c>
1a006d22:	6889      	ldr	r1, [r1, #8]
1a006d24:	458e      	cmp	lr, r1
1a006d26:	d1f7      	bne.n	1a006d18 <_malloc_r+0x34c>
1a006d28:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a006d2c:	687b      	ldr	r3, [r7, #4]
1a006d2e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a006d32:	f8ce 4008 	str.w	r4, [lr, #8]
1a006d36:	60cc      	str	r4, [r1, #12]
1a006d38:	e6ce      	b.n	1a006ad8 <_malloc_r+0x10c>
1a006d3a:	2b14      	cmp	r3, #20
1a006d3c:	d959      	bls.n	1a006df2 <_malloc_r+0x426>
1a006d3e:	2b54      	cmp	r3, #84	; 0x54
1a006d40:	f200 809d 	bhi.w	1a006e7e <_malloc_r+0x4b2>
1a006d44:	0b2b      	lsrs	r3, r5, #12
1a006d46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a006d4a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a006d4e:	00c3      	lsls	r3, r0, #3
1a006d50:	e681      	b.n	1a006a56 <_malloc_r+0x8a>
1a006d52:	f108 0801 	add.w	r8, r8, #1
1a006d56:	f018 0f03 	tst.w	r8, #3
1a006d5a:	f10e 0e08 	add.w	lr, lr, #8
1a006d5e:	f47f aecd 	bne.w	1a006afc <_malloc_r+0x130>
1a006d62:	e051      	b.n	1a006e08 <_malloc_r+0x43c>
1a006d64:	4419      	add	r1, r3
1a006d66:	461c      	mov	r4, r3
1a006d68:	684a      	ldr	r2, [r1, #4]
1a006d6a:	68db      	ldr	r3, [r3, #12]
1a006d6c:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a006d70:	f042 0201 	orr.w	r2, r2, #1
1a006d74:	604a      	str	r2, [r1, #4]
1a006d76:	4630      	mov	r0, r6
1a006d78:	60eb      	str	r3, [r5, #12]
1a006d7a:	609d      	str	r5, [r3, #8]
1a006d7c:	f000 f9ce 	bl	1a00711c <__malloc_unlock>
1a006d80:	e6eb      	b.n	1a006b5a <_malloc_r+0x18e>
1a006d82:	08e8      	lsrs	r0, r5, #3
1a006d84:	f105 0308 	add.w	r3, r5, #8
1a006d88:	e630      	b.n	1a0069ec <_malloc_r+0x20>
1a006d8a:	4423      	add	r3, r4
1a006d8c:	4630      	mov	r0, r6
1a006d8e:	685a      	ldr	r2, [r3, #4]
1a006d90:	f042 0201 	orr.w	r2, r2, #1
1a006d94:	605a      	str	r2, [r3, #4]
1a006d96:	3408      	adds	r4, #8
1a006d98:	f000 f9c0 	bl	1a00711c <__malloc_unlock>
1a006d9c:	e6dd      	b.n	1a006b5a <_malloc_r+0x18e>
1a006d9e:	1961      	adds	r1, r4, r5
1a006da0:	f045 0e01 	orr.w	lr, r5, #1
1a006da4:	f042 0501 	orr.w	r5, r2, #1
1a006da8:	f8c4 e004 	str.w	lr, [r4, #4]
1a006dac:	4630      	mov	r0, r6
1a006dae:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a006db2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a006db6:	604d      	str	r5, [r1, #4]
1a006db8:	50e2      	str	r2, [r4, r3]
1a006dba:	f000 f9af 	bl	1a00711c <__malloc_unlock>
1a006dbe:	3408      	adds	r4, #8
1a006dc0:	e6cb      	b.n	1a006b5a <_malloc_r+0x18e>
1a006dc2:	099a      	lsrs	r2, r3, #6
1a006dc4:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a006dc8:	00c9      	lsls	r1, r1, #3
1a006dca:	3238      	adds	r2, #56	; 0x38
1a006dcc:	e79c      	b.n	1a006d08 <_malloc_r+0x33c>
1a006dce:	42bc      	cmp	r4, r7
1a006dd0:	d05f      	beq.n	1a006e92 <_malloc_r+0x4c6>
1a006dd2:	68bc      	ldr	r4, [r7, #8]
1a006dd4:	6861      	ldr	r1, [r4, #4]
1a006dd6:	f021 0b03 	bic.w	fp, r1, #3
1a006dda:	45ab      	cmp	fp, r5
1a006ddc:	ebab 0305 	sub.w	r3, fp, r5
1a006de0:	d302      	bcc.n	1a006de8 <_malloc_r+0x41c>
1a006de2:	2b0f      	cmp	r3, #15
1a006de4:	f73f af59 	bgt.w	1a006c9a <_malloc_r+0x2ce>
1a006de8:	4630      	mov	r0, r6
1a006dea:	f000 f997 	bl	1a00711c <__malloc_unlock>
1a006dee:	2400      	movs	r4, #0
1a006df0:	e6b3      	b.n	1a006b5a <_malloc_r+0x18e>
1a006df2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a006df6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a006dfa:	00c3      	lsls	r3, r0, #3
1a006dfc:	e62b      	b.n	1a006a56 <_malloc_r+0x8a>
1a006dfe:	f859 3908 	ldr.w	r3, [r9], #-8
1a006e02:	454b      	cmp	r3, r9
1a006e04:	f040 8096 	bne.w	1a006f34 <_malloc_r+0x568>
1a006e08:	f010 0f03 	tst.w	r0, #3
1a006e0c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a006e10:	d1f5      	bne.n	1a006dfe <_malloc_r+0x432>
1a006e12:	687b      	ldr	r3, [r7, #4]
1a006e14:	ea23 0304 	bic.w	r3, r3, r4
1a006e18:	607b      	str	r3, [r7, #4]
1a006e1a:	0064      	lsls	r4, r4, #1
1a006e1c:	429c      	cmp	r4, r3
1a006e1e:	f63f aeb7 	bhi.w	1a006b90 <_malloc_r+0x1c4>
1a006e22:	b91c      	cbnz	r4, 1a006e2c <_malloc_r+0x460>
1a006e24:	e6b4      	b.n	1a006b90 <_malloc_r+0x1c4>
1a006e26:	0064      	lsls	r4, r4, #1
1a006e28:	f108 0804 	add.w	r8, r8, #4
1a006e2c:	421c      	tst	r4, r3
1a006e2e:	d0fa      	beq.n	1a006e26 <_malloc_r+0x45a>
1a006e30:	4640      	mov	r0, r8
1a006e32:	e65f      	b.n	1a006af4 <_malloc_r+0x128>
1a006e34:	f103 0b10 	add.w	fp, r3, #16
1a006e38:	e6c7      	b.n	1a006bca <_malloc_r+0x1fe>
1a006e3a:	687b      	ldr	r3, [r7, #4]
1a006e3c:	1092      	asrs	r2, r2, #2
1a006e3e:	f04f 0801 	mov.w	r8, #1
1a006e42:	fa08 f202 	lsl.w	r2, r8, r2
1a006e46:	4313      	orrs	r3, r2
1a006e48:	607b      	str	r3, [r7, #4]
1a006e4a:	e770      	b.n	1a006d2e <_malloc_r+0x362>
1a006e4c:	eb02 000b 	add.w	r0, r2, fp
1a006e50:	4240      	negs	r0, r0
1a006e52:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a006e56:	4649      	mov	r1, r9
1a006e58:	4630      	mov	r0, r6
1a006e5a:	9200      	str	r2, [sp, #0]
1a006e5c:	f7fa fa60 	bl	1a001320 <_sbrk_r>
1a006e60:	1c43      	adds	r3, r0, #1
1a006e62:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006e66:	f47f aee6 	bne.w	1a006c36 <_malloc_r+0x26a>
1a006e6a:	46d1      	mov	r9, sl
1a006e6c:	e6e6      	b.n	1a006c3c <_malloc_r+0x270>
1a006e6e:	2a54      	cmp	r2, #84	; 0x54
1a006e70:	d825      	bhi.n	1a006ebe <_malloc_r+0x4f2>
1a006e72:	0b1a      	lsrs	r2, r3, #12
1a006e74:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a006e78:	00c9      	lsls	r1, r1, #3
1a006e7a:	326e      	adds	r2, #110	; 0x6e
1a006e7c:	e744      	b.n	1a006d08 <_malloc_r+0x33c>
1a006e7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006e82:	d825      	bhi.n	1a006ed0 <_malloc_r+0x504>
1a006e84:	0beb      	lsrs	r3, r5, #15
1a006e86:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a006e8a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a006e8e:	00c3      	lsls	r3, r0, #3
1a006e90:	e5e1      	b.n	1a006a56 <_malloc_r+0x8a>
1a006e92:	4b29      	ldr	r3, [pc, #164]	; (1a006f38 <_malloc_r+0x56c>)
1a006e94:	6819      	ldr	r1, [r3, #0]
1a006e96:	4459      	add	r1, fp
1a006e98:	6019      	str	r1, [r3, #0]
1a006e9a:	e6a8      	b.n	1a006bee <_malloc_r+0x222>
1a006e9c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a006ea0:	f1bc 0f00 	cmp.w	ip, #0
1a006ea4:	f47f aea3 	bne.w	1a006bee <_malloc_r+0x222>
1a006ea8:	44c3      	add	fp, r8
1a006eaa:	68bc      	ldr	r4, [r7, #8]
1a006eac:	f04b 0101 	orr.w	r1, fp, #1
1a006eb0:	6061      	str	r1, [r4, #4]
1a006eb2:	e6e7      	b.n	1a006c84 <_malloc_r+0x2b8>
1a006eb4:	4614      	mov	r4, r2
1a006eb6:	e6e5      	b.n	1a006c84 <_malloc_r+0x2b8>
1a006eb8:	2301      	movs	r3, #1
1a006eba:	6053      	str	r3, [r2, #4]
1a006ebc:	e794      	b.n	1a006de8 <_malloc_r+0x41c>
1a006ebe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006ec2:	d823      	bhi.n	1a006f0c <_malloc_r+0x540>
1a006ec4:	0bda      	lsrs	r2, r3, #15
1a006ec6:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a006eca:	00c9      	lsls	r1, r1, #3
1a006ecc:	3277      	adds	r2, #119	; 0x77
1a006ece:	e71b      	b.n	1a006d08 <_malloc_r+0x33c>
1a006ed0:	f240 5254 	movw	r2, #1364	; 0x554
1a006ed4:	4293      	cmp	r3, r2
1a006ed6:	d823      	bhi.n	1a006f20 <_malloc_r+0x554>
1a006ed8:	0cab      	lsrs	r3, r5, #18
1a006eda:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a006ede:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a006ee2:	00c3      	lsls	r3, r0, #3
1a006ee4:	e5b7      	b.n	1a006a56 <_malloc_r+0x8a>
1a006ee6:	f1aa 0a08 	sub.w	sl, sl, #8
1a006eea:	44d3      	add	fp, sl
1a006eec:	ebab 0b02 	sub.w	fp, fp, r2
1a006ef0:	f04f 0900 	mov.w	r9, #0
1a006ef4:	e6a2      	b.n	1a006c3c <_malloc_r+0x270>
1a006ef6:	f104 0108 	add.w	r1, r4, #8
1a006efa:	4630      	mov	r0, r6
1a006efc:	9300      	str	r3, [sp, #0]
1a006efe:	f7ff fc19 	bl	1a006734 <_free_r>
1a006f02:	68bc      	ldr	r4, [r7, #8]
1a006f04:	9b00      	ldr	r3, [sp, #0]
1a006f06:	6861      	ldr	r1, [r4, #4]
1a006f08:	6818      	ldr	r0, [r3, #0]
1a006f0a:	e6bb      	b.n	1a006c84 <_malloc_r+0x2b8>
1a006f0c:	f240 5154 	movw	r1, #1364	; 0x554
1a006f10:	428a      	cmp	r2, r1
1a006f12:	d80b      	bhi.n	1a006f2c <_malloc_r+0x560>
1a006f14:	0c9a      	lsrs	r2, r3, #18
1a006f16:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006f1a:	00c9      	lsls	r1, r1, #3
1a006f1c:	327c      	adds	r2, #124	; 0x7c
1a006f1e:	e6f3      	b.n	1a006d08 <_malloc_r+0x33c>
1a006f20:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a006f24:	207f      	movs	r0, #127	; 0x7f
1a006f26:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a006f2a:	e594      	b.n	1a006a56 <_malloc_r+0x8a>
1a006f2c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a006f30:	227e      	movs	r2, #126	; 0x7e
1a006f32:	e6e9      	b.n	1a006d08 <_malloc_r+0x33c>
1a006f34:	687b      	ldr	r3, [r7, #4]
1a006f36:	e770      	b.n	1a006e1a <_malloc_r+0x44e>
1a006f38:	100037a0 	.word	0x100037a0

1a006f3c <memcpy>:
1a006f3c:	4684      	mov	ip, r0
1a006f3e:	ea41 0300 	orr.w	r3, r1, r0
1a006f42:	f013 0303 	ands.w	r3, r3, #3
1a006f46:	d16d      	bne.n	1a007024 <memcpy+0xe8>
1a006f48:	3a40      	subs	r2, #64	; 0x40
1a006f4a:	d341      	bcc.n	1a006fd0 <memcpy+0x94>
1a006f4c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f50:	f840 3b04 	str.w	r3, [r0], #4
1a006f54:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f58:	f840 3b04 	str.w	r3, [r0], #4
1a006f5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f60:	f840 3b04 	str.w	r3, [r0], #4
1a006f64:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f68:	f840 3b04 	str.w	r3, [r0], #4
1a006f6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f70:	f840 3b04 	str.w	r3, [r0], #4
1a006f74:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f78:	f840 3b04 	str.w	r3, [r0], #4
1a006f7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f80:	f840 3b04 	str.w	r3, [r0], #4
1a006f84:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f88:	f840 3b04 	str.w	r3, [r0], #4
1a006f8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f90:	f840 3b04 	str.w	r3, [r0], #4
1a006f94:	f851 3b04 	ldr.w	r3, [r1], #4
1a006f98:	f840 3b04 	str.w	r3, [r0], #4
1a006f9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fa0:	f840 3b04 	str.w	r3, [r0], #4
1a006fa4:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fa8:	f840 3b04 	str.w	r3, [r0], #4
1a006fac:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fb0:	f840 3b04 	str.w	r3, [r0], #4
1a006fb4:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fb8:	f840 3b04 	str.w	r3, [r0], #4
1a006fbc:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fc0:	f840 3b04 	str.w	r3, [r0], #4
1a006fc4:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fc8:	f840 3b04 	str.w	r3, [r0], #4
1a006fcc:	3a40      	subs	r2, #64	; 0x40
1a006fce:	d2bd      	bcs.n	1a006f4c <memcpy+0x10>
1a006fd0:	3230      	adds	r2, #48	; 0x30
1a006fd2:	d311      	bcc.n	1a006ff8 <memcpy+0xbc>
1a006fd4:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fd8:	f840 3b04 	str.w	r3, [r0], #4
1a006fdc:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fe0:	f840 3b04 	str.w	r3, [r0], #4
1a006fe4:	f851 3b04 	ldr.w	r3, [r1], #4
1a006fe8:	f840 3b04 	str.w	r3, [r0], #4
1a006fec:	f851 3b04 	ldr.w	r3, [r1], #4
1a006ff0:	f840 3b04 	str.w	r3, [r0], #4
1a006ff4:	3a10      	subs	r2, #16
1a006ff6:	d2ed      	bcs.n	1a006fd4 <memcpy+0x98>
1a006ff8:	320c      	adds	r2, #12
1a006ffa:	d305      	bcc.n	1a007008 <memcpy+0xcc>
1a006ffc:	f851 3b04 	ldr.w	r3, [r1], #4
1a007000:	f840 3b04 	str.w	r3, [r0], #4
1a007004:	3a04      	subs	r2, #4
1a007006:	d2f9      	bcs.n	1a006ffc <memcpy+0xc0>
1a007008:	3204      	adds	r2, #4
1a00700a:	d008      	beq.n	1a00701e <memcpy+0xe2>
1a00700c:	07d2      	lsls	r2, r2, #31
1a00700e:	bf1c      	itt	ne
1a007010:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a007014:	f800 3b01 	strbne.w	r3, [r0], #1
1a007018:	d301      	bcc.n	1a00701e <memcpy+0xe2>
1a00701a:	880b      	ldrh	r3, [r1, #0]
1a00701c:	8003      	strh	r3, [r0, #0]
1a00701e:	4660      	mov	r0, ip
1a007020:	4770      	bx	lr
1a007022:	bf00      	nop
1a007024:	2a08      	cmp	r2, #8
1a007026:	d313      	bcc.n	1a007050 <memcpy+0x114>
1a007028:	078b      	lsls	r3, r1, #30
1a00702a:	d08d      	beq.n	1a006f48 <memcpy+0xc>
1a00702c:	f010 0303 	ands.w	r3, r0, #3
1a007030:	d08a      	beq.n	1a006f48 <memcpy+0xc>
1a007032:	f1c3 0304 	rsb	r3, r3, #4
1a007036:	1ad2      	subs	r2, r2, r3
1a007038:	07db      	lsls	r3, r3, #31
1a00703a:	bf1c      	itt	ne
1a00703c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a007040:	f800 3b01 	strbne.w	r3, [r0], #1
1a007044:	d380      	bcc.n	1a006f48 <memcpy+0xc>
1a007046:	f831 3b02 	ldrh.w	r3, [r1], #2
1a00704a:	f820 3b02 	strh.w	r3, [r0], #2
1a00704e:	e77b      	b.n	1a006f48 <memcpy+0xc>
1a007050:	3a04      	subs	r2, #4
1a007052:	d3d9      	bcc.n	1a007008 <memcpy+0xcc>
1a007054:	3a01      	subs	r2, #1
1a007056:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00705a:	f800 3b01 	strb.w	r3, [r0], #1
1a00705e:	d2f9      	bcs.n	1a007054 <memcpy+0x118>
1a007060:	780b      	ldrb	r3, [r1, #0]
1a007062:	7003      	strb	r3, [r0, #0]
1a007064:	784b      	ldrb	r3, [r1, #1]
1a007066:	7043      	strb	r3, [r0, #1]
1a007068:	788b      	ldrb	r3, [r1, #2]
1a00706a:	7083      	strb	r3, [r0, #2]
1a00706c:	4660      	mov	r0, ip
1a00706e:	4770      	bx	lr

1a007070 <memset>:
1a007070:	b4f0      	push	{r4, r5, r6, r7}
1a007072:	0786      	lsls	r6, r0, #30
1a007074:	d046      	beq.n	1a007104 <memset+0x94>
1a007076:	1e54      	subs	r4, r2, #1
1a007078:	2a00      	cmp	r2, #0
1a00707a:	d03c      	beq.n	1a0070f6 <memset+0x86>
1a00707c:	b2ca      	uxtb	r2, r1
1a00707e:	4603      	mov	r3, r0
1a007080:	e002      	b.n	1a007088 <memset+0x18>
1a007082:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a007086:	d336      	bcc.n	1a0070f6 <memset+0x86>
1a007088:	f803 2b01 	strb.w	r2, [r3], #1
1a00708c:	079d      	lsls	r5, r3, #30
1a00708e:	d1f8      	bne.n	1a007082 <memset+0x12>
1a007090:	2c03      	cmp	r4, #3
1a007092:	d929      	bls.n	1a0070e8 <memset+0x78>
1a007094:	b2cd      	uxtb	r5, r1
1a007096:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a00709a:	2c0f      	cmp	r4, #15
1a00709c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0070a0:	d933      	bls.n	1a00710a <memset+0x9a>
1a0070a2:	f1a4 0610 	sub.w	r6, r4, #16
1a0070a6:	0936      	lsrs	r6, r6, #4
1a0070a8:	f103 0720 	add.w	r7, r3, #32
1a0070ac:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a0070b0:	f103 0210 	add.w	r2, r3, #16
1a0070b4:	e942 5504 	strd	r5, r5, [r2, #-16]
1a0070b8:	e942 5502 	strd	r5, r5, [r2, #-8]
1a0070bc:	3210      	adds	r2, #16
1a0070be:	42ba      	cmp	r2, r7
1a0070c0:	d1f8      	bne.n	1a0070b4 <memset+0x44>
1a0070c2:	1c72      	adds	r2, r6, #1
1a0070c4:	f014 0f0c 	tst.w	r4, #12
1a0070c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a0070cc:	f004 060f 	and.w	r6, r4, #15
1a0070d0:	d013      	beq.n	1a0070fa <memset+0x8a>
1a0070d2:	1f33      	subs	r3, r6, #4
1a0070d4:	f023 0303 	bic.w	r3, r3, #3
1a0070d8:	3304      	adds	r3, #4
1a0070da:	4413      	add	r3, r2
1a0070dc:	f842 5b04 	str.w	r5, [r2], #4
1a0070e0:	4293      	cmp	r3, r2
1a0070e2:	d1fb      	bne.n	1a0070dc <memset+0x6c>
1a0070e4:	f006 0403 	and.w	r4, r6, #3
1a0070e8:	b12c      	cbz	r4, 1a0070f6 <memset+0x86>
1a0070ea:	b2c9      	uxtb	r1, r1
1a0070ec:	441c      	add	r4, r3
1a0070ee:	f803 1b01 	strb.w	r1, [r3], #1
1a0070f2:	429c      	cmp	r4, r3
1a0070f4:	d1fb      	bne.n	1a0070ee <memset+0x7e>
1a0070f6:	bcf0      	pop	{r4, r5, r6, r7}
1a0070f8:	4770      	bx	lr
1a0070fa:	4634      	mov	r4, r6
1a0070fc:	4613      	mov	r3, r2
1a0070fe:	2c00      	cmp	r4, #0
1a007100:	d1f3      	bne.n	1a0070ea <memset+0x7a>
1a007102:	e7f8      	b.n	1a0070f6 <memset+0x86>
1a007104:	4614      	mov	r4, r2
1a007106:	4603      	mov	r3, r0
1a007108:	e7c2      	b.n	1a007090 <memset+0x20>
1a00710a:	461a      	mov	r2, r3
1a00710c:	4626      	mov	r6, r4
1a00710e:	e7e0      	b.n	1a0070d2 <memset+0x62>

1a007110 <__malloc_lock>:
1a007110:	4801      	ldr	r0, [pc, #4]	; (1a007118 <__malloc_lock+0x8>)
1a007112:	f7ff bc57 	b.w	1a0069c4 <__retarget_lock_acquire_recursive>
1a007116:	bf00      	nop
1a007118:	100038a8 	.word	0x100038a8

1a00711c <__malloc_unlock>:
1a00711c:	4801      	ldr	r0, [pc, #4]	; (1a007124 <__malloc_unlock+0x8>)
1a00711e:	f7ff bc53 	b.w	1a0069c8 <__retarget_lock_release_recursive>
1a007122:	bf00      	nop
1a007124:	100038a8 	.word	0x100038a8

1a007128 <printf>:
1a007128:	b40f      	push	{r0, r1, r2, r3}
1a00712a:	b500      	push	{lr}
1a00712c:	4907      	ldr	r1, [pc, #28]	; (1a00714c <printf+0x24>)
1a00712e:	b083      	sub	sp, #12
1a007130:	ab04      	add	r3, sp, #16
1a007132:	6808      	ldr	r0, [r1, #0]
1a007134:	f853 2b04 	ldr.w	r2, [r3], #4
1a007138:	6881      	ldr	r1, [r0, #8]
1a00713a:	9301      	str	r3, [sp, #4]
1a00713c:	f000 fbf4 	bl	1a007928 <_vfprintf_r>
1a007140:	b003      	add	sp, #12
1a007142:	f85d eb04 	ldr.w	lr, [sp], #4
1a007146:	b004      	add	sp, #16
1a007148:	4770      	bx	lr
1a00714a:	bf00      	nop
1a00714c:	100000dc 	.word	0x100000dc

1a007150 <_puts_r>:
1a007150:	b570      	push	{r4, r5, r6, lr}
1a007152:	4605      	mov	r5, r0
1a007154:	b088      	sub	sp, #32
1a007156:	4608      	mov	r0, r1
1a007158:	460c      	mov	r4, r1
1a00715a:	f000 fa91 	bl	1a007680 <strlen>
1a00715e:	4a22      	ldr	r2, [pc, #136]	; (1a0071e8 <_puts_r+0x98>)
1a007160:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a007162:	9404      	str	r4, [sp, #16]
1a007164:	2601      	movs	r6, #1
1a007166:	1c44      	adds	r4, r0, #1
1a007168:	a904      	add	r1, sp, #16
1a00716a:	9206      	str	r2, [sp, #24]
1a00716c:	2202      	movs	r2, #2
1a00716e:	9403      	str	r4, [sp, #12]
1a007170:	9005      	str	r0, [sp, #20]
1a007172:	68ac      	ldr	r4, [r5, #8]
1a007174:	9607      	str	r6, [sp, #28]
1a007176:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a00717a:	b31b      	cbz	r3, 1a0071c4 <_puts_r+0x74>
1a00717c:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00717e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007182:	07ce      	lsls	r6, r1, #31
1a007184:	b29a      	uxth	r2, r3
1a007186:	d401      	bmi.n	1a00718c <_puts_r+0x3c>
1a007188:	0590      	lsls	r0, r2, #22
1a00718a:	d525      	bpl.n	1a0071d8 <_puts_r+0x88>
1a00718c:	0491      	lsls	r1, r2, #18
1a00718e:	d406      	bmi.n	1a00719e <_puts_r+0x4e>
1a007190:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a00719a:	81a3      	strh	r3, [r4, #12]
1a00719c:	6662      	str	r2, [r4, #100]	; 0x64
1a00719e:	4628      	mov	r0, r5
1a0071a0:	aa01      	add	r2, sp, #4
1a0071a2:	4621      	mov	r1, r4
1a0071a4:	f003 f9d2 	bl	1a00a54c <__sfvwrite_r>
1a0071a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0071aa:	2800      	cmp	r0, #0
1a0071ac:	bf14      	ite	ne
1a0071ae:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0071b2:	250a      	moveq	r5, #10
1a0071b4:	07da      	lsls	r2, r3, #31
1a0071b6:	d402      	bmi.n	1a0071be <_puts_r+0x6e>
1a0071b8:	89a3      	ldrh	r3, [r4, #12]
1a0071ba:	059b      	lsls	r3, r3, #22
1a0071bc:	d506      	bpl.n	1a0071cc <_puts_r+0x7c>
1a0071be:	4628      	mov	r0, r5
1a0071c0:	b008      	add	sp, #32
1a0071c2:	bd70      	pop	{r4, r5, r6, pc}
1a0071c4:	4628      	mov	r0, r5
1a0071c6:	f7ff fa2f 	bl	1a006628 <__sinit>
1a0071ca:	e7d7      	b.n	1a00717c <_puts_r+0x2c>
1a0071cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0071ce:	f7ff fbfb 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a0071d2:	4628      	mov	r0, r5
1a0071d4:	b008      	add	sp, #32
1a0071d6:	bd70      	pop	{r4, r5, r6, pc}
1a0071d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0071da:	f7ff fbf3 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a0071de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0071e2:	b29a      	uxth	r2, r3
1a0071e4:	e7d2      	b.n	1a00718c <_puts_r+0x3c>
1a0071e6:	bf00      	nop
1a0071e8:	1a00bb3c 	.word	0x1a00bb3c

1a0071ec <puts>:
1a0071ec:	4b02      	ldr	r3, [pc, #8]	; (1a0071f8 <puts+0xc>)
1a0071ee:	4601      	mov	r1, r0
1a0071f0:	6818      	ldr	r0, [r3, #0]
1a0071f2:	f7ff bfad 	b.w	1a007150 <_puts_r>
1a0071f6:	bf00      	nop
1a0071f8:	100000dc 	.word	0x100000dc

1a0071fc <__sread>:
1a0071fc:	b510      	push	{r4, lr}
1a0071fe:	460c      	mov	r4, r1
1a007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007204:	f7fa f850 	bl	1a0012a8 <_read_r>
1a007208:	2800      	cmp	r0, #0
1a00720a:	db03      	blt.n	1a007214 <__sread+0x18>
1a00720c:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00720e:	4403      	add	r3, r0
1a007210:	6523      	str	r3, [r4, #80]	; 0x50
1a007212:	bd10      	pop	{r4, pc}
1a007214:	89a3      	ldrh	r3, [r4, #12]
1a007216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00721a:	81a3      	strh	r3, [r4, #12]
1a00721c:	bd10      	pop	{r4, pc}
1a00721e:	bf00      	nop

1a007220 <__swrite>:
1a007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007224:	4616      	mov	r6, r2
1a007226:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a00722a:	461f      	mov	r7, r3
1a00722c:	05d3      	lsls	r3, r2, #23
1a00722e:	460c      	mov	r4, r1
1a007230:	4605      	mov	r5, r0
1a007232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007236:	d409      	bmi.n	1a00724c <__swrite+0x2c>
1a007238:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a00723c:	81a2      	strh	r2, [r4, #12]
1a00723e:	463b      	mov	r3, r7
1a007240:	4632      	mov	r2, r6
1a007242:	4628      	mov	r0, r5
1a007244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007248:	f7fa b855 	b.w	1a0012f6 <_write_r>
1a00724c:	2200      	movs	r2, #0
1a00724e:	2302      	movs	r3, #2
1a007250:	f7fa f825 	bl	1a00129e <_lseek_r>
1a007254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00725c:	e7ec      	b.n	1a007238 <__swrite+0x18>
1a00725e:	bf00      	nop

1a007260 <__sseek>:
1a007260:	b510      	push	{r4, lr}
1a007262:	460c      	mov	r4, r1
1a007264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007268:	f7fa f819 	bl	1a00129e <_lseek_r>
1a00726c:	89a3      	ldrh	r3, [r4, #12]
1a00726e:	1c42      	adds	r2, r0, #1
1a007270:	bf0e      	itee	eq
1a007272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a007276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00727a:	6520      	strne	r0, [r4, #80]	; 0x50
1a00727c:	81a3      	strh	r3, [r4, #12]
1a00727e:	bd10      	pop	{r4, pc}

1a007280 <__sclose>:
1a007280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007284:	f7f9 bff8 	b.w	1a001278 <_close_r>

1a007288 <strcat>:
1a007288:	0783      	lsls	r3, r0, #30
1a00728a:	b510      	push	{r4, lr}
1a00728c:	4604      	mov	r4, r0
1a00728e:	d110      	bne.n	1a0072b2 <strcat+0x2a>
1a007290:	6802      	ldr	r2, [r0, #0]
1a007292:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
1a007296:	ea23 0302 	bic.w	r3, r3, r2
1a00729a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a00729e:	d108      	bne.n	1a0072b2 <strcat+0x2a>
1a0072a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
1a0072a4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
1a0072a8:	ea23 0302 	bic.w	r3, r3, r2
1a0072ac:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a0072b0:	d0f6      	beq.n	1a0072a0 <strcat+0x18>
1a0072b2:	7803      	ldrb	r3, [r0, #0]
1a0072b4:	b11b      	cbz	r3, 1a0072be <strcat+0x36>
1a0072b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
1a0072ba:	2b00      	cmp	r3, #0
1a0072bc:	d1fb      	bne.n	1a0072b6 <strcat+0x2e>
1a0072be:	f000 f97d 	bl	1a0075bc <strcpy>
1a0072c2:	4620      	mov	r0, r4
1a0072c4:	bd10      	pop	{r4, pc}
1a0072c6:	bf00      	nop
1a0072c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0072e0:	eba2 0003 	sub.w	r0, r2, r3
1a0072e4:	4770      	bx	lr
1a0072e6:	bf00      	nop

1a0072e8 <strcmp>:
1a0072e8:	7802      	ldrb	r2, [r0, #0]
1a0072ea:	780b      	ldrb	r3, [r1, #0]
1a0072ec:	2a01      	cmp	r2, #1
1a0072ee:	bf28      	it	cs
1a0072f0:	429a      	cmpcs	r2, r3
1a0072f2:	d1f5      	bne.n	1a0072e0 <strcat+0x58>
1a0072f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
1a0072f8:	ea40 0401 	orr.w	r4, r0, r1
1a0072fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a007300:	f06f 0c00 	mvn.w	ip, #0
1a007304:	ea4f 7244 	mov.w	r2, r4, lsl #29
1a007308:	b312      	cbz	r2, 1a007350 <strcmp+0x68>
1a00730a:	ea80 0401 	eor.w	r4, r0, r1
1a00730e:	f014 0f07 	tst.w	r4, #7
1a007312:	d16a      	bne.n	1a0073ea <strcmp+0x102>
1a007314:	f000 0407 	and.w	r4, r0, #7
1a007318:	f020 0007 	bic.w	r0, r0, #7
1a00731c:	f004 0503 	and.w	r5, r4, #3
1a007320:	f021 0107 	bic.w	r1, r1, #7
1a007324:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a007328:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a00732c:	f014 0f04 	tst.w	r4, #4
1a007330:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a007334:	fa0c f405 	lsl.w	r4, ip, r5
1a007338:	ea62 0204 	orn	r2, r2, r4
1a00733c:	ea66 0604 	orn	r6, r6, r4
1a007340:	d00a      	beq.n	1a007358 <strcmp+0x70>
1a007342:	ea63 0304 	orn	r3, r3, r4
1a007346:	4662      	mov	r2, ip
1a007348:	ea67 0704 	orn	r7, r7, r4
1a00734c:	4666      	mov	r6, ip
1a00734e:	e003      	b.n	1a007358 <strcmp+0x70>
1a007350:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a007354:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a007358:	fa82 f54c 	uadd8	r5, r2, ip
1a00735c:	ea82 0406 	eor.w	r4, r2, r6
1a007360:	faa4 f48c 	sel	r4, r4, ip
1a007364:	bb6c      	cbnz	r4, 1a0073c2 <strcmp+0xda>
1a007366:	fa83 f54c 	uadd8	r5, r3, ip
1a00736a:	ea83 0507 	eor.w	r5, r3, r7
1a00736e:	faa5 f58c 	sel	r5, r5, ip
1a007372:	b995      	cbnz	r5, 1a00739a <strcmp+0xb2>
1a007374:	e950 2302 	ldrd	r2, r3, [r0, #-8]
1a007378:	e951 6702 	ldrd	r6, r7, [r1, #-8]
1a00737c:	fa82 f54c 	uadd8	r5, r2, ip
1a007380:	ea82 0406 	eor.w	r4, r2, r6
1a007384:	faa4 f48c 	sel	r4, r4, ip
1a007388:	fa83 f54c 	uadd8	r5, r3, ip
1a00738c:	ea83 0507 	eor.w	r5, r3, r7
1a007390:	faa5 f58c 	sel	r5, r5, ip
1a007394:	4325      	orrs	r5, r4
1a007396:	d0db      	beq.n	1a007350 <strcmp+0x68>
1a007398:	b99c      	cbnz	r4, 1a0073c2 <strcmp+0xda>
1a00739a:	ba2d      	rev	r5, r5
1a00739c:	fab5 f485 	clz	r4, r5
1a0073a0:	f024 0407 	bic.w	r4, r4, #7
1a0073a4:	fa27 f104 	lsr.w	r1, r7, r4
1a0073a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a0073ac:	fa23 f304 	lsr.w	r3, r3, r4
1a0073b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
1a0073b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0073b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0073bc:	eba0 0001 	sub.w	r0, r0, r1
1a0073c0:	4770      	bx	lr
1a0073c2:	ba24      	rev	r4, r4
1a0073c4:	fab4 f484 	clz	r4, r4
1a0073c8:	f024 0407 	bic.w	r4, r4, #7
1a0073cc:	fa26 f104 	lsr.w	r1, r6, r4
1a0073d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a0073d4:	fa22 f204 	lsr.w	r2, r2, r4
1a0073d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a0073dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0073e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0073e4:	eba0 0001 	sub.w	r0, r0, r1
1a0073e8:	4770      	bx	lr
1a0073ea:	f014 0f03 	tst.w	r4, #3
1a0073ee:	d13c      	bne.n	1a00746a <strcmp+0x182>
1a0073f0:	f010 0403 	ands.w	r4, r0, #3
1a0073f4:	d128      	bne.n	1a007448 <strcmp+0x160>
1a0073f6:	f850 2b08 	ldr.w	r2, [r0], #8
1a0073fa:	f851 3b08 	ldr.w	r3, [r1], #8
1a0073fe:	fa82 f54c 	uadd8	r5, r2, ip
1a007402:	ea82 0503 	eor.w	r5, r2, r3
1a007406:	faa5 f58c 	sel	r5, r5, ip
1a00740a:	b95d      	cbnz	r5, 1a007424 <strcmp+0x13c>
1a00740c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007410:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a007414:	fa82 f54c 	uadd8	r5, r2, ip
1a007418:	ea82 0503 	eor.w	r5, r2, r3
1a00741c:	faa5 f58c 	sel	r5, r5, ip
1a007420:	2d00      	cmp	r5, #0
1a007422:	d0e8      	beq.n	1a0073f6 <strcmp+0x10e>
1a007424:	ba2d      	rev	r5, r5
1a007426:	fab5 f485 	clz	r4, r5
1a00742a:	f024 0407 	bic.w	r4, r4, #7
1a00742e:	fa23 f104 	lsr.w	r1, r3, r4
1a007432:	fa22 f204 	lsr.w	r2, r2, r4
1a007436:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a00743a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00743e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a007442:	eba0 0001 	sub.w	r0, r0, r1
1a007446:	4770      	bx	lr
1a007448:	ea4f 04c4 	mov.w	r4, r4, lsl #3
1a00744c:	f020 0003 	bic.w	r0, r0, #3
1a007450:	f850 2b08 	ldr.w	r2, [r0], #8
1a007454:	f021 0103 	bic.w	r1, r1, #3
1a007458:	f851 3b08 	ldr.w	r3, [r1], #8
1a00745c:	fa0c f404 	lsl.w	r4, ip, r4
1a007460:	ea62 0204 	orn	r2, r2, r4
1a007464:	ea63 0304 	orn	r3, r3, r4
1a007468:	e7c9      	b.n	1a0073fe <strcmp+0x116>
1a00746a:	f010 0403 	ands.w	r4, r0, #3
1a00746e:	d01a      	beq.n	1a0074a6 <strcmp+0x1be>
1a007470:	eba1 0104 	sub.w	r1, r1, r4
1a007474:	f020 0003 	bic.w	r0, r0, #3
1a007478:	07e4      	lsls	r4, r4, #31
1a00747a:	f850 2b04 	ldr.w	r2, [r0], #4
1a00747e:	d006      	beq.n	1a00748e <strcmp+0x1a6>
1a007480:	d20f      	bcs.n	1a0074a2 <strcmp+0x1ba>
1a007482:	788b      	ldrb	r3, [r1, #2]
1a007484:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
1a007488:	1ae4      	subs	r4, r4, r3
1a00748a:	d106      	bne.n	1a00749a <strcmp+0x1b2>
1a00748c:	b12b      	cbz	r3, 1a00749a <strcmp+0x1b2>
1a00748e:	78cb      	ldrb	r3, [r1, #3]
1a007490:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
1a007494:	1ae4      	subs	r4, r4, r3
1a007496:	d100      	bne.n	1a00749a <strcmp+0x1b2>
1a007498:	b91b      	cbnz	r3, 1a0074a2 <strcmp+0x1ba>
1a00749a:	4620      	mov	r0, r4
1a00749c:	f85d 4b10 	ldr.w	r4, [sp], #16
1a0074a0:	4770      	bx	lr
1a0074a2:	f101 0104 	add.w	r1, r1, #4
1a0074a6:	f850 2b04 	ldr.w	r2, [r0], #4
1a0074aa:	07cc      	lsls	r4, r1, #31
1a0074ac:	f021 0103 	bic.w	r1, r1, #3
1a0074b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0074b4:	d848      	bhi.n	1a007548 <strcmp+0x260>
1a0074b6:	d224      	bcs.n	1a007502 <strcmp+0x21a>
1a0074b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
1a0074bc:	fa82 f54c 	uadd8	r5, r2, ip
1a0074c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
1a0074c4:	faa5 f58c 	sel	r5, r5, ip
1a0074c8:	d10a      	bne.n	1a0074e0 <strcmp+0x1f8>
1a0074ca:	b965      	cbnz	r5, 1a0074e6 <strcmp+0x1fe>
1a0074cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0074d0:	ea84 0402 	eor.w	r4, r4, r2
1a0074d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
1a0074d8:	d10e      	bne.n	1a0074f8 <strcmp+0x210>
1a0074da:	f850 2b04 	ldr.w	r2, [r0], #4
1a0074de:	e7eb      	b.n	1a0074b8 <strcmp+0x1d0>
1a0074e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
1a0074e4:	e055      	b.n	1a007592 <strcmp+0x2aa>
1a0074e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
1a0074ea:	d14d      	bne.n	1a007588 <strcmp+0x2a0>
1a0074ec:	7808      	ldrb	r0, [r1, #0]
1a0074ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0074f2:	f1c0 0000 	rsb	r0, r0, #0
1a0074f6:	4770      	bx	lr
1a0074f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
1a0074fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
1a007500:	e047      	b.n	1a007592 <strcmp+0x2aa>
1a007502:	ea02 441c 	and.w	r4, r2, ip, lsr #16
1a007506:	fa82 f54c 	uadd8	r5, r2, ip
1a00750a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
1a00750e:	faa5 f58c 	sel	r5, r5, ip
1a007512:	d10a      	bne.n	1a00752a <strcmp+0x242>
1a007514:	b965      	cbnz	r5, 1a007530 <strcmp+0x248>
1a007516:	f851 3b04 	ldr.w	r3, [r1], #4
1a00751a:	ea84 0402 	eor.w	r4, r4, r2
1a00751e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
1a007522:	d10c      	bne.n	1a00753e <strcmp+0x256>
1a007524:	f850 2b04 	ldr.w	r2, [r0], #4
1a007528:	e7eb      	b.n	1a007502 <strcmp+0x21a>
1a00752a:	ea4f 4313 	mov.w	r3, r3, lsr #16
1a00752e:	e030      	b.n	1a007592 <strcmp+0x2aa>
1a007530:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
1a007534:	d128      	bne.n	1a007588 <strcmp+0x2a0>
1a007536:	880b      	ldrh	r3, [r1, #0]
1a007538:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a00753c:	e029      	b.n	1a007592 <strcmp+0x2aa>
1a00753e:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a007542:	ea03 431c 	and.w	r3, r3, ip, lsr #16
1a007546:	e024      	b.n	1a007592 <strcmp+0x2aa>
1a007548:	f002 04ff 	and.w	r4, r2, #255	; 0xff
1a00754c:	fa82 f54c 	uadd8	r5, r2, ip
1a007550:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
1a007554:	faa5 f58c 	sel	r5, r5, ip
1a007558:	d10a      	bne.n	1a007570 <strcmp+0x288>
1a00755a:	b965      	cbnz	r5, 1a007576 <strcmp+0x28e>
1a00755c:	f851 3b04 	ldr.w	r3, [r1], #4
1a007560:	ea84 0402 	eor.w	r4, r4, r2
1a007564:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
1a007568:	d109      	bne.n	1a00757e <strcmp+0x296>
1a00756a:	f850 2b04 	ldr.w	r2, [r0], #4
1a00756e:	e7eb      	b.n	1a007548 <strcmp+0x260>
1a007570:	ea4f 6313 	mov.w	r3, r3, lsr #24
1a007574:	e00d      	b.n	1a007592 <strcmp+0x2aa>
1a007576:	f015 0fff 	tst.w	r5, #255	; 0xff
1a00757a:	d105      	bne.n	1a007588 <strcmp+0x2a0>
1a00757c:	680b      	ldr	r3, [r1, #0]
1a00757e:	ea4f 2212 	mov.w	r2, r2, lsr #8
1a007582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
1a007586:	e004      	b.n	1a007592 <strcmp+0x2aa>
1a007588:	f04f 0000 	mov.w	r0, #0
1a00758c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a007590:	4770      	bx	lr
1a007592:	ba12      	rev	r2, r2
1a007594:	ba1b      	rev	r3, r3
1a007596:	fa82 f44c 	uadd8	r4, r2, ip
1a00759a:	ea82 0403 	eor.w	r4, r2, r3
1a00759e:	faa4 f58c 	sel	r5, r4, ip
1a0075a2:	fab5 f485 	clz	r4, r5
1a0075a6:	fa02 f204 	lsl.w	r2, r2, r4
1a0075aa:	fa03 f304 	lsl.w	r3, r3, r4
1a0075ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
1a0075b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a0075b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
1a0075ba:	4770      	bx	lr

1a0075bc <strcpy>:
1a0075bc:	ea80 0201 	eor.w	r2, r0, r1
1a0075c0:	4684      	mov	ip, r0
1a0075c2:	f012 0f03 	tst.w	r2, #3
1a0075c6:	d14f      	bne.n	1a007668 <strcpy+0xac>
1a0075c8:	f011 0f03 	tst.w	r1, #3
1a0075cc:	d132      	bne.n	1a007634 <strcpy+0x78>
1a0075ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
1a0075d2:	f011 0f04 	tst.w	r1, #4
1a0075d6:	f851 3b04 	ldr.w	r3, [r1], #4
1a0075da:	d00b      	beq.n	1a0075f4 <strcpy+0x38>
1a0075dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
1a0075e0:	439a      	bics	r2, r3
1a0075e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a0075e6:	bf04      	itt	eq
1a0075e8:	f84c 3b04 	streq.w	r3, [ip], #4
1a0075ec:	f851 3b04 	ldreq.w	r3, [r1], #4
1a0075f0:	d116      	bne.n	1a007620 <strcpy+0x64>
1a0075f2:	bf00      	nop
1a0075f4:	f851 4b04 	ldr.w	r4, [r1], #4
1a0075f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
1a0075fc:	439a      	bics	r2, r3
1a0075fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a007602:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
1a007606:	d10b      	bne.n	1a007620 <strcpy+0x64>
1a007608:	f84c 3b04 	str.w	r3, [ip], #4
1a00760c:	43a2      	bics	r2, r4
1a00760e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a007612:	bf04      	itt	eq
1a007614:	f851 3b04 	ldreq.w	r3, [r1], #4
1a007618:	f84c 4b04 	streq.w	r4, [ip], #4
1a00761c:	d0ea      	beq.n	1a0075f4 <strcpy+0x38>
1a00761e:	4623      	mov	r3, r4
1a007620:	f80c 3b01 	strb.w	r3, [ip], #1
1a007624:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007628:	ea4f 2333 	mov.w	r3, r3, ror #8
1a00762c:	d1f8      	bne.n	1a007620 <strcpy+0x64>
1a00762e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007632:	4770      	bx	lr
1a007634:	f011 0f01 	tst.w	r1, #1
1a007638:	d006      	beq.n	1a007648 <strcpy+0x8c>
1a00763a:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00763e:	f80c 2b01 	strb.w	r2, [ip], #1
1a007642:	2a00      	cmp	r2, #0
1a007644:	bf08      	it	eq
1a007646:	4770      	bxeq	lr
1a007648:	f011 0f02 	tst.w	r1, #2
1a00764c:	d0bf      	beq.n	1a0075ce <strcpy+0x12>
1a00764e:	f831 2b02 	ldrh.w	r2, [r1], #2
1a007652:	f012 0fff 	tst.w	r2, #255	; 0xff
1a007656:	bf16      	itet	ne
1a007658:	f82c 2b02 	strhne.w	r2, [ip], #2
1a00765c:	f88c 2000 	strbeq.w	r2, [ip]
1a007660:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
1a007664:	d1b3      	bne.n	1a0075ce <strcpy+0x12>
1a007666:	4770      	bx	lr
1a007668:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00766c:	f80c 2b01 	strb.w	r2, [ip], #1
1a007670:	2a00      	cmp	r2, #0
1a007672:	d1f9      	bne.n	1a007668 <strcpy+0xac>
1a007674:	4770      	bx	lr
1a007676:	bf00      	nop
1a007678:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00767c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a007680 <strlen>:
1a007680:	f890 f000 	pld	[r0]
1a007684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a007688:	f020 0107 	bic.w	r1, r0, #7
1a00768c:	f06f 0c00 	mvn.w	ip, #0
1a007690:	f010 0407 	ands.w	r4, r0, #7
1a007694:	f891 f020 	pld	[r1, #32]
1a007698:	f040 8049 	bne.w	1a00772e <strlen+0xae>
1a00769c:	f04f 0400 	mov.w	r4, #0
1a0076a0:	f06f 0007 	mvn.w	r0, #7
1a0076a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0076a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0076ac:	f100 0008 	add.w	r0, r0, #8
1a0076b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0076b4:	faa4 f28c 	sel	r2, r4, ip
1a0076b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0076bc:	faa2 f38c 	sel	r3, r2, ip
1a0076c0:	bb4b      	cbnz	r3, 1a007716 <strlen+0x96>
1a0076c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0076c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0076ca:	f100 0008 	add.w	r0, r0, #8
1a0076ce:	faa4 f28c 	sel	r2, r4, ip
1a0076d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0076d6:	faa2 f38c 	sel	r3, r2, ip
1a0076da:	b9e3      	cbnz	r3, 1a007716 <strlen+0x96>
1a0076dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0076e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0076e4:	f100 0008 	add.w	r0, r0, #8
1a0076e8:	faa4 f28c 	sel	r2, r4, ip
1a0076ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0076f0:	faa2 f38c 	sel	r3, r2, ip
1a0076f4:	b97b      	cbnz	r3, 1a007716 <strlen+0x96>
1a0076f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0076fa:	f101 0120 	add.w	r1, r1, #32
1a0076fe:	fa82 f24c 	uadd8	r2, r2, ip
1a007702:	f100 0008 	add.w	r0, r0, #8
1a007706:	faa4 f28c 	sel	r2, r4, ip
1a00770a:	fa83 f34c 	uadd8	r3, r3, ip
1a00770e:	faa2 f38c 	sel	r3, r2, ip
1a007712:	2b00      	cmp	r3, #0
1a007714:	d0c6      	beq.n	1a0076a4 <strlen+0x24>
1a007716:	2a00      	cmp	r2, #0
1a007718:	bf04      	itt	eq
1a00771a:	3004      	addeq	r0, #4
1a00771c:	461a      	moveq	r2, r3
1a00771e:	ba12      	rev	r2, r2
1a007720:	fab2 f282 	clz	r2, r2
1a007724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a007728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00772c:	4770      	bx	lr
1a00772e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a007732:	f004 0503 	and.w	r5, r4, #3
1a007736:	f1c4 0000 	rsb	r0, r4, #0
1a00773a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00773e:	f014 0f04 	tst.w	r4, #4
1a007742:	f891 f040 	pld	[r1, #64]	; 0x40
1a007746:	fa0c f505 	lsl.w	r5, ip, r5
1a00774a:	ea62 0205 	orn	r2, r2, r5
1a00774e:	bf1c      	itt	ne
1a007750:	ea63 0305 	ornne	r3, r3, r5
1a007754:	4662      	movne	r2, ip
1a007756:	f04f 0400 	mov.w	r4, #0
1a00775a:	e7a9      	b.n	1a0076b0 <strlen+0x30>

1a00775c <strncmp>:
1a00775c:	2a00      	cmp	r2, #0
1a00775e:	d046      	beq.n	1a0077ee <strncmp+0x92>
1a007760:	ea40 0301 	orr.w	r3, r0, r1
1a007764:	f013 0303 	ands.w	r3, r3, #3
1a007768:	b4f0      	push	{r4, r5, r6, r7}
1a00776a:	d125      	bne.n	1a0077b8 <strncmp+0x5c>
1a00776c:	2a03      	cmp	r2, #3
1a00776e:	d923      	bls.n	1a0077b8 <strncmp+0x5c>
1a007770:	6804      	ldr	r4, [r0, #0]
1a007772:	680d      	ldr	r5, [r1, #0]
1a007774:	42ac      	cmp	r4, r5
1a007776:	d13c      	bne.n	1a0077f2 <strncmp+0x96>
1a007778:	3a04      	subs	r2, #4
1a00777a:	d035      	beq.n	1a0077e8 <strncmp+0x8c>
1a00777c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
1a007780:	ea25 0404 	bic.w	r4, r5, r4
1a007784:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007788:	d12e      	bne.n	1a0077e8 <strncmp+0x8c>
1a00778a:	1d07      	adds	r7, r0, #4
1a00778c:	1d0d      	adds	r5, r1, #4
1a00778e:	e00d      	b.n	1a0077ac <strncmp+0x50>
1a007790:	f857 3b04 	ldr.w	r3, [r7], #4
1a007794:	680e      	ldr	r6, [r1, #0]
1a007796:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
1a00779a:	42b3      	cmp	r3, r6
1a00779c:	ea24 0403 	bic.w	r4, r4, r3
1a0077a0:	d127      	bne.n	1a0077f2 <strncmp+0x96>
1a0077a2:	3a04      	subs	r2, #4
1a0077a4:	d020      	beq.n	1a0077e8 <strncmp+0x8c>
1a0077a6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a0077aa:	d11d      	bne.n	1a0077e8 <strncmp+0x8c>
1a0077ac:	2a03      	cmp	r2, #3
1a0077ae:	4629      	mov	r1, r5
1a0077b0:	4638      	mov	r0, r7
1a0077b2:	f105 0504 	add.w	r5, r5, #4
1a0077b6:	d8eb      	bhi.n	1a007790 <strncmp+0x34>
1a0077b8:	7803      	ldrb	r3, [r0, #0]
1a0077ba:	780d      	ldrb	r5, [r1, #0]
1a0077bc:	429d      	cmp	r5, r3
1a0077be:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
1a0077c2:	d10e      	bne.n	1a0077e2 <strncmp+0x86>
1a0077c4:	b186      	cbz	r6, 1a0077e8 <strncmp+0x8c>
1a0077c6:	b17b      	cbz	r3, 1a0077e8 <strncmp+0x8c>
1a0077c8:	4604      	mov	r4, r0
1a0077ca:	e002      	b.n	1a0077d2 <strncmp+0x76>
1a0077cc:	1882      	adds	r2, r0, r2
1a0077ce:	d00b      	beq.n	1a0077e8 <strncmp+0x8c>
1a0077d0:	b153      	cbz	r3, 1a0077e8 <strncmp+0x8c>
1a0077d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a0077d6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a0077da:	42ab      	cmp	r3, r5
1a0077dc:	eba6 0204 	sub.w	r2, r6, r4
1a0077e0:	d0f4      	beq.n	1a0077cc <strncmp+0x70>
1a0077e2:	1b58      	subs	r0, r3, r5
1a0077e4:	bcf0      	pop	{r4, r5, r6, r7}
1a0077e6:	4770      	bx	lr
1a0077e8:	2000      	movs	r0, #0
1a0077ea:	bcf0      	pop	{r4, r5, r6, r7}
1a0077ec:	4770      	bx	lr
1a0077ee:	4610      	mov	r0, r2
1a0077f0:	4770      	bx	lr
1a0077f2:	7803      	ldrb	r3, [r0, #0]
1a0077f4:	780d      	ldrb	r5, [r1, #0]
1a0077f6:	429d      	cmp	r5, r3
1a0077f8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
1a0077fc:	d0e3      	beq.n	1a0077c6 <strncmp+0x6a>
1a0077fe:	e7f0      	b.n	1a0077e2 <strncmp+0x86>

1a007800 <_strtol_l.isra.0>:
1a007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007804:	4681      	mov	r9, r0
1a007806:	4f41      	ldr	r7, [pc, #260]	; (1a00790c <_strtol_l.isra.0+0x10c>)
1a007808:	4608      	mov	r0, r1
1a00780a:	e000      	b.n	1a00780e <_strtol_l.isra.0+0xe>
1a00780c:	4628      	mov	r0, r5
1a00780e:	4605      	mov	r5, r0
1a007810:	f815 4b01 	ldrb.w	r4, [r5], #1
1a007814:	5d3e      	ldrb	r6, [r7, r4]
1a007816:	f016 0608 	ands.w	r6, r6, #8
1a00781a:	d1f7      	bne.n	1a00780c <_strtol_l.isra.0+0xc>
1a00781c:	2c2d      	cmp	r4, #45	; 0x2d
1a00781e:	d054      	beq.n	1a0078ca <_strtol_l.isra.0+0xca>
1a007820:	2c2b      	cmp	r4, #43	; 0x2b
1a007822:	bf0a      	itet	eq
1a007824:	f895 b000 	ldrbeq.w	fp, [r5]
1a007828:	46a3      	movne	fp, r4
1a00782a:	1c85      	addeq	r5, r0, #2
1a00782c:	2b00      	cmp	r3, #0
1a00782e:	d03f      	beq.n	1a0078b0 <_strtol_l.isra.0+0xb0>
1a007830:	2b10      	cmp	r3, #16
1a007832:	d04f      	beq.n	1a0078d4 <_strtol_l.isra.0+0xd4>
1a007834:	469e      	mov	lr, r3
1a007836:	2e00      	cmp	r6, #0
1a007838:	bf14      	ite	ne
1a00783a:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
1a00783e:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
1a007842:	2700      	movs	r7, #0
1a007844:	fbb8 fcfe 	udiv	ip, r8, lr
1a007848:	4638      	mov	r0, r7
1a00784a:	fb0e 8a1c 	mls	sl, lr, ip, r8
1a00784e:	e005      	b.n	1a00785c <_strtol_l.isra.0+0x5c>
1a007850:	d029      	beq.n	1a0078a6 <_strtol_l.isra.0+0xa6>
1a007852:	fb00 400e 	mla	r0, r0, lr, r4
1a007856:	2701      	movs	r7, #1
1a007858:	f815 bb01 	ldrb.w	fp, [r5], #1
1a00785c:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
1a007860:	2c09      	cmp	r4, #9
1a007862:	d905      	bls.n	1a007870 <_strtol_l.isra.0+0x70>
1a007864:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
1a007868:	2c19      	cmp	r4, #25
1a00786a:	d80b      	bhi.n	1a007884 <_strtol_l.isra.0+0x84>
1a00786c:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
1a007870:	42a3      	cmp	r3, r4
1a007872:	dd0f      	ble.n	1a007894 <_strtol_l.isra.0+0x94>
1a007874:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
1a007878:	d0ee      	beq.n	1a007858 <_strtol_l.isra.0+0x58>
1a00787a:	4584      	cmp	ip, r0
1a00787c:	d2e8      	bcs.n	1a007850 <_strtol_l.isra.0+0x50>
1a00787e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007882:	e7e9      	b.n	1a007858 <_strtol_l.isra.0+0x58>
1a007884:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
1a007888:	2c19      	cmp	r4, #25
1a00788a:	d803      	bhi.n	1a007894 <_strtol_l.isra.0+0x94>
1a00788c:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
1a007890:	42a3      	cmp	r3, r4
1a007892:	dcef      	bgt.n	1a007874 <_strtol_l.isra.0+0x74>
1a007894:	1c7b      	adds	r3, r7, #1
1a007896:	d011      	beq.n	1a0078bc <_strtol_l.isra.0+0xbc>
1a007898:	b106      	cbz	r6, 1a00789c <_strtol_l.isra.0+0x9c>
1a00789a:	4240      	negs	r0, r0
1a00789c:	b10a      	cbz	r2, 1a0078a2 <_strtol_l.isra.0+0xa2>
1a00789e:	bb9f      	cbnz	r7, 1a007908 <_strtol_l.isra.0+0x108>
1a0078a0:	6011      	str	r1, [r2, #0]
1a0078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0078a6:	45a2      	cmp	sl, r4
1a0078a8:	dad3      	bge.n	1a007852 <_strtol_l.isra.0+0x52>
1a0078aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0078ae:	e7d3      	b.n	1a007858 <_strtol_l.isra.0+0x58>
1a0078b0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
1a0078b4:	d01d      	beq.n	1a0078f2 <_strtol_l.isra.0+0xf2>
1a0078b6:	230a      	movs	r3, #10
1a0078b8:	469e      	mov	lr, r3
1a0078ba:	e7bc      	b.n	1a007836 <_strtol_l.isra.0+0x36>
1a0078bc:	2322      	movs	r3, #34	; 0x22
1a0078be:	f8c9 3000 	str.w	r3, [r9]
1a0078c2:	b1f2      	cbz	r2, 1a007902 <_strtol_l.isra.0+0x102>
1a0078c4:	1e69      	subs	r1, r5, #1
1a0078c6:	4640      	mov	r0, r8
1a0078c8:	e7ea      	b.n	1a0078a0 <_strtol_l.isra.0+0xa0>
1a0078ca:	f895 b000 	ldrb.w	fp, [r5]
1a0078ce:	2601      	movs	r6, #1
1a0078d0:	1c85      	adds	r5, r0, #2
1a0078d2:	e7ab      	b.n	1a00782c <_strtol_l.isra.0+0x2c>
1a0078d4:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
1a0078d8:	d1ac      	bne.n	1a007834 <_strtol_l.isra.0+0x34>
1a0078da:	7828      	ldrb	r0, [r5, #0]
1a0078dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
1a0078e0:	2858      	cmp	r0, #88	; 0x58
1a0078e2:	d1a7      	bne.n	1a007834 <_strtol_l.isra.0+0x34>
1a0078e4:	f04f 0e10 	mov.w	lr, #16
1a0078e8:	f895 b001 	ldrb.w	fp, [r5, #1]
1a0078ec:	4673      	mov	r3, lr
1a0078ee:	3502      	adds	r5, #2
1a0078f0:	e7a1      	b.n	1a007836 <_strtol_l.isra.0+0x36>
1a0078f2:	782b      	ldrb	r3, [r5, #0]
1a0078f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a0078f8:	2b58      	cmp	r3, #88	; 0x58
1a0078fa:	d0f3      	beq.n	1a0078e4 <_strtol_l.isra.0+0xe4>
1a0078fc:	2308      	movs	r3, #8
1a0078fe:	469e      	mov	lr, r3
1a007900:	e799      	b.n	1a007836 <_strtol_l.isra.0+0x36>
1a007902:	4640      	mov	r0, r8
1a007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007908:	4680      	mov	r8, r0
1a00790a:	e7db      	b.n	1a0078c4 <_strtol_l.isra.0+0xc4>
1a00790c:	1a00c00d 	.word	0x1a00c00d

1a007910 <strtol>:
1a007910:	b410      	push	{r4}
1a007912:	4c04      	ldr	r4, [pc, #16]	; (1a007924 <strtol+0x14>)
1a007914:	4613      	mov	r3, r2
1a007916:	460a      	mov	r2, r1
1a007918:	4601      	mov	r1, r0
1a00791a:	6820      	ldr	r0, [r4, #0]
1a00791c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007920:	f7ff bf6e 	b.w	1a007800 <_strtol_l.isra.0>
1a007924:	100000dc 	.word	0x100000dc

1a007928 <_vfprintf_r>:
1a007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00792c:	b0d5      	sub	sp, #340	; 0x154
1a00792e:	461c      	mov	r4, r3
1a007930:	4689      	mov	r9, r1
1a007932:	4617      	mov	r7, r2
1a007934:	4605      	mov	r5, r0
1a007936:	9005      	str	r0, [sp, #20]
1a007938:	f002 ff8c 	bl	1a00a854 <_localeconv_r>
1a00793c:	6803      	ldr	r3, [r0, #0]
1a00793e:	9315      	str	r3, [sp, #84]	; 0x54
1a007940:	4618      	mov	r0, r3
1a007942:	f7ff fe9d 	bl	1a007680 <strlen>
1a007946:	9408      	str	r4, [sp, #32]
1a007948:	9013      	str	r0, [sp, #76]	; 0x4c
1a00794a:	b11d      	cbz	r5, 1a007954 <_vfprintf_r+0x2c>
1a00794c:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00794e:	2b00      	cmp	r3, #0
1a007950:	f000 8411 	beq.w	1a008176 <_vfprintf_r+0x84e>
1a007954:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a007958:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00795c:	07cd      	lsls	r5, r1, #31
1a00795e:	b293      	uxth	r3, r2
1a007960:	d402      	bmi.n	1a007968 <_vfprintf_r+0x40>
1a007962:	0598      	lsls	r0, r3, #22
1a007964:	f140 8754 	bpl.w	1a008810 <_vfprintf_r+0xee8>
1a007968:	0499      	lsls	r1, r3, #18
1a00796a:	d40a      	bmi.n	1a007982 <_vfprintf_r+0x5a>
1a00796c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a007970:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a007974:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a007978:	f8a9 300c 	strh.w	r3, [r9, #12]
1a00797c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a007980:	b29b      	uxth	r3, r3
1a007982:	071a      	lsls	r2, r3, #28
1a007984:	f140 80bf 	bpl.w	1a007b06 <_vfprintf_r+0x1de>
1a007988:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a00798c:	2a00      	cmp	r2, #0
1a00798e:	f000 80ba 	beq.w	1a007b06 <_vfprintf_r+0x1de>
1a007992:	f003 021a 	and.w	r2, r3, #26
1a007996:	2a0a      	cmp	r2, #10
1a007998:	f000 80c3 	beq.w	1a007b22 <_vfprintf_r+0x1fa>
1a00799c:	2300      	movs	r3, #0
1a00799e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a007c10 <_vfprintf_r+0x2e8>
1a0079a2:	9312      	str	r3, [sp, #72]	; 0x48
1a0079a4:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a0079a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0079aa:	9316      	str	r3, [sp, #88]	; 0x58
1a0079ac:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a0079b0:	9317      	str	r3, [sp, #92]	; 0x5c
1a0079b2:	9304      	str	r3, [sp, #16]
1a0079b4:	ab2b      	add	r3, sp, #172	; 0xac
1a0079b6:	9328      	str	r3, [sp, #160]	; 0xa0
1a0079b8:	469b      	mov	fp, r3
1a0079ba:	783b      	ldrb	r3, [r7, #0]
1a0079bc:	f8cd 901c 	str.w	r9, [sp, #28]
1a0079c0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0079c4:	2b00      	cmp	r3, #0
1a0079c6:	f000 8267 	beq.w	1a007e98 <_vfprintf_r+0x570>
1a0079ca:	2b25      	cmp	r3, #37	; 0x25
1a0079cc:	f001 80ab 	beq.w	1a008b26 <_vfprintf_r+0x11fe>
1a0079d0:	463d      	mov	r5, r7
1a0079d2:	e003      	b.n	1a0079dc <_vfprintf_r+0xb4>
1a0079d4:	2b25      	cmp	r3, #37	; 0x25
1a0079d6:	f000 80bb 	beq.w	1a007b50 <_vfprintf_r+0x228>
1a0079da:	4625      	mov	r5, r4
1a0079dc:	786b      	ldrb	r3, [r5, #1]
1a0079de:	1c6c      	adds	r4, r5, #1
1a0079e0:	2b00      	cmp	r3, #0
1a0079e2:	d1f7      	bne.n	1a0079d4 <_vfprintf_r+0xac>
1a0079e4:	1be6      	subs	r6, r4, r7
1a0079e6:	f000 8257 	beq.w	1a007e98 <_vfprintf_r+0x570>
1a0079ea:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a0079ee:	3301      	adds	r3, #1
1a0079f0:	4432      	add	r2, r6
1a0079f2:	2b07      	cmp	r3, #7
1a0079f4:	f8cb 7000 	str.w	r7, [fp]
1a0079f8:	f8cb 6004 	str.w	r6, [fp, #4]
1a0079fc:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a007a00:	f300 80aa 	bgt.w	1a007b58 <_vfprintf_r+0x230>
1a007a04:	f10b 0b08 	add.w	fp, fp, #8
1a007a08:	9a04      	ldr	r2, [sp, #16]
1a007a0a:	786b      	ldrb	r3, [r5, #1]
1a007a0c:	4432      	add	r2, r6
1a007a0e:	9204      	str	r2, [sp, #16]
1a007a10:	2b00      	cmp	r3, #0
1a007a12:	f000 8241 	beq.w	1a007e98 <_vfprintf_r+0x570>
1a007a16:	2300      	movs	r3, #0
1a007a18:	f894 8001 	ldrb.w	r8, [r4, #1]
1a007a1c:	9306      	str	r3, [sp, #24]
1a007a1e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007a22:	9302      	str	r3, [sp, #8]
1a007a24:	f104 0a01 	add.w	sl, r4, #1
1a007a28:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a007a2c:	262b      	movs	r6, #43	; 0x2b
1a007a2e:	2120      	movs	r1, #32
1a007a30:	f10a 0a01 	add.w	sl, sl, #1
1a007a34:	f1a8 0320 	sub.w	r3, r8, #32
1a007a38:	2b5a      	cmp	r3, #90	; 0x5a
1a007a3a:	f200 83a1 	bhi.w	1a008180 <_vfprintf_r+0x858>
1a007a3e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a007a42:	0282      	.short	0x0282
1a007a44:	039f039f 	.word	0x039f039f
1a007a48:	039f027b 	.word	0x039f027b
1a007a4c:	039f039f 	.word	0x039f039f
1a007a50:	039f0301 	.word	0x039f0301
1a007a54:	02f6039f 	.word	0x02f6039f
1a007a58:	039f00df 	.word	0x039f00df
1a007a5c:	032b00c4 	.word	0x032b00c4
1a007a60:	0324039f 	.word	0x0324039f
1a007a64:	00960096 	.word	0x00960096
1a007a68:	00960096 	.word	0x00960096
1a007a6c:	00960096 	.word	0x00960096
1a007a70:	00960096 	.word	0x00960096
1a007a74:	039f0096 	.word	0x039f0096
1a007a78:	039f039f 	.word	0x039f039f
1a007a7c:	039f039f 	.word	0x039f039f
1a007a80:	039f039f 	.word	0x039f039f
1a007a84:	039f0345 	.word	0x039f0345
1a007a88:	016201a8 	.word	0x016201a8
1a007a8c:	03450345 	.word	0x03450345
1a007a90:	039f0345 	.word	0x039f0345
1a007a94:	039f039f 	.word	0x039f039f
1a007a98:	015b039f 	.word	0x015b039f
1a007a9c:	039f039f 	.word	0x039f039f
1a007aa0:	039f014e 	.word	0x039f014e
1a007aa4:	039f039f 	.word	0x039f039f
1a007aa8:	039f0123 	.word	0x039f0123
1a007aac:	039f0115 	.word	0x039f0115
1a007ab0:	00cb039f 	.word	0x00cb039f
1a007ab4:	039f039f 	.word	0x039f039f
1a007ab8:	039f039f 	.word	0x039f039f
1a007abc:	039f039f 	.word	0x039f039f
1a007ac0:	039f039f 	.word	0x039f039f
1a007ac4:	039f0345 	.word	0x039f0345
1a007ac8:	00ef01a8 	.word	0x00ef01a8
1a007acc:	03450345 	.word	0x03450345
1a007ad0:	02700345 	.word	0x02700345
1a007ad4:	005b00ef 	.word	0x005b00ef
1a007ad8:	02eb039f 	.word	0x02eb039f
1a007adc:	02d1039f 	.word	0x02d1039f
1a007ae0:	028c02bd 	.word	0x028c02bd
1a007ae4:	039f005b 	.word	0x039f005b
1a007ae8:	005f0123 	.word	0x005f0123
1a007aec:	039f0387 	.word	0x039f0387
1a007af0:	00a5039f 	.word	0x00a5039f
1a007af4:	005f039f 	.word	0x005f039f
1a007af8:	9b02      	ldr	r3, [sp, #8]
1a007afa:	f043 0320 	orr.w	r3, r3, #32
1a007afe:	9302      	str	r3, [sp, #8]
1a007b00:	f89a 8000 	ldrb.w	r8, [sl]
1a007b04:	e794      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007b06:	4649      	mov	r1, r9
1a007b08:	9805      	ldr	r0, [sp, #20]
1a007b0a:	f001 fcf9 	bl	1a009500 <__swsetup_r>
1a007b0e:	2800      	cmp	r0, #0
1a007b10:	f041 8381 	bne.w	1a009216 <_vfprintf_r+0x18ee>
1a007b14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007b18:	f003 021a 	and.w	r2, r3, #26
1a007b1c:	2a0a      	cmp	r2, #10
1a007b1e:	f47f af3d 	bne.w	1a00799c <_vfprintf_r+0x74>
1a007b22:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a007b26:	2a00      	cmp	r2, #0
1a007b28:	f6ff af38 	blt.w	1a00799c <_vfprintf_r+0x74>
1a007b2c:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a007b30:	07d6      	lsls	r6, r2, #31
1a007b32:	d402      	bmi.n	1a007b3a <_vfprintf_r+0x212>
1a007b34:	059d      	lsls	r5, r3, #22
1a007b36:	f141 8190 	bpl.w	1a008e5a <_vfprintf_r+0x1532>
1a007b3a:	4623      	mov	r3, r4
1a007b3c:	463a      	mov	r2, r7
1a007b3e:	4649      	mov	r1, r9
1a007b40:	9805      	ldr	r0, [sp, #20]
1a007b42:	f001 fc9b 	bl	1a00947c <__sbprintf>
1a007b46:	9004      	str	r0, [sp, #16]
1a007b48:	9804      	ldr	r0, [sp, #16]
1a007b4a:	b055      	add	sp, #340	; 0x154
1a007b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007b50:	1be6      	subs	r6, r4, r7
1a007b52:	f43f af60 	beq.w	1a007a16 <_vfprintf_r+0xee>
1a007b56:	e748      	b.n	1a0079ea <_vfprintf_r+0xc2>
1a007b58:	aa28      	add	r2, sp, #160	; 0xa0
1a007b5a:	9907      	ldr	r1, [sp, #28]
1a007b5c:	9805      	ldr	r0, [sp, #20]
1a007b5e:	f003 fd1b 	bl	1a00b598 <__sprint_r>
1a007b62:	2800      	cmp	r0, #0
1a007b64:	f041 8427 	bne.w	1a0093b6 <_vfprintf_r+0x1a8e>
1a007b68:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007b6c:	e74c      	b.n	1a007a08 <_vfprintf_r+0xe0>
1a007b6e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a007b72:	2200      	movs	r2, #0
1a007b74:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a007b78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a007b7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a007b80:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a007b84:	2b09      	cmp	r3, #9
1a007b86:	d9f5      	bls.n	1a007b74 <_vfprintf_r+0x24c>
1a007b88:	9206      	str	r2, [sp, #24]
1a007b8a:	e753      	b.n	1a007a34 <_vfprintf_r+0x10c>
1a007b8c:	4b22      	ldr	r3, [pc, #136]	; (1a007c18 <_vfprintf_r+0x2f0>)
1a007b8e:	9314      	str	r3, [sp, #80]	; 0x50
1a007b90:	9b02      	ldr	r3, [sp, #8]
1a007b92:	069f      	lsls	r7, r3, #26
1a007b94:	d525      	bpl.n	1a007be2 <_vfprintf_r+0x2ba>
1a007b96:	9c08      	ldr	r4, [sp, #32]
1a007b98:	3407      	adds	r4, #7
1a007b9a:	f024 0307 	bic.w	r3, r4, #7
1a007b9e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a007ba2:	9308      	str	r3, [sp, #32]
1a007ba4:	9a02      	ldr	r2, [sp, #8]
1a007ba6:	07d1      	lsls	r1, r2, #31
1a007ba8:	d50a      	bpl.n	1a007bc0 <_vfprintf_r+0x298>
1a007baa:	ea54 0305 	orrs.w	r3, r4, r5
1a007bae:	d007      	beq.n	1a007bc0 <_vfprintf_r+0x298>
1a007bb0:	2330      	movs	r3, #48	; 0x30
1a007bb2:	f042 0202 	orr.w	r2, r2, #2
1a007bb6:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a007bba:	9202      	str	r2, [sp, #8]
1a007bbc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a007bc0:	9b02      	ldr	r3, [sp, #8]
1a007bc2:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a007bc6:	2302      	movs	r3, #2
1a007bc8:	e1d9      	b.n	1a007f7e <_vfprintf_r+0x656>
1a007bca:	f89a 8000 	ldrb.w	r8, [sl]
1a007bce:	9b02      	ldr	r3, [sp, #8]
1a007bd0:	f043 0304 	orr.w	r3, r3, #4
1a007bd4:	9302      	str	r3, [sp, #8]
1a007bd6:	e72b      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007bd8:	4b10      	ldr	r3, [pc, #64]	; (1a007c1c <_vfprintf_r+0x2f4>)
1a007bda:	9314      	str	r3, [sp, #80]	; 0x50
1a007bdc:	9b02      	ldr	r3, [sp, #8]
1a007bde:	069f      	lsls	r7, r3, #26
1a007be0:	d4d9      	bmi.n	1a007b96 <_vfprintf_r+0x26e>
1a007be2:	9b08      	ldr	r3, [sp, #32]
1a007be4:	f853 4b04 	ldr.w	r4, [r3], #4
1a007be8:	9308      	str	r3, [sp, #32]
1a007bea:	9b02      	ldr	r3, [sp, #8]
1a007bec:	06de      	lsls	r6, r3, #27
1a007bee:	f100 864f 	bmi.w	1a008890 <_vfprintf_r+0xf68>
1a007bf2:	9b02      	ldr	r3, [sp, #8]
1a007bf4:	065d      	lsls	r5, r3, #25
1a007bf6:	f140 8647 	bpl.w	1a008888 <_vfprintf_r+0xf60>
1a007bfa:	b2a4      	uxth	r4, r4
1a007bfc:	2500      	movs	r5, #0
1a007bfe:	e7d1      	b.n	1a007ba4 <_vfprintf_r+0x27c>
1a007c00:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a007c04:	f89a 8000 	ldrb.w	r8, [sl]
1a007c08:	e712      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007c0a:	bf00      	nop
1a007c0c:	f3af 8000 	nop.w
	...
1a007c18:	1a00c134 	.word	0x1a00c134
1a007c1c:	1a00c120 	.word	0x1a00c120
1a007c20:	9e02      	ldr	r6, [sp, #8]
1a007c22:	06b0      	lsls	r0, r6, #26
1a007c24:	f140 870b 	bpl.w	1a008a3e <_vfprintf_r+0x1116>
1a007c28:	9c08      	ldr	r4, [sp, #32]
1a007c2a:	3407      	adds	r4, #7
1a007c2c:	f024 0307 	bic.w	r3, r4, #7
1a007c30:	4619      	mov	r1, r3
1a007c32:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a007c36:	9108      	str	r1, [sp, #32]
1a007c38:	4614      	mov	r4, r2
1a007c3a:	461d      	mov	r5, r3
1a007c3c:	2a00      	cmp	r2, #0
1a007c3e:	f173 0300 	sbcs.w	r3, r3, #0
1a007c42:	db71      	blt.n	1a007d28 <_vfprintf_r+0x400>
1a007c44:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007c48:	f000 82c5 	beq.w	1a0081d6 <_vfprintf_r+0x8ae>
1a007c4c:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a007c50:	9302      	str	r3, [sp, #8]
1a007c52:	ea54 0305 	orrs.w	r3, r4, r5
1a007c56:	f040 82bd 	bne.w	1a0081d4 <_vfprintf_r+0x8ac>
1a007c5a:	f1b9 0f00 	cmp.w	r9, #0
1a007c5e:	f041 810e 	bne.w	1a008e7e <_vfprintf_r+0x1556>
1a007c62:	f04f 0900 	mov.w	r9, #0
1a007c66:	464e      	mov	r6, r9
1a007c68:	af54      	add	r7, sp, #336	; 0x150
1a007c6a:	e2bf      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a007c6c:	9b02      	ldr	r3, [sp, #8]
1a007c6e:	069d      	lsls	r5, r3, #26
1a007c70:	f043 0610 	orr.w	r6, r3, #16
1a007c74:	f100 828f 	bmi.w	1a008196 <_vfprintf_r+0x86e>
1a007c78:	9b08      	ldr	r3, [sp, #32]
1a007c7a:	1d1a      	adds	r2, r3, #4
1a007c7c:	9b08      	ldr	r3, [sp, #32]
1a007c7e:	9208      	str	r2, [sp, #32]
1a007c80:	681c      	ldr	r4, [r3, #0]
1a007c82:	2500      	movs	r5, #0
1a007c84:	2301      	movs	r3, #1
1a007c86:	e17a      	b.n	1a007f7e <_vfprintf_r+0x656>
1a007c88:	9c08      	ldr	r4, [sp, #32]
1a007c8a:	f854 7b04 	ldr.w	r7, [r4], #4
1a007c8e:	2500      	movs	r5, #0
1a007c90:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a007c94:	2f00      	cmp	r7, #0
1a007c96:	f000 8737 	beq.w	1a008b08 <_vfprintf_r+0x11e0>
1a007c9a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007c9e:	f000 87bc 	beq.w	1a008c1a <_vfprintf_r+0x12f2>
1a007ca2:	464a      	mov	r2, r9
1a007ca4:	4629      	mov	r1, r5
1a007ca6:	4638      	mov	r0, r7
1a007ca8:	f002 fe52 	bl	1a00a950 <memchr>
1a007cac:	9009      	str	r0, [sp, #36]	; 0x24
1a007cae:	2800      	cmp	r0, #0
1a007cb0:	f001 824a 	beq.w	1a009148 <_vfprintf_r+0x1820>
1a007cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007cb6:	46a9      	mov	r9, r5
1a007cb8:	1bde      	subs	r6, r3, r7
1a007cba:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a007cbe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a007cc2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007cc6:	9408      	str	r4, [sp, #32]
1a007cc8:	9303      	str	r3, [sp, #12]
1a007cca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007cce:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a007cd2:	2a00      	cmp	r2, #0
1a007cd4:	d06f      	beq.n	1a007db6 <_vfprintf_r+0x48e>
1a007cd6:	9b03      	ldr	r3, [sp, #12]
1a007cd8:	3301      	adds	r3, #1
1a007cda:	9303      	str	r3, [sp, #12]
1a007cdc:	e06b      	b.n	1a007db6 <_vfprintf_r+0x48e>
1a007cde:	9b02      	ldr	r3, [sp, #8]
1a007ce0:	069c      	lsls	r4, r3, #26
1a007ce2:	f043 0610 	orr.w	r6, r3, #16
1a007ce6:	f100 825f 	bmi.w	1a0081a8 <_vfprintf_r+0x880>
1a007cea:	9b08      	ldr	r3, [sp, #32]
1a007cec:	1d1a      	adds	r2, r3, #4
1a007cee:	9b08      	ldr	r3, [sp, #32]
1a007cf0:	9208      	str	r2, [sp, #32]
1a007cf2:	681c      	ldr	r4, [r3, #0]
1a007cf4:	2500      	movs	r5, #0
1a007cf6:	e25e      	b.n	1a0081b6 <_vfprintf_r+0x88e>
1a007cf8:	9b02      	ldr	r3, [sp, #8]
1a007cfa:	f89a 8000 	ldrb.w	r8, [sl]
1a007cfe:	f043 0308 	orr.w	r3, r3, #8
1a007d02:	9302      	str	r3, [sp, #8]
1a007d04:	e694      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007d06:	9b02      	ldr	r3, [sp, #8]
1a007d08:	069c      	lsls	r4, r3, #26
1a007d0a:	f043 0610 	orr.w	r6, r3, #16
1a007d0e:	d48b      	bmi.n	1a007c28 <_vfprintf_r+0x300>
1a007d10:	9b08      	ldr	r3, [sp, #32]
1a007d12:	1d1a      	adds	r2, r3, #4
1a007d14:	9b08      	ldr	r3, [sp, #32]
1a007d16:	9208      	str	r2, [sp, #32]
1a007d18:	681c      	ldr	r4, [r3, #0]
1a007d1a:	17e5      	asrs	r5, r4, #31
1a007d1c:	4622      	mov	r2, r4
1a007d1e:	462b      	mov	r3, r5
1a007d20:	2a00      	cmp	r2, #0
1a007d22:	f173 0300 	sbcs.w	r3, r3, #0
1a007d26:	da8d      	bge.n	1a007c44 <_vfprintf_r+0x31c>
1a007d28:	4264      	negs	r4, r4
1a007d2a:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a007d2e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a007d32:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007d36:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007d3a:	f04f 0301 	mov.w	r3, #1
1a007d3e:	f040 8125 	bne.w	1a007f8c <_vfprintf_r+0x664>
1a007d42:	2b01      	cmp	r3, #1
1a007d44:	f000 8247 	beq.w	1a0081d6 <_vfprintf_r+0x8ae>
1a007d48:	2b02      	cmp	r3, #2
1a007d4a:	f000 8479 	beq.w	1a008640 <_vfprintf_r+0xd18>
1a007d4e:	a954      	add	r1, sp, #336	; 0x150
1a007d50:	e000      	b.n	1a007d54 <_vfprintf_r+0x42c>
1a007d52:	4639      	mov	r1, r7
1a007d54:	08e2      	lsrs	r2, r4, #3
1a007d56:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a007d5a:	08e8      	lsrs	r0, r5, #3
1a007d5c:	f004 0307 	and.w	r3, r4, #7
1a007d60:	4605      	mov	r5, r0
1a007d62:	4614      	mov	r4, r2
1a007d64:	3330      	adds	r3, #48	; 0x30
1a007d66:	ea54 0205 	orrs.w	r2, r4, r5
1a007d6a:	f801 3c01 	strb.w	r3, [r1, #-1]
1a007d6e:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a007d72:	d1ee      	bne.n	1a007d52 <_vfprintf_r+0x42a>
1a007d74:	07f2      	lsls	r2, r6, #31
1a007d76:	f140 8288 	bpl.w	1a00828a <_vfprintf_r+0x962>
1a007d7a:	2b30      	cmp	r3, #48	; 0x30
1a007d7c:	f000 8285 	beq.w	1a00828a <_vfprintf_r+0x962>
1a007d80:	2330      	movs	r3, #48	; 0x30
1a007d82:	3902      	subs	r1, #2
1a007d84:	f807 3c01 	strb.w	r3, [r7, #-1]
1a007d88:	ab54      	add	r3, sp, #336	; 0x150
1a007d8a:	9602      	str	r6, [sp, #8]
1a007d8c:	460f      	mov	r7, r1
1a007d8e:	1a5e      	subs	r6, r3, r1
1a007d90:	e22c      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a007d92:	9c08      	ldr	r4, [sp, #32]
1a007d94:	2300      	movs	r3, #0
1a007d96:	f854 2b04 	ldr.w	r2, [r4], #4
1a007d9a:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a007d9e:	2601      	movs	r6, #1
1a007da0:	461a      	mov	r2, r3
1a007da2:	9603      	str	r6, [sp, #12]
1a007da4:	9408      	str	r4, [sp, #32]
1a007da6:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a007daa:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007dae:	9209      	str	r2, [sp, #36]	; 0x24
1a007db0:	4691      	mov	r9, r2
1a007db2:	920c      	str	r2, [sp, #48]	; 0x30
1a007db4:	af3b      	add	r7, sp, #236	; 0xec
1a007db6:	9b02      	ldr	r3, [sp, #8]
1a007db8:	f013 0302 	ands.w	r3, r3, #2
1a007dbc:	930a      	str	r3, [sp, #40]	; 0x28
1a007dbe:	d002      	beq.n	1a007dc6 <_vfprintf_r+0x49e>
1a007dc0:	9b03      	ldr	r3, [sp, #12]
1a007dc2:	3302      	adds	r3, #2
1a007dc4:	9303      	str	r3, [sp, #12]
1a007dc6:	9b02      	ldr	r3, [sp, #8]
1a007dc8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007dca:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a007dce:	930b      	str	r3, [sp, #44]	; 0x2c
1a007dd0:	d104      	bne.n	1a007ddc <_vfprintf_r+0x4b4>
1a007dd2:	9b06      	ldr	r3, [sp, #24]
1a007dd4:	9903      	ldr	r1, [sp, #12]
1a007dd6:	1a5d      	subs	r5, r3, r1
1a007dd8:	2d00      	cmp	r5, #0
1a007dda:	dc66      	bgt.n	1a007eaa <_vfprintf_r+0x582>
1a007ddc:	b172      	cbz	r2, 1a007dfc <_vfprintf_r+0x4d4>
1a007dde:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007de0:	3201      	adds	r2, #1
1a007de2:	3401      	adds	r4, #1
1a007de4:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a007de8:	2101      	movs	r1, #1
1a007dea:	2a07      	cmp	r2, #7
1a007dec:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007df0:	e9cb 0100 	strd	r0, r1, [fp]
1a007df4:	f300 83b1 	bgt.w	1a00855a <_vfprintf_r+0xc32>
1a007df8:	f10b 0b08 	add.w	fp, fp, #8
1a007dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007dfe:	b16b      	cbz	r3, 1a007e1c <_vfprintf_r+0x4f4>
1a007e00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007e02:	3301      	adds	r3, #1
1a007e04:	3402      	adds	r4, #2
1a007e06:	a921      	add	r1, sp, #132	; 0x84
1a007e08:	2202      	movs	r2, #2
1a007e0a:	2b07      	cmp	r3, #7
1a007e0c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007e10:	e9cb 1200 	strd	r1, r2, [fp]
1a007e14:	f300 83ad 	bgt.w	1a008572 <_vfprintf_r+0xc4a>
1a007e18:	f10b 0b08 	add.w	fp, fp, #8
1a007e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007e1e:	2b80      	cmp	r3, #128	; 0x80
1a007e20:	f000 8295 	beq.w	1a00834e <_vfprintf_r+0xa26>
1a007e24:	eba9 0506 	sub.w	r5, r9, r6
1a007e28:	2d00      	cmp	r5, #0
1a007e2a:	f300 82d3 	bgt.w	1a0083d4 <_vfprintf_r+0xaac>
1a007e2e:	9b02      	ldr	r3, [sp, #8]
1a007e30:	05db      	lsls	r3, r3, #23
1a007e32:	f100 822e 	bmi.w	1a008292 <_vfprintf_r+0x96a>
1a007e36:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007e38:	f8cb 7000 	str.w	r7, [fp]
1a007e3c:	3301      	adds	r3, #1
1a007e3e:	4434      	add	r4, r6
1a007e40:	2b07      	cmp	r3, #7
1a007e42:	942a      	str	r4, [sp, #168]	; 0xa8
1a007e44:	f8cb 6004 	str.w	r6, [fp, #4]
1a007e48:	9329      	str	r3, [sp, #164]	; 0xa4
1a007e4a:	f300 8325 	bgt.w	1a008498 <_vfprintf_r+0xb70>
1a007e4e:	f10b 0b08 	add.w	fp, fp, #8
1a007e52:	9b02      	ldr	r3, [sp, #8]
1a007e54:	075d      	lsls	r5, r3, #29
1a007e56:	d505      	bpl.n	1a007e64 <_vfprintf_r+0x53c>
1a007e58:	9b06      	ldr	r3, [sp, #24]
1a007e5a:	9a03      	ldr	r2, [sp, #12]
1a007e5c:	1a9d      	subs	r5, r3, r2
1a007e5e:	2d00      	cmp	r5, #0
1a007e60:	f300 83ae 	bgt.w	1a0085c0 <_vfprintf_r+0xc98>
1a007e64:	9b04      	ldr	r3, [sp, #16]
1a007e66:	9a06      	ldr	r2, [sp, #24]
1a007e68:	9903      	ldr	r1, [sp, #12]
1a007e6a:	428a      	cmp	r2, r1
1a007e6c:	bfac      	ite	ge
1a007e6e:	189b      	addge	r3, r3, r2
1a007e70:	185b      	addlt	r3, r3, r1
1a007e72:	9304      	str	r3, [sp, #16]
1a007e74:	2c00      	cmp	r4, #0
1a007e76:	f040 82e7 	bne.w	1a008448 <_vfprintf_r+0xb20>
1a007e7a:	2300      	movs	r3, #0
1a007e7c:	9329      	str	r3, [sp, #164]	; 0xa4
1a007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007e80:	b11b      	cbz	r3, 1a007e8a <_vfprintf_r+0x562>
1a007e82:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007e84:	9805      	ldr	r0, [sp, #20]
1a007e86:	f7fe fc55 	bl	1a006734 <_free_r>
1a007e8a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007e8e:	4657      	mov	r7, sl
1a007e90:	783b      	ldrb	r3, [r7, #0]
1a007e92:	2b00      	cmp	r3, #0
1a007e94:	f47f ad99 	bne.w	1a0079ca <_vfprintf_r+0xa2>
1a007e98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a007e9a:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007e9e:	2b00      	cmp	r3, #0
1a007ea0:	f040 86f5 	bne.w	1a008c8e <_vfprintf_r+0x1366>
1a007ea4:	2300      	movs	r3, #0
1a007ea6:	9329      	str	r3, [sp, #164]	; 0xa4
1a007ea8:	e375      	b.n	1a008596 <_vfprintf_r+0xc6e>
1a007eaa:	2d10      	cmp	r5, #16
1a007eac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007eae:	dd29      	ble.n	1a007f04 <_vfprintf_r+0x5dc>
1a007eb0:	4659      	mov	r1, fp
1a007eb2:	4620      	mov	r0, r4
1a007eb4:	961e      	str	r6, [sp, #120]	; 0x78
1a007eb6:	2310      	movs	r3, #16
1a007eb8:	9c05      	ldr	r4, [sp, #20]
1a007eba:	9e07      	ldr	r6, [sp, #28]
1a007ebc:	46bb      	mov	fp, r7
1a007ebe:	e004      	b.n	1a007eca <_vfprintf_r+0x5a2>
1a007ec0:	3d10      	subs	r5, #16
1a007ec2:	2d10      	cmp	r5, #16
1a007ec4:	f101 0108 	add.w	r1, r1, #8
1a007ec8:	dd18      	ble.n	1a007efc <_vfprintf_r+0x5d4>
1a007eca:	3201      	adds	r2, #1
1a007ecc:	4fbc      	ldr	r7, [pc, #752]	; (1a0081c0 <_vfprintf_r+0x898>)
1a007ece:	3010      	adds	r0, #16
1a007ed0:	2a07      	cmp	r2, #7
1a007ed2:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a007ed6:	e9c1 7300 	strd	r7, r3, [r1]
1a007eda:	ddf1      	ble.n	1a007ec0 <_vfprintf_r+0x598>
1a007edc:	aa28      	add	r2, sp, #160	; 0xa0
1a007ede:	4631      	mov	r1, r6
1a007ee0:	4620      	mov	r0, r4
1a007ee2:	f003 fb59 	bl	1a00b598 <__sprint_r>
1a007ee6:	2800      	cmp	r0, #0
1a007ee8:	f040 834f 	bne.w	1a00858a <_vfprintf_r+0xc62>
1a007eec:	3d10      	subs	r5, #16
1a007eee:	2d10      	cmp	r5, #16
1a007ef0:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a007ef4:	a92b      	add	r1, sp, #172	; 0xac
1a007ef6:	f04f 0310 	mov.w	r3, #16
1a007efa:	dce6      	bgt.n	1a007eca <_vfprintf_r+0x5a2>
1a007efc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a007efe:	465f      	mov	r7, fp
1a007f00:	4604      	mov	r4, r0
1a007f02:	468b      	mov	fp, r1
1a007f04:	3201      	adds	r2, #1
1a007f06:	4bae      	ldr	r3, [pc, #696]	; (1a0081c0 <_vfprintf_r+0x898>)
1a007f08:	442c      	add	r4, r5
1a007f0a:	2a07      	cmp	r2, #7
1a007f0c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007f10:	e9cb 3500 	strd	r3, r5, [fp]
1a007f14:	f300 862a 	bgt.w	1a008b6c <_vfprintf_r+0x1244>
1a007f18:	f10b 0b08 	add.w	fp, fp, #8
1a007f1c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007f20:	e75c      	b.n	1a007ddc <_vfprintf_r+0x4b4>
1a007f22:	f89a 8000 	ldrb.w	r8, [sl]
1a007f26:	9b02      	ldr	r3, [sp, #8]
1a007f28:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a007f2c:	f000 85e3 	beq.w	1a008af6 <_vfprintf_r+0x11ce>
1a007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007f34:	9302      	str	r3, [sp, #8]
1a007f36:	e57b      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007f38:	9b02      	ldr	r3, [sp, #8]
1a007f3a:	f89a 8000 	ldrb.w	r8, [sl]
1a007f3e:	f043 0301 	orr.w	r3, r3, #1
1a007f42:	9302      	str	r3, [sp, #8]
1a007f44:	e574      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007f46:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a007f4a:	f89a 8000 	ldrb.w	r8, [sl]
1a007f4e:	2b00      	cmp	r3, #0
1a007f50:	f47f ad6e 	bne.w	1a007a30 <_vfprintf_r+0x108>
1a007f54:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a007f58:	e56a      	b.n	1a007a30 <_vfprintf_r+0x108>
1a007f5a:	9c08      	ldr	r4, [sp, #32]
1a007f5c:	f647 0230 	movw	r2, #30768	; 0x7830
1a007f60:	f854 3b04 	ldr.w	r3, [r4], #4
1a007f64:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a007f68:	9a02      	ldr	r2, [sp, #8]
1a007f6a:	9408      	str	r4, [sp, #32]
1a007f6c:	461c      	mov	r4, r3
1a007f6e:	4b95      	ldr	r3, [pc, #596]	; (1a0081c4 <_vfprintf_r+0x89c>)
1a007f70:	9314      	str	r3, [sp, #80]	; 0x50
1a007f72:	f042 0602 	orr.w	r6, r2, #2
1a007f76:	2500      	movs	r5, #0
1a007f78:	2302      	movs	r3, #2
1a007f7a:	f04f 0878 	mov.w	r8, #120	; 0x78
1a007f7e:	2200      	movs	r2, #0
1a007f80:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007f84:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a007f88:	f43f aedb 	beq.w	1a007d42 <_vfprintf_r+0x41a>
1a007f8c:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a007f90:	9202      	str	r2, [sp, #8]
1a007f92:	ea54 0205 	orrs.w	r2, r4, r5
1a007f96:	f040 82dd 	bne.w	1a008554 <_vfprintf_r+0xc2c>
1a007f9a:	f1b9 0f00 	cmp.w	r9, #0
1a007f9e:	f040 8348 	bne.w	1a008632 <_vfprintf_r+0xd0a>
1a007fa2:	2b00      	cmp	r3, #0
1a007fa4:	f47f ae5d 	bne.w	1a007c62 <_vfprintf_r+0x33a>
1a007fa8:	f016 0601 	ands.w	r6, r6, #1
1a007fac:	f000 846a 	beq.w	1a008884 <_vfprintf_r+0xf5c>
1a007fb0:	2330      	movs	r3, #48	; 0x30
1a007fb2:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a007fb6:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a007fba:	e117      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a007fbc:	9e02      	ldr	r6, [sp, #8]
1a007fbe:	06b0      	lsls	r0, r6, #26
1a007fc0:	f100 80f2 	bmi.w	1a0081a8 <_vfprintf_r+0x880>
1a007fc4:	9b02      	ldr	r3, [sp, #8]
1a007fc6:	9a08      	ldr	r2, [sp, #32]
1a007fc8:	06d9      	lsls	r1, r3, #27
1a007fca:	f852 4b04 	ldr.w	r4, [r2], #4
1a007fce:	f101 8243 	bmi.w	1a009458 <_vfprintf_r+0x1b30>
1a007fd2:	9e02      	ldr	r6, [sp, #8]
1a007fd4:	4633      	mov	r3, r6
1a007fd6:	065b      	lsls	r3, r3, #25
1a007fd8:	f140 8635 	bpl.w	1a008c46 <_vfprintf_r+0x131e>
1a007fdc:	9208      	str	r2, [sp, #32]
1a007fde:	b2a4      	uxth	r4, r4
1a007fe0:	2500      	movs	r5, #0
1a007fe2:	e0e8      	b.n	1a0081b6 <_vfprintf_r+0x88e>
1a007fe4:	9902      	ldr	r1, [sp, #8]
1a007fe6:	9a08      	ldr	r2, [sp, #32]
1a007fe8:	0689      	lsls	r1, r1, #26
1a007fea:	f102 0304 	add.w	r3, r2, #4
1a007fee:	f100 8452 	bmi.w	1a008896 <_vfprintf_r+0xf6e>
1a007ff2:	9a02      	ldr	r2, [sp, #8]
1a007ff4:	06d7      	lsls	r7, r2, #27
1a007ff6:	f100 85e1 	bmi.w	1a008bbc <_vfprintf_r+0x1294>
1a007ffa:	9a02      	ldr	r2, [sp, #8]
1a007ffc:	0656      	lsls	r6, r2, #25
1a007ffe:	f100 8664 	bmi.w	1a008cca <_vfprintf_r+0x13a2>
1a008002:	9a02      	ldr	r2, [sp, #8]
1a008004:	0595      	lsls	r5, r2, #22
1a008006:	f140 85d9 	bpl.w	1a008bbc <_vfprintf_r+0x1294>
1a00800a:	9a08      	ldr	r2, [sp, #32]
1a00800c:	9308      	str	r3, [sp, #32]
1a00800e:	6812      	ldr	r2, [r2, #0]
1a008010:	9b04      	ldr	r3, [sp, #16]
1a008012:	7013      	strb	r3, [r2, #0]
1a008014:	4657      	mov	r7, sl
1a008016:	e73b      	b.n	1a007e90 <_vfprintf_r+0x568>
1a008018:	f89a 8000 	ldrb.w	r8, [sl]
1a00801c:	9b02      	ldr	r3, [sp, #8]
1a00801e:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a008022:	f000 855f 	beq.w	1a008ae4 <_vfprintf_r+0x11bc>
1a008026:	f043 0310 	orr.w	r3, r3, #16
1a00802a:	9302      	str	r3, [sp, #8]
1a00802c:	e500      	b.n	1a007a30 <_vfprintf_r+0x108>
1a00802e:	9b08      	ldr	r3, [sp, #32]
1a008030:	f89a 8000 	ldrb.w	r8, [sl]
1a008034:	f853 2b04 	ldr.w	r2, [r3], #4
1a008038:	9206      	str	r2, [sp, #24]
1a00803a:	2a00      	cmp	r2, #0
1a00803c:	f2c0 8513 	blt.w	1a008a66 <_vfprintf_r+0x113e>
1a008040:	9308      	str	r3, [sp, #32]
1a008042:	e4f5      	b.n	1a007a30 <_vfprintf_r+0x108>
1a008044:	9d05      	ldr	r5, [sp, #20]
1a008046:	4628      	mov	r0, r5
1a008048:	f002 fc04 	bl	1a00a854 <_localeconv_r>
1a00804c:	6843      	ldr	r3, [r0, #4]
1a00804e:	9317      	str	r3, [sp, #92]	; 0x5c
1a008050:	4618      	mov	r0, r3
1a008052:	f7ff fb15 	bl	1a007680 <strlen>
1a008056:	9019      	str	r0, [sp, #100]	; 0x64
1a008058:	4604      	mov	r4, r0
1a00805a:	4628      	mov	r0, r5
1a00805c:	f002 fbfa 	bl	1a00a854 <_localeconv_r>
1a008060:	6883      	ldr	r3, [r0, #8]
1a008062:	9318      	str	r3, [sp, #96]	; 0x60
1a008064:	2120      	movs	r1, #32
1a008066:	2c00      	cmp	r4, #0
1a008068:	f43f ad4a 	beq.w	1a007b00 <_vfprintf_r+0x1d8>
1a00806c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a00806e:	f89a 8000 	ldrb.w	r8, [sl]
1a008072:	2b00      	cmp	r3, #0
1a008074:	f43f acdc 	beq.w	1a007a30 <_vfprintf_r+0x108>
1a008078:	781b      	ldrb	r3, [r3, #0]
1a00807a:	2b00      	cmp	r3, #0
1a00807c:	f43f acd8 	beq.w	1a007a30 <_vfprintf_r+0x108>
1a008080:	9b02      	ldr	r3, [sp, #8]
1a008082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a008086:	9302      	str	r3, [sp, #8]
1a008088:	e4d2      	b.n	1a007a30 <_vfprintf_r+0x108>
1a00808a:	9b02      	ldr	r3, [sp, #8]
1a00808c:	f89a 8000 	ldrb.w	r8, [sl]
1a008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a008094:	9302      	str	r3, [sp, #8]
1a008096:	e4cb      	b.n	1a007a30 <_vfprintf_r+0x108>
1a008098:	4652      	mov	r2, sl
1a00809a:	f812 8b01 	ldrb.w	r8, [r2], #1
1a00809e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0080a2:	f001 81be 	beq.w	1a009422 <_vfprintf_r+0x1afa>
1a0080a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0080aa:	2b09      	cmp	r3, #9
1a0080ac:	4692      	mov	sl, r2
1a0080ae:	f04f 0900 	mov.w	r9, #0
1a0080b2:	f63f acbf 	bhi.w	1a007a34 <_vfprintf_r+0x10c>
1a0080b6:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0080ba:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0080be:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0080c2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0080c6:	2b09      	cmp	r3, #9
1a0080c8:	d9f5      	bls.n	1a0080b6 <_vfprintf_r+0x78e>
1a0080ca:	e4b3      	b.n	1a007a34 <_vfprintf_r+0x10c>
1a0080cc:	9c08      	ldr	r4, [sp, #32]
1a0080ce:	3407      	adds	r4, #7
1a0080d0:	f024 0307 	bic.w	r3, r4, #7
1a0080d4:	ecb3 7b02 	vldmia	r3!, {d7}
1a0080d8:	ec55 4b17 	vmov	r4, r5, d7
1a0080dc:	9308      	str	r3, [sp, #32]
1a0080de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a0080e2:	931b      	str	r3, [sp, #108]	; 0x6c
1a0080e4:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a0080e8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a0080ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0080f0:	4b35      	ldr	r3, [pc, #212]	; (1a0081c8 <_vfprintf_r+0x8a0>)
1a0080f2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0080f6:	f003 fba7 	bl	1a00b848 <__aeabi_dcmpun>
1a0080fa:	2800      	cmp	r0, #0
1a0080fc:	f040 83dc 	bne.w	1a0088b8 <_vfprintf_r+0xf90>
1a008100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a008104:	4b30      	ldr	r3, [pc, #192]	; (1a0081c8 <_vfprintf_r+0x8a0>)
1a008106:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a00810a:	f7fd ff2f 	bl	1a005f6c <__aeabi_dcmple>
1a00810e:	2800      	cmp	r0, #0
1a008110:	f040 83d2 	bne.w	1a0088b8 <_vfprintf_r+0xf90>
1a008114:	2200      	movs	r2, #0
1a008116:	2300      	movs	r3, #0
1a008118:	4620      	mov	r0, r4
1a00811a:	4629      	mov	r1, r5
1a00811c:	f7fd ff1c 	bl	1a005f58 <__aeabi_dcmplt>
1a008120:	2800      	cmp	r0, #0
1a008122:	f040 8780 	bne.w	1a009026 <_vfprintf_r+0x16fe>
1a008126:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00812a:	4f28      	ldr	r7, [pc, #160]	; (1a0081cc <_vfprintf_r+0x8a4>)
1a00812c:	4b28      	ldr	r3, [pc, #160]	; (1a0081d0 <_vfprintf_r+0x8a8>)
1a00812e:	9802      	ldr	r0, [sp, #8]
1a008130:	2100      	movs	r1, #0
1a008132:	2603      	movs	r6, #3
1a008134:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a008138:	9603      	str	r6, [sp, #12]
1a00813a:	9109      	str	r1, [sp, #36]	; 0x24
1a00813c:	9002      	str	r0, [sp, #8]
1a00813e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a008142:	bfc8      	it	gt
1a008144:	461f      	movgt	r7, r3
1a008146:	4689      	mov	r9, r1
1a008148:	910c      	str	r1, [sp, #48]	; 0x30
1a00814a:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a00814e:	e5c0      	b.n	1a007cd2 <_vfprintf_r+0x3aa>
1a008150:	9e02      	ldr	r6, [sp, #8]
1a008152:	06b4      	lsls	r4, r6, #26
1a008154:	d41f      	bmi.n	1a008196 <_vfprintf_r+0x86e>
1a008156:	9b02      	ldr	r3, [sp, #8]
1a008158:	9a08      	ldr	r2, [sp, #32]
1a00815a:	06d8      	lsls	r0, r3, #27
1a00815c:	f852 4b04 	ldr.w	r4, [r2], #4
1a008160:	f101 8174 	bmi.w	1a00944c <_vfprintf_r+0x1b24>
1a008164:	9e02      	ldr	r6, [sp, #8]
1a008166:	0671      	lsls	r1, r6, #25
1a008168:	f140 8577 	bpl.w	1a008c5a <_vfprintf_r+0x1332>
1a00816c:	9208      	str	r2, [sp, #32]
1a00816e:	b2a4      	uxth	r4, r4
1a008170:	2500      	movs	r5, #0
1a008172:	2301      	movs	r3, #1
1a008174:	e703      	b.n	1a007f7e <_vfprintf_r+0x656>
1a008176:	9805      	ldr	r0, [sp, #20]
1a008178:	f7fe fa56 	bl	1a006628 <__sinit>
1a00817c:	f7ff bbea 	b.w	1a007954 <_vfprintf_r+0x2c>
1a008180:	f1b8 0f00 	cmp.w	r8, #0
1a008184:	f43f ae88 	beq.w	1a007e98 <_vfprintf_r+0x570>
1a008188:	2300      	movs	r3, #0
1a00818a:	2601      	movs	r6, #1
1a00818c:	461a      	mov	r2, r3
1a00818e:	9603      	str	r6, [sp, #12]
1a008190:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a008194:	e607      	b.n	1a007da6 <_vfprintf_r+0x47e>
1a008196:	9c08      	ldr	r4, [sp, #32]
1a008198:	3407      	adds	r4, #7
1a00819a:	f024 0307 	bic.w	r3, r4, #7
1a00819e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0081a2:	9308      	str	r3, [sp, #32]
1a0081a4:	2301      	movs	r3, #1
1a0081a6:	e6ea      	b.n	1a007f7e <_vfprintf_r+0x656>
1a0081a8:	9c08      	ldr	r4, [sp, #32]
1a0081aa:	3407      	adds	r4, #7
1a0081ac:	f024 0307 	bic.w	r3, r4, #7
1a0081b0:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0081b4:	9308      	str	r3, [sp, #32]
1a0081b6:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a0081ba:	2300      	movs	r3, #0
1a0081bc:	e6df      	b.n	1a007f7e <_vfprintf_r+0x656>
1a0081be:	bf00      	nop
1a0081c0:	1a00c154 	.word	0x1a00c154
1a0081c4:	1a00c134 	.word	0x1a00c134
1a0081c8:	7fefffff 	.word	0x7fefffff
1a0081cc:	1a00c110 	.word	0x1a00c110
1a0081d0:	1a00c114 	.word	0x1a00c114
1a0081d4:	9e02      	ldr	r6, [sp, #8]
1a0081d6:	2d00      	cmp	r5, #0
1a0081d8:	bf08      	it	eq
1a0081da:	2c0a      	cmpeq	r4, #10
1a0081dc:	d213      	bcs.n	1a008206 <_vfprintf_r+0x8de>
1a0081de:	3430      	adds	r4, #48	; 0x30
1a0081e0:	9602      	str	r6, [sp, #8]
1a0081e2:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a0081e6:	2601      	movs	r6, #1
1a0081e8:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0081ec:	2300      	movs	r3, #0
1a0081ee:	454e      	cmp	r6, r9
1a0081f0:	9309      	str	r3, [sp, #36]	; 0x24
1a0081f2:	930c      	str	r3, [sp, #48]	; 0x30
1a0081f4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a0081f8:	4633      	mov	r3, r6
1a0081fa:	bfb8      	it	lt
1a0081fc:	464b      	movlt	r3, r9
1a0081fe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008202:	9303      	str	r3, [sp, #12]
1a008204:	e565      	b.n	1a007cd2 <_vfprintf_r+0x3aa>
1a008206:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a00820a:	2200      	movs	r2, #0
1a00820c:	e9cd a802 	strd	sl, r8, [sp, #8]
1a008210:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a008214:	af54      	add	r7, sp, #336	; 0x150
1a008216:	46cb      	mov	fp, r9
1a008218:	4692      	mov	sl, r2
1a00821a:	46b1      	mov	r9, r6
1a00821c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a008220:	461e      	mov	r6, r3
1a008222:	e007      	b.n	1a008234 <_vfprintf_r+0x90c>
1a008224:	f7fd ff10 	bl	1a006048 <__aeabi_uldivmod>
1a008228:	2d00      	cmp	r5, #0
1a00822a:	bf08      	it	eq
1a00822c:	2c0a      	cmpeq	r4, #10
1a00822e:	d320      	bcc.n	1a008272 <_vfprintf_r+0x94a>
1a008230:	4604      	mov	r4, r0
1a008232:	460d      	mov	r5, r1
1a008234:	220a      	movs	r2, #10
1a008236:	2300      	movs	r3, #0
1a008238:	4620      	mov	r0, r4
1a00823a:	4629      	mov	r1, r5
1a00823c:	f7fd ff04 	bl	1a006048 <__aeabi_uldivmod>
1a008240:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a008244:	f807 cc01 	strb.w	ip, [r7, #-1]
1a008248:	4620      	mov	r0, r4
1a00824a:	4629      	mov	r1, r5
1a00824c:	220a      	movs	r2, #10
1a00824e:	2300      	movs	r3, #0
1a008250:	f10a 0a01 	add.w	sl, sl, #1
1a008254:	3f01      	subs	r7, #1
1a008256:	2e00      	cmp	r6, #0
1a008258:	d0e4      	beq.n	1a008224 <_vfprintf_r+0x8fc>
1a00825a:	f898 c000 	ldrb.w	ip, [r8]
1a00825e:	45e2      	cmp	sl, ip
1a008260:	d1e0      	bne.n	1a008224 <_vfprintf_r+0x8fc>
1a008262:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a008266:	d0dd      	beq.n	1a008224 <_vfprintf_r+0x8fc>
1a008268:	429d      	cmp	r5, r3
1a00826a:	bf08      	it	eq
1a00826c:	4294      	cmpeq	r4, r2
1a00826e:	f080 871e 	bcs.w	1a0090ae <_vfprintf_r+0x1786>
1a008272:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a008276:	464e      	mov	r6, r9
1a008278:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a00827c:	46d9      	mov	r9, fp
1a00827e:	f8dd a008 	ldr.w	sl, [sp, #8]
1a008282:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a008286:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a00828a:	9602      	str	r6, [sp, #8]
1a00828c:	ab54      	add	r3, sp, #336	; 0x150
1a00828e:	1bde      	subs	r6, r3, r7
1a008290:	e7ac      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a008292:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a008296:	f340 810a 	ble.w	1a0084ae <_vfprintf_r+0xb86>
1a00829a:	2200      	movs	r2, #0
1a00829c:	2300      	movs	r3, #0
1a00829e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0082a2:	f7fd fe4f 	bl	1a005f44 <__aeabi_dcmpeq>
1a0082a6:	2800      	cmp	r0, #0
1a0082a8:	f000 81de 	beq.w	1a008668 <_vfprintf_r+0xd40>
1a0082ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0082ae:	4ac2      	ldr	r2, [pc, #776]	; (1a0085b8 <_vfprintf_r+0xc90>)
1a0082b0:	f8cb 2000 	str.w	r2, [fp]
1a0082b4:	3301      	adds	r3, #1
1a0082b6:	3401      	adds	r4, #1
1a0082b8:	2201      	movs	r2, #1
1a0082ba:	2b07      	cmp	r3, #7
1a0082bc:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0082c0:	f8cb 2004 	str.w	r2, [fp, #4]
1a0082c4:	f300 8463 	bgt.w	1a008b8e <_vfprintf_r+0x1266>
1a0082c8:	f10b 0b08 	add.w	fp, fp, #8
1a0082cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0082ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0082d0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0082d2:	4293      	cmp	r3, r2
1a0082d4:	f280 82a5 	bge.w	1a008822 <_vfprintf_r+0xefa>
1a0082d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0082da:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0082dc:	f8cb 2000 	str.w	r2, [fp]
1a0082e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0082e2:	f8cb 2004 	str.w	r2, [fp, #4]
1a0082e6:	3301      	adds	r3, #1
1a0082e8:	4414      	add	r4, r2
1a0082ea:	2b07      	cmp	r3, #7
1a0082ec:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0082f0:	f300 83ec 	bgt.w	1a008acc <_vfprintf_r+0x11a4>
1a0082f4:	f10b 0b08 	add.w	fp, fp, #8
1a0082f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0082fa:	1e5d      	subs	r5, r3, #1
1a0082fc:	2d00      	cmp	r5, #0
1a0082fe:	f77f ada8 	ble.w	1a007e52 <_vfprintf_r+0x52a>
1a008302:	2d10      	cmp	r5, #16
1a008304:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008306:	4bad      	ldr	r3, [pc, #692]	; (1a0085bc <_vfprintf_r+0xc94>)
1a008308:	f340 844e 	ble.w	1a008ba8 <_vfprintf_r+0x1280>
1a00830c:	2610      	movs	r6, #16
1a00830e:	9f05      	ldr	r7, [sp, #20]
1a008310:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a008314:	4699      	mov	r9, r3
1a008316:	e005      	b.n	1a008324 <_vfprintf_r+0x9fc>
1a008318:	f10b 0b08 	add.w	fp, fp, #8
1a00831c:	3d10      	subs	r5, #16
1a00831e:	2d10      	cmp	r5, #16
1a008320:	f340 8441 	ble.w	1a008ba6 <_vfprintf_r+0x127e>
1a008324:	3201      	adds	r2, #1
1a008326:	3410      	adds	r4, #16
1a008328:	2a07      	cmp	r2, #7
1a00832a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00832e:	e9cb 9600 	strd	r9, r6, [fp]
1a008332:	ddf1      	ble.n	1a008318 <_vfprintf_r+0x9f0>
1a008334:	aa28      	add	r2, sp, #160	; 0xa0
1a008336:	4641      	mov	r1, r8
1a008338:	4638      	mov	r0, r7
1a00833a:	f003 f92d 	bl	1a00b598 <__sprint_r>
1a00833e:	2800      	cmp	r0, #0
1a008340:	f040 8423 	bne.w	1a008b8a <_vfprintf_r+0x1262>
1a008344:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a008348:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00834c:	e7e6      	b.n	1a00831c <_vfprintf_r+0x9f4>
1a00834e:	9b06      	ldr	r3, [sp, #24]
1a008350:	9a03      	ldr	r2, [sp, #12]
1a008352:	1a9d      	subs	r5, r3, r2
1a008354:	2d00      	cmp	r5, #0
1a008356:	f77f ad65 	ble.w	1a007e24 <_vfprintf_r+0x4fc>
1a00835a:	2d10      	cmp	r5, #16
1a00835c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00835e:	4b97      	ldr	r3, [pc, #604]	; (1a0085bc <_vfprintf_r+0xc94>)
1a008360:	dd28      	ble.n	1a0083b4 <_vfprintf_r+0xa8c>
1a008362:	960a      	str	r6, [sp, #40]	; 0x28
1a008364:	4659      	mov	r1, fp
1a008366:	4620      	mov	r0, r4
1a008368:	46bb      	mov	fp, r7
1a00836a:	9c05      	ldr	r4, [sp, #20]
1a00836c:	9e07      	ldr	r6, [sp, #28]
1a00836e:	461f      	mov	r7, r3
1a008370:	e004      	b.n	1a00837c <_vfprintf_r+0xa54>
1a008372:	3d10      	subs	r5, #16
1a008374:	2d10      	cmp	r5, #16
1a008376:	f101 0108 	add.w	r1, r1, #8
1a00837a:	dd16      	ble.n	1a0083aa <_vfprintf_r+0xa82>
1a00837c:	3201      	adds	r2, #1
1a00837e:	3010      	adds	r0, #16
1a008380:	2310      	movs	r3, #16
1a008382:	2a07      	cmp	r2, #7
1a008384:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a008388:	600f      	str	r7, [r1, #0]
1a00838a:	604b      	str	r3, [r1, #4]
1a00838c:	ddf1      	ble.n	1a008372 <_vfprintf_r+0xa4a>
1a00838e:	aa28      	add	r2, sp, #160	; 0xa0
1a008390:	4631      	mov	r1, r6
1a008392:	4620      	mov	r0, r4
1a008394:	f003 f900 	bl	1a00b598 <__sprint_r>
1a008398:	2800      	cmp	r0, #0
1a00839a:	f040 80f6 	bne.w	1a00858a <_vfprintf_r+0xc62>
1a00839e:	3d10      	subs	r5, #16
1a0083a0:	2d10      	cmp	r5, #16
1a0083a2:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0083a6:	a92b      	add	r1, sp, #172	; 0xac
1a0083a8:	dce8      	bgt.n	1a00837c <_vfprintf_r+0xa54>
1a0083aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0083ac:	463b      	mov	r3, r7
1a0083ae:	4604      	mov	r4, r0
1a0083b0:	465f      	mov	r7, fp
1a0083b2:	468b      	mov	fp, r1
1a0083b4:	3201      	adds	r2, #1
1a0083b6:	442c      	add	r4, r5
1a0083b8:	2a07      	cmp	r2, #7
1a0083ba:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0083be:	e9cb 3500 	strd	r3, r5, [fp]
1a0083c2:	f300 8355 	bgt.w	1a008a70 <_vfprintf_r+0x1148>
1a0083c6:	eba9 0506 	sub.w	r5, r9, r6
1a0083ca:	2d00      	cmp	r5, #0
1a0083cc:	f10b 0b08 	add.w	fp, fp, #8
1a0083d0:	f77f ad2d 	ble.w	1a007e2e <_vfprintf_r+0x506>
1a0083d4:	2d10      	cmp	r5, #16
1a0083d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0083d8:	4b78      	ldr	r3, [pc, #480]	; (1a0085bc <_vfprintf_r+0xc94>)
1a0083da:	dd29      	ble.n	1a008430 <_vfprintf_r+0xb08>
1a0083dc:	960a      	str	r6, [sp, #40]	; 0x28
1a0083de:	4659      	mov	r1, fp
1a0083e0:	4620      	mov	r0, r4
1a0083e2:	46bb      	mov	fp, r7
1a0083e4:	f04f 0910 	mov.w	r9, #16
1a0083e8:	9c05      	ldr	r4, [sp, #20]
1a0083ea:	9e07      	ldr	r6, [sp, #28]
1a0083ec:	461f      	mov	r7, r3
1a0083ee:	e004      	b.n	1a0083fa <_vfprintf_r+0xad2>
1a0083f0:	3d10      	subs	r5, #16
1a0083f2:	2d10      	cmp	r5, #16
1a0083f4:	f101 0108 	add.w	r1, r1, #8
1a0083f8:	dd15      	ble.n	1a008426 <_vfprintf_r+0xafe>
1a0083fa:	3201      	adds	r2, #1
1a0083fc:	3010      	adds	r0, #16
1a0083fe:	2a07      	cmp	r2, #7
1a008400:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a008404:	e9c1 7900 	strd	r7, r9, [r1]
1a008408:	ddf2      	ble.n	1a0083f0 <_vfprintf_r+0xac8>
1a00840a:	aa28      	add	r2, sp, #160	; 0xa0
1a00840c:	4631      	mov	r1, r6
1a00840e:	4620      	mov	r0, r4
1a008410:	f003 f8c2 	bl	1a00b598 <__sprint_r>
1a008414:	2800      	cmp	r0, #0
1a008416:	f040 80b8 	bne.w	1a00858a <_vfprintf_r+0xc62>
1a00841a:	3d10      	subs	r5, #16
1a00841c:	2d10      	cmp	r5, #16
1a00841e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a008422:	a92b      	add	r1, sp, #172	; 0xac
1a008424:	dce9      	bgt.n	1a0083fa <_vfprintf_r+0xad2>
1a008426:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a008428:	463b      	mov	r3, r7
1a00842a:	4604      	mov	r4, r0
1a00842c:	465f      	mov	r7, fp
1a00842e:	468b      	mov	fp, r1
1a008430:	3201      	adds	r2, #1
1a008432:	442c      	add	r4, r5
1a008434:	2a07      	cmp	r2, #7
1a008436:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00843a:	e9cb 3500 	strd	r3, r5, [fp]
1a00843e:	f300 81da 	bgt.w	1a0087f6 <_vfprintf_r+0xece>
1a008442:	f10b 0b08 	add.w	fp, fp, #8
1a008446:	e4f2      	b.n	1a007e2e <_vfprintf_r+0x506>
1a008448:	aa28      	add	r2, sp, #160	; 0xa0
1a00844a:	9907      	ldr	r1, [sp, #28]
1a00844c:	9805      	ldr	r0, [sp, #20]
1a00844e:	f003 f8a3 	bl	1a00b598 <__sprint_r>
1a008452:	2800      	cmp	r0, #0
1a008454:	f43f ad11 	beq.w	1a007e7a <_vfprintf_r+0x552>
1a008458:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00845c:	e096      	b.n	1a00858c <_vfprintf_r+0xc64>
1a00845e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008460:	9915      	ldr	r1, [sp, #84]	; 0x54
1a008462:	f8cb 1000 	str.w	r1, [fp]
1a008466:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a008468:	f8cb 1004 	str.w	r1, [fp, #4]
1a00846c:	3201      	adds	r2, #1
1a00846e:	440c      	add	r4, r1
1a008470:	2a07      	cmp	r2, #7
1a008472:	942a      	str	r4, [sp, #168]	; 0xa8
1a008474:	9229      	str	r2, [sp, #164]	; 0xa4
1a008476:	f300 84e1 	bgt.w	1a008e3c <_vfprintf_r+0x1514>
1a00847a:	f10b 0b08 	add.w	fp, fp, #8
1a00847e:	2b00      	cmp	r3, #0
1a008480:	f2c0 86a2 	blt.w	1a0091c8 <_vfprintf_r+0x18a0>
1a008484:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008486:	3201      	adds	r2, #1
1a008488:	441c      	add	r4, r3
1a00848a:	2a07      	cmp	r2, #7
1a00848c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008490:	e9cb 7300 	strd	r7, r3, [fp]
1a008494:	f77f acdb 	ble.w	1a007e4e <_vfprintf_r+0x526>
1a008498:	aa28      	add	r2, sp, #160	; 0xa0
1a00849a:	9907      	ldr	r1, [sp, #28]
1a00849c:	9805      	ldr	r0, [sp, #20]
1a00849e:	f003 f87b 	bl	1a00b598 <__sprint_r>
1a0084a2:	2800      	cmp	r0, #0
1a0084a4:	d1d8      	bne.n	1a008458 <_vfprintf_r+0xb30>
1a0084a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0084a8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0084ac:	e4d1      	b.n	1a007e52 <_vfprintf_r+0x52a>
1a0084ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0084b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0084b2:	2a01      	cmp	r2, #1
1a0084b4:	f104 0401 	add.w	r4, r4, #1
1a0084b8:	f103 0501 	add.w	r5, r3, #1
1a0084bc:	f10b 0608 	add.w	r6, fp, #8
1a0084c0:	f340 8158 	ble.w	1a008774 <_vfprintf_r+0xe4c>
1a0084c4:	2301      	movs	r3, #1
1a0084c6:	2d07      	cmp	r5, #7
1a0084c8:	f8cb 7000 	str.w	r7, [fp]
1a0084cc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0084d0:	f8cb 3004 	str.w	r3, [fp, #4]
1a0084d4:	f300 832a 	bgt.w	1a008b2c <_vfprintf_r+0x1204>
1a0084d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0084da:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0084dc:	1c69      	adds	r1, r5, #1
1a0084de:	441c      	add	r4, r3
1a0084e0:	2907      	cmp	r1, #7
1a0084e2:	910b      	str	r1, [sp, #44]	; 0x2c
1a0084e4:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a0084e8:	e9c6 2300 	strd	r2, r3, [r6]
1a0084ec:	f300 832a 	bgt.w	1a008b44 <_vfprintf_r+0x121c>
1a0084f0:	3608      	adds	r6, #8
1a0084f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0084f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a0084f6:	f102 0901 	add.w	r9, r2, #1
1a0084fa:	2300      	movs	r3, #0
1a0084fc:	2200      	movs	r2, #0
1a0084fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008502:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a008506:	f106 0b08 	add.w	fp, r6, #8
1a00850a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a00850e:	f7fd fd19 	bl	1a005f44 <__aeabi_dcmpeq>
1a008512:	2800      	cmp	r0, #0
1a008514:	f040 8141 	bne.w	1a00879a <_vfprintf_r+0xe72>
1a008518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00851a:	f8c6 8004 	str.w	r8, [r6, #4]
1a00851e:	3701      	adds	r7, #1
1a008520:	4444      	add	r4, r8
1a008522:	2b07      	cmp	r3, #7
1a008524:	6037      	str	r7, [r6, #0]
1a008526:	942a      	str	r4, [sp, #168]	; 0xa8
1a008528:	9329      	str	r3, [sp, #164]	; 0xa4
1a00852a:	f300 82bf 	bgt.w	1a008aac <_vfprintf_r+0x1184>
1a00852e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a008530:	f106 0310 	add.w	r3, r6, #16
1a008534:	3202      	adds	r2, #2
1a008536:	465e      	mov	r6, fp
1a008538:	920a      	str	r2, [sp, #40]	; 0x28
1a00853a:	469b      	mov	fp, r3
1a00853c:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00853e:	6072      	str	r2, [r6, #4]
1a008540:	4414      	add	r4, r2
1a008542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a008544:	942a      	str	r4, [sp, #168]	; 0xa8
1a008546:	ab24      	add	r3, sp, #144	; 0x90
1a008548:	2a07      	cmp	r2, #7
1a00854a:	9229      	str	r2, [sp, #164]	; 0xa4
1a00854c:	6033      	str	r3, [r6, #0]
1a00854e:	f77f ac80 	ble.w	1a007e52 <_vfprintf_r+0x52a>
1a008552:	e7a1      	b.n	1a008498 <_vfprintf_r+0xb70>
1a008554:	9e02      	ldr	r6, [sp, #8]
1a008556:	f7ff bbf4 	b.w	1a007d42 <_vfprintf_r+0x41a>
1a00855a:	aa28      	add	r2, sp, #160	; 0xa0
1a00855c:	9907      	ldr	r1, [sp, #28]
1a00855e:	9805      	ldr	r0, [sp, #20]
1a008560:	f003 f81a 	bl	1a00b598 <__sprint_r>
1a008564:	2800      	cmp	r0, #0
1a008566:	f47f af77 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a00856a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00856c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008570:	e444      	b.n	1a007dfc <_vfprintf_r+0x4d4>
1a008572:	aa28      	add	r2, sp, #160	; 0xa0
1a008574:	9907      	ldr	r1, [sp, #28]
1a008576:	9805      	ldr	r0, [sp, #20]
1a008578:	f003 f80e 	bl	1a00b598 <__sprint_r>
1a00857c:	2800      	cmp	r0, #0
1a00857e:	f47f af6b 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008582:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008584:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008588:	e448      	b.n	1a007e1c <_vfprintf_r+0x4f4>
1a00858a:	46b1      	mov	r9, r6
1a00858c:	9909      	ldr	r1, [sp, #36]	; 0x24
1a00858e:	b111      	cbz	r1, 1a008596 <_vfprintf_r+0xc6e>
1a008590:	9805      	ldr	r0, [sp, #20]
1a008592:	f7fe f8cf 	bl	1a006734 <_free_r>
1a008596:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a00859a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00859e:	07d4      	lsls	r4, r2, #31
1a0085a0:	d402      	bmi.n	1a0085a8 <_vfprintf_r+0xc80>
1a0085a2:	0598      	lsls	r0, r3, #22
1a0085a4:	f140 82db 	bpl.w	1a008b5e <_vfprintf_r+0x1236>
1a0085a8:	0659      	lsls	r1, r3, #25
1a0085aa:	f100 8640 	bmi.w	1a00922e <_vfprintf_r+0x1906>
1a0085ae:	9804      	ldr	r0, [sp, #16]
1a0085b0:	b055      	add	sp, #340	; 0x154
1a0085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0085b6:	bf00      	nop
1a0085b8:	1a00c150 	.word	0x1a00c150
1a0085bc:	1a00c164 	.word	0x1a00c164
1a0085c0:	2d10      	cmp	r5, #16
1a0085c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0085c4:	dd21      	ble.n	1a00860a <_vfprintf_r+0xce2>
1a0085c6:	2610      	movs	r6, #16
1a0085c8:	9f05      	ldr	r7, [sp, #20]
1a0085ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0085ce:	e004      	b.n	1a0085da <_vfprintf_r+0xcb2>
1a0085d0:	3d10      	subs	r5, #16
1a0085d2:	2d10      	cmp	r5, #16
1a0085d4:	f10b 0b08 	add.w	fp, fp, #8
1a0085d8:	dd17      	ble.n	1a00860a <_vfprintf_r+0xce2>
1a0085da:	3301      	adds	r3, #1
1a0085dc:	4ab3      	ldr	r2, [pc, #716]	; (1a0088ac <_vfprintf_r+0xf84>)
1a0085de:	3410      	adds	r4, #16
1a0085e0:	2b07      	cmp	r3, #7
1a0085e2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0085e6:	e9cb 2600 	strd	r2, r6, [fp]
1a0085ea:	ddf1      	ble.n	1a0085d0 <_vfprintf_r+0xca8>
1a0085ec:	aa28      	add	r2, sp, #160	; 0xa0
1a0085ee:	4641      	mov	r1, r8
1a0085f0:	4638      	mov	r0, r7
1a0085f2:	f002 ffd1 	bl	1a00b598 <__sprint_r>
1a0085f6:	2800      	cmp	r0, #0
1a0085f8:	f040 82c7 	bne.w	1a008b8a <_vfprintf_r+0x1262>
1a0085fc:	3d10      	subs	r5, #16
1a0085fe:	2d10      	cmp	r5, #16
1a008600:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008604:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008608:	dce7      	bgt.n	1a0085da <_vfprintf_r+0xcb2>
1a00860a:	3301      	adds	r3, #1
1a00860c:	4aa7      	ldr	r2, [pc, #668]	; (1a0088ac <_vfprintf_r+0xf84>)
1a00860e:	442c      	add	r4, r5
1a008610:	2b07      	cmp	r3, #7
1a008612:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a008616:	e9cb 2500 	strd	r2, r5, [fp]
1a00861a:	f77f ac23 	ble.w	1a007e64 <_vfprintf_r+0x53c>
1a00861e:	aa28      	add	r2, sp, #160	; 0xa0
1a008620:	9907      	ldr	r1, [sp, #28]
1a008622:	9805      	ldr	r0, [sp, #20]
1a008624:	f002 ffb8 	bl	1a00b598 <__sprint_r>
1a008628:	2800      	cmp	r0, #0
1a00862a:	f47f af15 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a00862e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008630:	e418      	b.n	1a007e64 <_vfprintf_r+0x53c>
1a008632:	2b01      	cmp	r3, #1
1a008634:	f000 8423 	beq.w	1a008e7e <_vfprintf_r+0x1556>
1a008638:	2b02      	cmp	r3, #2
1a00863a:	9e02      	ldr	r6, [sp, #8]
1a00863c:	f47f ab87 	bne.w	1a007d4e <_vfprintf_r+0x426>
1a008640:	9814      	ldr	r0, [sp, #80]	; 0x50
1a008642:	af54      	add	r7, sp, #336	; 0x150
1a008644:	0923      	lsrs	r3, r4, #4
1a008646:	f004 010f 	and.w	r1, r4, #15
1a00864a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a00864e:	092a      	lsrs	r2, r5, #4
1a008650:	461c      	mov	r4, r3
1a008652:	4615      	mov	r5, r2
1a008654:	5c43      	ldrb	r3, [r0, r1]
1a008656:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a00865a:	ea54 0305 	orrs.w	r3, r4, r5
1a00865e:	d1f1      	bne.n	1a008644 <_vfprintf_r+0xd1c>
1a008660:	ab54      	add	r3, sp, #336	; 0x150
1a008662:	9602      	str	r6, [sp, #8]
1a008664:	1bde      	subs	r6, r3, r7
1a008666:	e5c1      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a008668:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00866a:	2b00      	cmp	r3, #0
1a00866c:	f340 80df 	ble.w	1a00882e <_vfprintf_r+0xf06>
1a008670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008672:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008674:	4293      	cmp	r3, r2
1a008676:	bfa8      	it	ge
1a008678:	4613      	movge	r3, r2
1a00867a:	2b00      	cmp	r3, #0
1a00867c:	461d      	mov	r5, r3
1a00867e:	dd0d      	ble.n	1a00869c <_vfprintf_r+0xd74>
1a008680:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008682:	f8cb 7000 	str.w	r7, [fp]
1a008686:	3301      	adds	r3, #1
1a008688:	442c      	add	r4, r5
1a00868a:	2b07      	cmp	r3, #7
1a00868c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00868e:	f8cb 5004 	str.w	r5, [fp, #4]
1a008692:	9329      	str	r3, [sp, #164]	; 0xa4
1a008694:	f300 84fe 	bgt.w	1a009094 <_vfprintf_r+0x176c>
1a008698:	f10b 0b08 	add.w	fp, fp, #8
1a00869c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00869e:	2d00      	cmp	r5, #0
1a0086a0:	bfa8      	it	ge
1a0086a2:	1b5b      	subge	r3, r3, r5
1a0086a4:	2b00      	cmp	r3, #0
1a0086a6:	461d      	mov	r5, r3
1a0086a8:	f300 8290 	bgt.w	1a008bcc <_vfprintf_r+0x12a4>
1a0086ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0086ae:	443b      	add	r3, r7
1a0086b0:	4699      	mov	r9, r3
1a0086b2:	9b02      	ldr	r3, [sp, #8]
1a0086b4:	0558      	lsls	r0, r3, #21
1a0086b6:	f100 8413 	bmi.w	1a008ee0 <_vfprintf_r+0x15b8>
1a0086ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0086bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0086be:	4293      	cmp	r3, r2
1a0086c0:	db03      	blt.n	1a0086ca <_vfprintf_r+0xda2>
1a0086c2:	9a02      	ldr	r2, [sp, #8]
1a0086c4:	07d1      	lsls	r1, r2, #31
1a0086c6:	f140 82f7 	bpl.w	1a008cb8 <_vfprintf_r+0x1390>
1a0086ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0086cc:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0086ce:	f8cb 1000 	str.w	r1, [fp]
1a0086d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0086d4:	f8cb 1004 	str.w	r1, [fp, #4]
1a0086d8:	3201      	adds	r2, #1
1a0086da:	440c      	add	r4, r1
1a0086dc:	2a07      	cmp	r2, #7
1a0086de:	942a      	str	r4, [sp, #168]	; 0xa8
1a0086e0:	9229      	str	r2, [sp, #164]	; 0xa4
1a0086e2:	f300 8523 	bgt.w	1a00912c <_vfprintf_r+0x1804>
1a0086e6:	f10b 0b08 	add.w	fp, fp, #8
1a0086ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0086ec:	18bd      	adds	r5, r7, r2
1a0086ee:	eba5 0509 	sub.w	r5, r5, r9
1a0086f2:	1ad3      	subs	r3, r2, r3
1a0086f4:	429d      	cmp	r5, r3
1a0086f6:	bfa8      	it	ge
1a0086f8:	461d      	movge	r5, r3
1a0086fa:	2d00      	cmp	r5, #0
1a0086fc:	dd0d      	ble.n	1a00871a <_vfprintf_r+0xdf2>
1a0086fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008700:	f8cb 9000 	str.w	r9, [fp]
1a008704:	3201      	adds	r2, #1
1a008706:	442c      	add	r4, r5
1a008708:	2a07      	cmp	r2, #7
1a00870a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00870c:	f8cb 5004 	str.w	r5, [fp, #4]
1a008710:	9229      	str	r2, [sp, #164]	; 0xa4
1a008712:	f300 8546 	bgt.w	1a0091a2 <_vfprintf_r+0x187a>
1a008716:	f10b 0b08 	add.w	fp, fp, #8
1a00871a:	2d00      	cmp	r5, #0
1a00871c:	bfac      	ite	ge
1a00871e:	1b5d      	subge	r5, r3, r5
1a008720:	461d      	movlt	r5, r3
1a008722:	2d00      	cmp	r5, #0
1a008724:	f77f ab95 	ble.w	1a007e52 <_vfprintf_r+0x52a>
1a008728:	2d10      	cmp	r5, #16
1a00872a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00872c:	4b60      	ldr	r3, [pc, #384]	; (1a0088b0 <_vfprintf_r+0xf88>)
1a00872e:	f340 823b 	ble.w	1a008ba8 <_vfprintf_r+0x1280>
1a008732:	2610      	movs	r6, #16
1a008734:	9f05      	ldr	r7, [sp, #20]
1a008736:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00873a:	4699      	mov	r9, r3
1a00873c:	e005      	b.n	1a00874a <_vfprintf_r+0xe22>
1a00873e:	f10b 0b08 	add.w	fp, fp, #8
1a008742:	3d10      	subs	r5, #16
1a008744:	2d10      	cmp	r5, #16
1a008746:	f340 822e 	ble.w	1a008ba6 <_vfprintf_r+0x127e>
1a00874a:	3201      	adds	r2, #1
1a00874c:	3410      	adds	r4, #16
1a00874e:	2a07      	cmp	r2, #7
1a008750:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008754:	e9cb 9600 	strd	r9, r6, [fp]
1a008758:	ddf1      	ble.n	1a00873e <_vfprintf_r+0xe16>
1a00875a:	aa28      	add	r2, sp, #160	; 0xa0
1a00875c:	4641      	mov	r1, r8
1a00875e:	4638      	mov	r0, r7
1a008760:	f002 ff1a 	bl	1a00b598 <__sprint_r>
1a008764:	2800      	cmp	r0, #0
1a008766:	f040 8210 	bne.w	1a008b8a <_vfprintf_r+0x1262>
1a00876a:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00876e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008772:	e7e6      	b.n	1a008742 <_vfprintf_r+0xe1a>
1a008774:	9a02      	ldr	r2, [sp, #8]
1a008776:	07d2      	lsls	r2, r2, #31
1a008778:	f53f aea4 	bmi.w	1a0084c4 <_vfprintf_r+0xb9c>
1a00877c:	2201      	movs	r2, #1
1a00877e:	2d07      	cmp	r5, #7
1a008780:	f8cb 7000 	str.w	r7, [fp]
1a008784:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a008788:	f8cb 2004 	str.w	r2, [fp, #4]
1a00878c:	f300 818e 	bgt.w	1a008aac <_vfprintf_r+0x1184>
1a008790:	3302      	adds	r3, #2
1a008792:	930a      	str	r3, [sp, #40]	; 0x28
1a008794:	f10b 0b10 	add.w	fp, fp, #16
1a008798:	e6d0      	b.n	1a00853c <_vfprintf_r+0xc14>
1a00879a:	f1b8 0f00 	cmp.w	r8, #0
1a00879e:	f77f aecd 	ble.w	1a00853c <_vfprintf_r+0xc14>
1a0087a2:	f1b8 0f10 	cmp.w	r8, #16
1a0087a6:	4b42      	ldr	r3, [pc, #264]	; (1a0088b0 <_vfprintf_r+0xf88>)
1a0087a8:	f340 8635 	ble.w	1a009416 <_vfprintf_r+0x1aee>
1a0087ac:	461a      	mov	r2, r3
1a0087ae:	464d      	mov	r5, r9
1a0087b0:	4623      	mov	r3, r4
1a0087b2:	2710      	movs	r7, #16
1a0087b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a0087b8:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a0087bc:	4614      	mov	r4, r2
1a0087be:	e007      	b.n	1a0087d0 <_vfprintf_r+0xea8>
1a0087c0:	3608      	adds	r6, #8
1a0087c2:	f1a8 0810 	sub.w	r8, r8, #16
1a0087c6:	f1b8 0f10 	cmp.w	r8, #16
1a0087ca:	f340 815e 	ble.w	1a008a8a <_vfprintf_r+0x1162>
1a0087ce:	3501      	adds	r5, #1
1a0087d0:	3310      	adds	r3, #16
1a0087d2:	2d07      	cmp	r5, #7
1a0087d4:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a0087d8:	e9c6 4700 	strd	r4, r7, [r6]
1a0087dc:	ddf0      	ble.n	1a0087c0 <_vfprintf_r+0xe98>
1a0087de:	aa28      	add	r2, sp, #160	; 0xa0
1a0087e0:	4659      	mov	r1, fp
1a0087e2:	4648      	mov	r0, r9
1a0087e4:	f002 fed8 	bl	1a00b598 <__sprint_r>
1a0087e8:	2800      	cmp	r0, #0
1a0087ea:	f040 821d 	bne.w	1a008c28 <_vfprintf_r+0x1300>
1a0087ee:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a0087f2:	ae2b      	add	r6, sp, #172	; 0xac
1a0087f4:	e7e5      	b.n	1a0087c2 <_vfprintf_r+0xe9a>
1a0087f6:	aa28      	add	r2, sp, #160	; 0xa0
1a0087f8:	9907      	ldr	r1, [sp, #28]
1a0087fa:	9805      	ldr	r0, [sp, #20]
1a0087fc:	f002 fecc 	bl	1a00b598 <__sprint_r>
1a008800:	2800      	cmp	r0, #0
1a008802:	f47f ae29 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008806:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008808:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00880c:	f7ff bb0f 	b.w	1a007e2e <_vfprintf_r+0x506>
1a008810:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008814:	f7fe f8d6 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a008818:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00881c:	b293      	uxth	r3, r2
1a00881e:	f7ff b8a3 	b.w	1a007968 <_vfprintf_r+0x40>
1a008822:	9b02      	ldr	r3, [sp, #8]
1a008824:	07dd      	lsls	r5, r3, #31
1a008826:	f53f ad57 	bmi.w	1a0082d8 <_vfprintf_r+0x9b0>
1a00882a:	f7ff bb12 	b.w	1a007e52 <_vfprintf_r+0x52a>
1a00882e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008830:	4920      	ldr	r1, [pc, #128]	; (1a0088b4 <_vfprintf_r+0xf8c>)
1a008832:	f8cb 1000 	str.w	r1, [fp]
1a008836:	3201      	adds	r2, #1
1a008838:	3401      	adds	r4, #1
1a00883a:	2101      	movs	r1, #1
1a00883c:	2a07      	cmp	r2, #7
1a00883e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008842:	f8cb 1004 	str.w	r1, [fp, #4]
1a008846:	f300 8409 	bgt.w	1a00905c <_vfprintf_r+0x1734>
1a00884a:	f10b 0b08 	add.w	fp, fp, #8
1a00884e:	2b00      	cmp	r3, #0
1a008850:	f47f ae05 	bne.w	1a00845e <_vfprintf_r+0xb36>
1a008854:	9b02      	ldr	r3, [sp, #8]
1a008856:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008858:	f003 0301 	and.w	r3, r3, #1
1a00885c:	4313      	orrs	r3, r2
1a00885e:	f43f aaf8 	beq.w	1a007e52 <_vfprintf_r+0x52a>
1a008862:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008864:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a008866:	f8cb 3000 	str.w	r3, [fp]
1a00886a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00886c:	f8cb 3004 	str.w	r3, [fp, #4]
1a008870:	3201      	adds	r2, #1
1a008872:	441c      	add	r4, r3
1a008874:	2a07      	cmp	r2, #7
1a008876:	942a      	str	r4, [sp, #168]	; 0xa8
1a008878:	9229      	str	r2, [sp, #164]	; 0xa4
1a00887a:	f300 82df 	bgt.w	1a008e3c <_vfprintf_r+0x1514>
1a00887e:	f10b 0b08 	add.w	fp, fp, #8
1a008882:	e5ff      	b.n	1a008484 <_vfprintf_r+0xb5c>
1a008884:	af54      	add	r7, sp, #336	; 0x150
1a008886:	e4b1      	b.n	1a0081ec <_vfprintf_r+0x8c4>
1a008888:	9b02      	ldr	r3, [sp, #8]
1a00888a:	0598      	lsls	r0, r3, #22
1a00888c:	f100 822d 	bmi.w	1a008cea <_vfprintf_r+0x13c2>
1a008890:	2500      	movs	r5, #0
1a008892:	f7ff b987 	b.w	1a007ba4 <_vfprintf_r+0x27c>
1a008896:	9904      	ldr	r1, [sp, #16]
1a008898:	6812      	ldr	r2, [r2, #0]
1a00889a:	9308      	str	r3, [sp, #32]
1a00889c:	17cd      	asrs	r5, r1, #31
1a00889e:	4608      	mov	r0, r1
1a0088a0:	4629      	mov	r1, r5
1a0088a2:	e9c2 0100 	strd	r0, r1, [r2]
1a0088a6:	4657      	mov	r7, sl
1a0088a8:	f7ff baf2 	b.w	1a007e90 <_vfprintf_r+0x568>
1a0088ac:	1a00c154 	.word	0x1a00c154
1a0088b0:	1a00c164 	.word	0x1a00c164
1a0088b4:	1a00c150 	.word	0x1a00c150
1a0088b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0088bc:	4602      	mov	r2, r0
1a0088be:	460b      	mov	r3, r1
1a0088c0:	f002 ffc2 	bl	1a00b848 <__aeabi_dcmpun>
1a0088c4:	2800      	cmp	r0, #0
1a0088c6:	f040 853a 	bne.w	1a00933e <_vfprintf_r+0x1a16>
1a0088ca:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a0088ce:	f000 84d0 	beq.w	1a009272 <_vfprintf_r+0x194a>
1a0088d2:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0088d6:	f000 820c 	beq.w	1a008cf2 <_vfprintf_r+0x13ca>
1a0088da:	f028 0320 	bic.w	r3, r8, #32
1a0088de:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0088e2:	9303      	str	r3, [sp, #12]
1a0088e4:	f000 8500 	beq.w	1a0092e8 <_vfprintf_r+0x19c0>
1a0088e8:	2b47      	cmp	r3, #71	; 0x47
1a0088ea:	d104      	bne.n	1a0088f6 <_vfprintf_r+0xfce>
1a0088ec:	f1b9 0f00 	cmp.w	r9, #0
1a0088f0:	bf08      	it	eq
1a0088f2:	f04f 0901 	moveq.w	r9, #1
1a0088f6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a0088fa:	9902      	ldr	r1, [sp, #8]
1a0088fc:	2d00      	cmp	r5, #0
1a0088fe:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a008902:	f2c0 8395 	blt.w	1a009030 <_vfprintf_r+0x1708>
1a008906:	2300      	movs	r3, #0
1a008908:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a00890c:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a008910:	931e      	str	r3, [sp, #120]	; 0x78
1a008912:	9202      	str	r2, [sp, #8]
1a008914:	9b03      	ldr	r3, [sp, #12]
1a008916:	2b46      	cmp	r3, #70	; 0x46
1a008918:	f000 83df 	beq.w	1a0090da <_vfprintf_r+0x17b2>
1a00891c:	2b45      	cmp	r3, #69	; 0x45
1a00891e:	f000 84d2 	beq.w	1a0092c6 <_vfprintf_r+0x199e>
1a008922:	aa26      	add	r2, sp, #152	; 0x98
1a008924:	ab23      	add	r3, sp, #140	; 0x8c
1a008926:	e9cd 3200 	strd	r3, r2, [sp]
1a00892a:	2102      	movs	r1, #2
1a00892c:	ab22      	add	r3, sp, #136	; 0x88
1a00892e:	464a      	mov	r2, r9
1a008930:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008934:	9805      	ldr	r0, [sp, #20]
1a008936:	f000 fedf 	bl	1a0096f8 <_dtoa_r>
1a00893a:	9b03      	ldr	r3, [sp, #12]
1a00893c:	2b47      	cmp	r3, #71	; 0x47
1a00893e:	4607      	mov	r7, r0
1a008940:	f040 858d 	bne.w	1a00945e <_vfprintf_r+0x1b36>
1a008944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008946:	07db      	lsls	r3, r3, #31
1a008948:	f100 843b 	bmi.w	1a0091c2 <_vfprintf_r+0x189a>
1a00894c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00894e:	1bf3      	subs	r3, r6, r7
1a008950:	9312      	str	r3, [sp, #72]	; 0x48
1a008952:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008954:	930e      	str	r3, [sp, #56]	; 0x38
1a008956:	9b03      	ldr	r3, [sp, #12]
1a008958:	2b47      	cmp	r3, #71	; 0x47
1a00895a:	f000 8293 	beq.w	1a008e84 <_vfprintf_r+0x155c>
1a00895e:	9b03      	ldr	r3, [sp, #12]
1a008960:	2b46      	cmp	r3, #70	; 0x46
1a008962:	f000 83fd 	beq.w	1a009160 <_vfprintf_r+0x1838>
1a008966:	9903      	ldr	r1, [sp, #12]
1a008968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00896a:	2941      	cmp	r1, #65	; 0x41
1a00896c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a008970:	fa5f f388 	uxtb.w	r3, r8
1a008974:	bf03      	ittte	eq
1a008976:	330f      	addeq	r3, #15
1a008978:	b2db      	uxtbeq	r3, r3
1a00897a:	2101      	moveq	r1, #1
1a00897c:	2100      	movne	r1, #0
1a00897e:	2a00      	cmp	r2, #0
1a008980:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a008984:	bfb8      	it	lt
1a008986:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a008988:	9222      	str	r2, [sp, #136]	; 0x88
1a00898a:	bfb6      	itet	lt
1a00898c:	f1c3 0201 	rsblt	r2, r3, #1
1a008990:	232b      	movge	r3, #43	; 0x2b
1a008992:	232d      	movlt	r3, #45	; 0x2d
1a008994:	2a09      	cmp	r2, #9
1a008996:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a00899a:	f340 84c1 	ble.w	1a009320 <_vfprintf_r+0x19f8>
1a00899e:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a0089a2:	4620      	mov	r0, r4
1a0089a4:	4dbe      	ldr	r5, [pc, #760]	; (1a008ca0 <_vfprintf_r+0x1378>)
1a0089a6:	e001      	b.n	1a0089ac <_vfprintf_r+0x1084>
1a0089a8:	4608      	mov	r0, r1
1a0089aa:	461a      	mov	r2, r3
1a0089ac:	fb85 3102 	smull	r3, r1, r5, r2
1a0089b0:	17d3      	asrs	r3, r2, #31
1a0089b2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a0089b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0089ba:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a0089be:	3130      	adds	r1, #48	; 0x30
1a0089c0:	2a63      	cmp	r2, #99	; 0x63
1a0089c2:	f800 1c01 	strb.w	r1, [r0, #-1]
1a0089c6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a0089ca:	dced      	bgt.n	1a0089a8 <_vfprintf_r+0x1080>
1a0089cc:	3330      	adds	r3, #48	; 0x30
1a0089ce:	1e82      	subs	r2, r0, #2
1a0089d0:	b2db      	uxtb	r3, r3
1a0089d2:	4294      	cmp	r4, r2
1a0089d4:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0089d8:	f240 8544 	bls.w	1a009464 <_vfprintf_r+0x1b3c>
1a0089dc:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0089e0:	e001      	b.n	1a0089e6 <_vfprintf_r+0x10be>
1a0089e2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0089e6:	f802 3b01 	strb.w	r3, [r2], #1
1a0089ea:	42a1      	cmp	r1, r4
1a0089ec:	d1f9      	bne.n	1a0089e2 <_vfprintf_r+0x10ba>
1a0089ee:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a0089f2:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0089f6:	1a1b      	subs	r3, r3, r0
1a0089f8:	4413      	add	r3, r2
1a0089fa:	aa24      	add	r2, sp, #144	; 0x90
1a0089fc:	1a9b      	subs	r3, r3, r2
1a0089fe:	9316      	str	r3, [sp, #88]	; 0x58
1a008a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008a02:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a008a04:	2b01      	cmp	r3, #1
1a008a06:	eb03 0602 	add.w	r6, r3, r2
1a008a0a:	f340 84ee 	ble.w	1a0093ea <_vfprintf_r+0x1ac2>
1a008a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a008a10:	441e      	add	r6, r3
1a008a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008a14:	2200      	movs	r2, #0
1a008a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a008a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a008a1e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a008a22:	9302      	str	r3, [sp, #8]
1a008a24:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008a28:	920c      	str	r2, [sp, #48]	; 0x30
1a008a2a:	9303      	str	r3, [sp, #12]
1a008a2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a008a2e:	2b00      	cmp	r3, #0
1a008a30:	f040 824f 	bne.w	1a008ed2 <_vfprintf_r+0x15aa>
1a008a34:	4699      	mov	r9, r3
1a008a36:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008a3a:	f7ff b94a 	b.w	1a007cd2 <_vfprintf_r+0x3aa>
1a008a3e:	9b08      	ldr	r3, [sp, #32]
1a008a40:	1d1a      	adds	r2, r3, #4
1a008a42:	9b02      	ldr	r3, [sp, #8]
1a008a44:	06d9      	lsls	r1, r3, #27
1a008a46:	f100 8504 	bmi.w	1a009452 <_vfprintf_r+0x1b2a>
1a008a4a:	9e02      	ldr	r6, [sp, #8]
1a008a4c:	4633      	mov	r3, r6
1a008a4e:	065b      	lsls	r3, r3, #25
1a008a50:	f140 80ec 	bpl.w	1a008c2c <_vfprintf_r+0x1304>
1a008a54:	9b08      	ldr	r3, [sp, #32]
1a008a56:	9208      	str	r2, [sp, #32]
1a008a58:	f9b3 4000 	ldrsh.w	r4, [r3]
1a008a5c:	17e5      	asrs	r5, r4, #31
1a008a5e:	4622      	mov	r2, r4
1a008a60:	462b      	mov	r3, r5
1a008a62:	f7ff b8eb 	b.w	1a007c3c <_vfprintf_r+0x314>
1a008a66:	4252      	negs	r2, r2
1a008a68:	9206      	str	r2, [sp, #24]
1a008a6a:	9308      	str	r3, [sp, #32]
1a008a6c:	f7ff b8af 	b.w	1a007bce <_vfprintf_r+0x2a6>
1a008a70:	aa28      	add	r2, sp, #160	; 0xa0
1a008a72:	9907      	ldr	r1, [sp, #28]
1a008a74:	9805      	ldr	r0, [sp, #20]
1a008a76:	f002 fd8f 	bl	1a00b598 <__sprint_r>
1a008a7a:	2800      	cmp	r0, #0
1a008a7c:	f47f acec 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008a80:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008a82:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008a86:	f7ff b9cd 	b.w	1a007e24 <_vfprintf_r+0x4fc>
1a008a8a:	4622      	mov	r2, r4
1a008a8c:	461c      	mov	r4, r3
1a008a8e:	4613      	mov	r3, r2
1a008a90:	462a      	mov	r2, r5
1a008a92:	3201      	adds	r2, #1
1a008a94:	920a      	str	r2, [sp, #40]	; 0x28
1a008a96:	f106 0208 	add.w	r2, r6, #8
1a008a9a:	e9c6 3800 	strd	r3, r8, [r6]
1a008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008aa0:	9329      	str	r3, [sp, #164]	; 0xa4
1a008aa2:	4444      	add	r4, r8
1a008aa4:	2b07      	cmp	r3, #7
1a008aa6:	942a      	str	r4, [sp, #168]	; 0xa8
1a008aa8:	f340 8100 	ble.w	1a008cac <_vfprintf_r+0x1384>
1a008aac:	aa28      	add	r2, sp, #160	; 0xa0
1a008aae:	9907      	ldr	r1, [sp, #28]
1a008ab0:	9805      	ldr	r0, [sp, #20]
1a008ab2:	f002 fd71 	bl	1a00b598 <__sprint_r>
1a008ab6:	2800      	cmp	r0, #0
1a008ab8:	f47f acce 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008abc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008ac0:	3301      	adds	r3, #1
1a008ac2:	930a      	str	r3, [sp, #40]	; 0x28
1a008ac4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a008ac8:	ae2b      	add	r6, sp, #172	; 0xac
1a008aca:	e537      	b.n	1a00853c <_vfprintf_r+0xc14>
1a008acc:	aa28      	add	r2, sp, #160	; 0xa0
1a008ace:	9907      	ldr	r1, [sp, #28]
1a008ad0:	9805      	ldr	r0, [sp, #20]
1a008ad2:	f002 fd61 	bl	1a00b598 <__sprint_r>
1a008ad6:	2800      	cmp	r0, #0
1a008ad8:	f47f acbe 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008adc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008ade:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008ae2:	e409      	b.n	1a0082f8 <_vfprintf_r+0x9d0>
1a008ae4:	f043 0320 	orr.w	r3, r3, #32
1a008ae8:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008aec:	9302      	str	r3, [sp, #8]
1a008aee:	f10a 0a01 	add.w	sl, sl, #1
1a008af2:	f7fe bf9d 	b.w	1a007a30 <_vfprintf_r+0x108>
1a008af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a008afa:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008afe:	9302      	str	r3, [sp, #8]
1a008b00:	f10a 0a01 	add.w	sl, sl, #1
1a008b04:	f7fe bf94 	b.w	1a007a30 <_vfprintf_r+0x108>
1a008b08:	464e      	mov	r6, r9
1a008b0a:	2e06      	cmp	r6, #6
1a008b0c:	bf28      	it	cs
1a008b0e:	2606      	movcs	r6, #6
1a008b10:	46b9      	mov	r9, r7
1a008b12:	970c      	str	r7, [sp, #48]	; 0x30
1a008b14:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a008b18:	9709      	str	r7, [sp, #36]	; 0x24
1a008b1a:	463a      	mov	r2, r7
1a008b1c:	9603      	str	r6, [sp, #12]
1a008b1e:	9408      	str	r4, [sp, #32]
1a008b20:	4f60      	ldr	r7, [pc, #384]	; (1a008ca4 <_vfprintf_r+0x137c>)
1a008b22:	f7ff b8d6 	b.w	1a007cd2 <_vfprintf_r+0x3aa>
1a008b26:	463c      	mov	r4, r7
1a008b28:	f7fe bf75 	b.w	1a007a16 <_vfprintf_r+0xee>
1a008b2c:	aa28      	add	r2, sp, #160	; 0xa0
1a008b2e:	9907      	ldr	r1, [sp, #28]
1a008b30:	9805      	ldr	r0, [sp, #20]
1a008b32:	f002 fd31 	bl	1a00b598 <__sprint_r>
1a008b36:	2800      	cmp	r0, #0
1a008b38:	f47f ac8e 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008b3c:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a008b40:	ae2b      	add	r6, sp, #172	; 0xac
1a008b42:	e4c9      	b.n	1a0084d8 <_vfprintf_r+0xbb0>
1a008b44:	aa28      	add	r2, sp, #160	; 0xa0
1a008b46:	9907      	ldr	r1, [sp, #28]
1a008b48:	9805      	ldr	r0, [sp, #20]
1a008b4a:	f002 fd25 	bl	1a00b598 <__sprint_r>
1a008b4e:	2800      	cmp	r0, #0
1a008b50:	f47f ac82 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008b54:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008b58:	ae2b      	add	r6, sp, #172	; 0xac
1a008b5a:	930b      	str	r3, [sp, #44]	; 0x2c
1a008b5c:	e4c9      	b.n	1a0084f2 <_vfprintf_r+0xbca>
1a008b5e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008b62:	f7fd ff31 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a008b66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a008b6a:	e51d      	b.n	1a0085a8 <_vfprintf_r+0xc80>
1a008b6c:	aa28      	add	r2, sp, #160	; 0xa0
1a008b6e:	9907      	ldr	r1, [sp, #28]
1a008b70:	9805      	ldr	r0, [sp, #20]
1a008b72:	f002 fd11 	bl	1a00b598 <__sprint_r>
1a008b76:	2800      	cmp	r0, #0
1a008b78:	f47f ac6e 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008b7c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008b80:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008b82:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008b86:	f7ff b929 	b.w	1a007ddc <_vfprintf_r+0x4b4>
1a008b8a:	46c1      	mov	r9, r8
1a008b8c:	e4fe      	b.n	1a00858c <_vfprintf_r+0xc64>
1a008b8e:	aa28      	add	r2, sp, #160	; 0xa0
1a008b90:	9907      	ldr	r1, [sp, #28]
1a008b92:	9805      	ldr	r0, [sp, #20]
1a008b94:	f002 fd00 	bl	1a00b598 <__sprint_r>
1a008b98:	2800      	cmp	r0, #0
1a008b9a:	f47f ac5d 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008b9e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008ba2:	f7ff bb93 	b.w	1a0082cc <_vfprintf_r+0x9a4>
1a008ba6:	464b      	mov	r3, r9
1a008ba8:	3201      	adds	r2, #1
1a008baa:	442c      	add	r4, r5
1a008bac:	2a07      	cmp	r2, #7
1a008bae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008bb2:	e9cb 3500 	strd	r3, r5, [fp]
1a008bb6:	f77f a94a 	ble.w	1a007e4e <_vfprintf_r+0x526>
1a008bba:	e46d      	b.n	1a008498 <_vfprintf_r+0xb70>
1a008bbc:	9a08      	ldr	r2, [sp, #32]
1a008bbe:	6812      	ldr	r2, [r2, #0]
1a008bc0:	9308      	str	r3, [sp, #32]
1a008bc2:	9b04      	ldr	r3, [sp, #16]
1a008bc4:	6013      	str	r3, [r2, #0]
1a008bc6:	4657      	mov	r7, sl
1a008bc8:	f7ff b962 	b.w	1a007e90 <_vfprintf_r+0x568>
1a008bcc:	2d10      	cmp	r5, #16
1a008bce:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008bd0:	4b35      	ldr	r3, [pc, #212]	; (1a008ca8 <_vfprintf_r+0x1380>)
1a008bd2:	dd50      	ble.n	1a008c76 <_vfprintf_r+0x134e>
1a008bd4:	4619      	mov	r1, r3
1a008bd6:	2610      	movs	r6, #16
1a008bd8:	4623      	mov	r3, r4
1a008bda:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a008bde:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008be2:	460c      	mov	r4, r1
1a008be4:	e004      	b.n	1a008bf0 <_vfprintf_r+0x12c8>
1a008be6:	f10b 0b08 	add.w	fp, fp, #8
1a008bea:	3d10      	subs	r5, #16
1a008bec:	2d10      	cmp	r5, #16
1a008bee:	dd3f      	ble.n	1a008c70 <_vfprintf_r+0x1348>
1a008bf0:	3201      	adds	r2, #1
1a008bf2:	3310      	adds	r3, #16
1a008bf4:	2a07      	cmp	r2, #7
1a008bf6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a008bfa:	e9cb 4600 	strd	r4, r6, [fp]
1a008bfe:	ddf2      	ble.n	1a008be6 <_vfprintf_r+0x12be>
1a008c00:	aa28      	add	r2, sp, #160	; 0xa0
1a008c02:	4649      	mov	r1, r9
1a008c04:	4640      	mov	r0, r8
1a008c06:	f002 fcc7 	bl	1a00b598 <__sprint_r>
1a008c0a:	2800      	cmp	r0, #0
1a008c0c:	f47f acbe 	bne.w	1a00858c <_vfprintf_r+0xc64>
1a008c10:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a008c14:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008c18:	e7e7      	b.n	1a008bea <_vfprintf_r+0x12c2>
1a008c1a:	4638      	mov	r0, r7
1a008c1c:	f7fe fd30 	bl	1a007680 <strlen>
1a008c20:	46a9      	mov	r9, r5
1a008c22:	4606      	mov	r6, r0
1a008c24:	f7ff b849 	b.w	1a007cba <_vfprintf_r+0x392>
1a008c28:	46d9      	mov	r9, fp
1a008c2a:	e4af      	b.n	1a00858c <_vfprintf_r+0xc64>
1a008c2c:	9e02      	ldr	r6, [sp, #8]
1a008c2e:	9b08      	ldr	r3, [sp, #32]
1a008c30:	f416 7f00 	tst.w	r6, #512	; 0x200
1a008c34:	d051      	beq.n	1a008cda <_vfprintf_r+0x13b2>
1a008c36:	f993 4000 	ldrsb.w	r4, [r3]
1a008c3a:	9208      	str	r2, [sp, #32]
1a008c3c:	17e5      	asrs	r5, r4, #31
1a008c3e:	4622      	mov	r2, r4
1a008c40:	462b      	mov	r3, r5
1a008c42:	f7fe bffb 	b.w	1a007c3c <_vfprintf_r+0x314>
1a008c46:	9e02      	ldr	r6, [sp, #8]
1a008c48:	05b7      	lsls	r7, r6, #22
1a008c4a:	bf47      	ittee	mi
1a008c4c:	9208      	strmi	r2, [sp, #32]
1a008c4e:	b2e4      	uxtbmi	r4, r4
1a008c50:	9e02      	ldrpl	r6, [sp, #8]
1a008c52:	9208      	strpl	r2, [sp, #32]
1a008c54:	2500      	movs	r5, #0
1a008c56:	f7ff baae 	b.w	1a0081b6 <_vfprintf_r+0x88e>
1a008c5a:	9e02      	ldr	r6, [sp, #8]
1a008c5c:	9208      	str	r2, [sp, #32]
1a008c5e:	4633      	mov	r3, r6
1a008c60:	059b      	lsls	r3, r3, #22
1a008c62:	bf4c      	ite	mi
1a008c64:	b2e4      	uxtbmi	r4, r4
1a008c66:	9e02      	ldrpl	r6, [sp, #8]
1a008c68:	2500      	movs	r5, #0
1a008c6a:	2301      	movs	r3, #1
1a008c6c:	f7ff b987 	b.w	1a007f7e <_vfprintf_r+0x656>
1a008c70:	4621      	mov	r1, r4
1a008c72:	461c      	mov	r4, r3
1a008c74:	460b      	mov	r3, r1
1a008c76:	3201      	adds	r2, #1
1a008c78:	442c      	add	r4, r5
1a008c7a:	2a07      	cmp	r2, #7
1a008c7c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a008c80:	e9cb 3500 	strd	r3, r5, [fp]
1a008c84:	f300 80ef 	bgt.w	1a008e66 <_vfprintf_r+0x153e>
1a008c88:	f10b 0b08 	add.w	fp, fp, #8
1a008c8c:	e50e      	b.n	1a0086ac <_vfprintf_r+0xd84>
1a008c8e:	9805      	ldr	r0, [sp, #20]
1a008c90:	aa28      	add	r2, sp, #160	; 0xa0
1a008c92:	4649      	mov	r1, r9
1a008c94:	f002 fc80 	bl	1a00b598 <__sprint_r>
1a008c98:	2800      	cmp	r0, #0
1a008c9a:	f43f a903 	beq.w	1a007ea4 <_vfprintf_r+0x57c>
1a008c9e:	e47a      	b.n	1a008596 <_vfprintf_r+0xc6e>
1a008ca0:	66666667 	.word	0x66666667
1a008ca4:	1a00c148 	.word	0x1a00c148
1a008ca8:	1a00c164 	.word	0x1a00c164
1a008cac:	3301      	adds	r3, #1
1a008cae:	930a      	str	r3, [sp, #40]	; 0x28
1a008cb0:	f102 0b08 	add.w	fp, r2, #8
1a008cb4:	4616      	mov	r6, r2
1a008cb6:	e441      	b.n	1a00853c <_vfprintf_r+0xc14>
1a008cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a008cba:	18bd      	adds	r5, r7, r2
1a008cbc:	eba5 0509 	sub.w	r5, r5, r9
1a008cc0:	1ad3      	subs	r3, r2, r3
1a008cc2:	429d      	cmp	r5, r3
1a008cc4:	bfa8      	it	ge
1a008cc6:	461d      	movge	r5, r3
1a008cc8:	e527      	b.n	1a00871a <_vfprintf_r+0xdf2>
1a008cca:	9a08      	ldr	r2, [sp, #32]
1a008ccc:	9308      	str	r3, [sp, #32]
1a008cce:	6812      	ldr	r2, [r2, #0]
1a008cd0:	9b04      	ldr	r3, [sp, #16]
1a008cd2:	8013      	strh	r3, [r2, #0]
1a008cd4:	4657      	mov	r7, sl
1a008cd6:	f7ff b8db 	b.w	1a007e90 <_vfprintf_r+0x568>
1a008cda:	681c      	ldr	r4, [r3, #0]
1a008cdc:	9208      	str	r2, [sp, #32]
1a008cde:	17e5      	asrs	r5, r4, #31
1a008ce0:	9e02      	ldr	r6, [sp, #8]
1a008ce2:	4622      	mov	r2, r4
1a008ce4:	462b      	mov	r3, r5
1a008ce6:	f7fe bfa9 	b.w	1a007c3c <_vfprintf_r+0x314>
1a008cea:	b2e4      	uxtb	r4, r4
1a008cec:	2500      	movs	r5, #0
1a008cee:	f7fe bf59 	b.w	1a007ba4 <_vfprintf_r+0x27c>
1a008cf2:	2330      	movs	r3, #48	; 0x30
1a008cf4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a008cf8:	2358      	movs	r3, #88	; 0x58
1a008cfa:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a008cfe:	9b02      	ldr	r3, [sp, #8]
1a008d00:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a008d04:	f043 0302 	orr.w	r3, r3, #2
1a008d08:	930a      	str	r3, [sp, #40]	; 0x28
1a008d0a:	f300 82b7 	bgt.w	1a00927c <_vfprintf_r+0x1954>
1a008d0e:	2300      	movs	r3, #0
1a008d10:	9309      	str	r3, [sp, #36]	; 0x24
1a008d12:	af3b      	add	r7, sp, #236	; 0xec
1a008d14:	9a02      	ldr	r2, [sp, #8]
1a008d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008d18:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a008d1c:	9202      	str	r2, [sp, #8]
1a008d1e:	2b00      	cmp	r3, #0
1a008d20:	f028 0220 	bic.w	r2, r8, #32
1a008d24:	9203      	str	r2, [sp, #12]
1a008d26:	f2c0 8188 	blt.w	1a00903a <_vfprintf_r+0x1712>
1a008d2a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008d2e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a008d32:	2300      	movs	r3, #0
1a008d34:	931e      	str	r3, [sp, #120]	; 0x78
1a008d36:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a008d3a:	f000 82d9 	beq.w	1a0092f0 <_vfprintf_r+0x19c8>
1a008d3e:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a008d42:	f47f ade7 	bne.w	1a008914 <_vfprintf_r+0xfec>
1a008d46:	a822      	add	r0, sp, #136	; 0x88
1a008d48:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008d4c:	f002 fb78 	bl	1a00b440 <frexp>
1a008d50:	2200      	movs	r2, #0
1a008d52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a008d56:	ec51 0b10 	vmov	r0, r1, d0
1a008d5a:	f7fc fe8b 	bl	1a005a74 <__aeabi_dmul>
1a008d5e:	2200      	movs	r2, #0
1a008d60:	2300      	movs	r3, #0
1a008d62:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a008d66:	f7fd f8ed 	bl	1a005f44 <__aeabi_dcmpeq>
1a008d6a:	b108      	cbz	r0, 1a008d70 <_vfprintf_r+0x1448>
1a008d6c:	2301      	movs	r3, #1
1a008d6e:	9322      	str	r3, [sp, #136]	; 0x88
1a008d70:	4bb6      	ldr	r3, [pc, #728]	; (1a00904c <_vfprintf_r+0x1724>)
1a008d72:	930b      	str	r3, [sp, #44]	; 0x2c
1a008d74:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a008d78:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a008d7c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a008d80:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a008d84:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a008d88:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a008d8c:	970c      	str	r7, [sp, #48]	; 0x30
1a008d8e:	46ba      	mov	sl, r7
1a008d90:	e003      	b.n	1a008d9a <_vfprintf_r+0x1472>
1a008d92:	f7fd f8d7 	bl	1a005f44 <__aeabi_dcmpeq>
1a008d96:	bb20      	cbnz	r0, 1a008de2 <_vfprintf_r+0x14ba>
1a008d98:	46b2      	mov	sl, r6
1a008d9a:	2200      	movs	r2, #0
1a008d9c:	4bac      	ldr	r3, [pc, #688]	; (1a009050 <_vfprintf_r+0x1728>)
1a008d9e:	4640      	mov	r0, r8
1a008da0:	4649      	mov	r1, r9
1a008da2:	f7fc fe67 	bl	1a005a74 <__aeabi_dmul>
1a008da6:	4689      	mov	r9, r1
1a008da8:	4680      	mov	r8, r0
1a008daa:	f002 fd63 	bl	1a00b874 <__aeabi_d2iz>
1a008dae:	4607      	mov	r7, r0
1a008db0:	f7fc fdf6 	bl	1a0059a0 <__aeabi_i2d>
1a008db4:	4602      	mov	r2, r0
1a008db6:	460b      	mov	r3, r1
1a008db8:	4640      	mov	r0, r8
1a008dba:	4649      	mov	r1, r9
1a008dbc:	f7fc fca2 	bl	1a005704 <__aeabi_dsub>
1a008dc0:	4656      	mov	r6, sl
1a008dc2:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a008dc6:	f806 4b01 	strb.w	r4, [r6], #1
1a008dca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a008dce:	462c      	mov	r4, r5
1a008dd0:	4680      	mov	r8, r0
1a008dd2:	4689      	mov	r9, r1
1a008dd4:	f04f 0200 	mov.w	r2, #0
1a008dd8:	f04f 0300 	mov.w	r3, #0
1a008ddc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a008de0:	d1d7      	bne.n	1a008d92 <_vfprintf_r+0x146a>
1a008de2:	4640      	mov	r0, r8
1a008de4:	4649      	mov	r1, r9
1a008de6:	2200      	movs	r2, #0
1a008de8:	4b9a      	ldr	r3, [pc, #616]	; (1a009054 <_vfprintf_r+0x172c>)
1a008dea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a008dee:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a008df2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a008df6:	463d      	mov	r5, r7
1a008df8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a008dfc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a008dfe:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a008e02:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a008e06:	f7fd f8c5 	bl	1a005f94 <__aeabi_dcmpgt>
1a008e0a:	2800      	cmp	r0, #0
1a008e0c:	f040 8214 	bne.w	1a009238 <_vfprintf_r+0x1910>
1a008e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a008e14:	2200      	movs	r2, #0
1a008e16:	4b8f      	ldr	r3, [pc, #572]	; (1a009054 <_vfprintf_r+0x172c>)
1a008e18:	f7fd f894 	bl	1a005f44 <__aeabi_dcmpeq>
1a008e1c:	b118      	cbz	r0, 1a008e26 <_vfprintf_r+0x14fe>
1a008e1e:	462b      	mov	r3, r5
1a008e20:	07db      	lsls	r3, r3, #31
1a008e22:	f100 8209 	bmi.w	1a009238 <_vfprintf_r+0x1910>
1a008e26:	2c00      	cmp	r4, #0
1a008e28:	f6ff ad91 	blt.w	1a00894e <_vfprintf_r+0x1026>
1a008e2c:	1c63      	adds	r3, r4, #1
1a008e2e:	4433      	add	r3, r6
1a008e30:	2230      	movs	r2, #48	; 0x30
1a008e32:	f806 2b01 	strb.w	r2, [r6], #1
1a008e36:	429e      	cmp	r6, r3
1a008e38:	d1fb      	bne.n	1a008e32 <_vfprintf_r+0x150a>
1a008e3a:	e588      	b.n	1a00894e <_vfprintf_r+0x1026>
1a008e3c:	aa28      	add	r2, sp, #160	; 0xa0
1a008e3e:	9907      	ldr	r1, [sp, #28]
1a008e40:	9805      	ldr	r0, [sp, #20]
1a008e42:	f002 fba9 	bl	1a00b598 <__sprint_r>
1a008e46:	2800      	cmp	r0, #0
1a008e48:	f47f ab06 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008e4e:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a008e52:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008e56:	f7ff bb12 	b.w	1a00847e <_vfprintf_r+0xb56>
1a008e5a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008e5e:	f7fd fdb3 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a008e62:	f7fe be6a 	b.w	1a007b3a <_vfprintf_r+0x212>
1a008e66:	aa28      	add	r2, sp, #160	; 0xa0
1a008e68:	9907      	ldr	r1, [sp, #28]
1a008e6a:	9805      	ldr	r0, [sp, #20]
1a008e6c:	f002 fb94 	bl	1a00b598 <__sprint_r>
1a008e70:	2800      	cmp	r0, #0
1a008e72:	f47f aaf1 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a008e76:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008e78:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008e7c:	e416      	b.n	1a0086ac <_vfprintf_r+0xd84>
1a008e7e:	9e02      	ldr	r6, [sp, #8]
1a008e80:	f7ff b9ad 	b.w	1a0081de <_vfprintf_r+0x8b6>
1a008e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008e86:	1cde      	adds	r6, r3, #3
1a008e88:	db01      	blt.n	1a008e8e <_vfprintf_r+0x1566>
1a008e8a:	4599      	cmp	r9, r3
1a008e8c:	da05      	bge.n	1a008e9a <_vfprintf_r+0x1572>
1a008e8e:	f1a8 0802 	sub.w	r8, r8, #2
1a008e92:	f028 0320 	bic.w	r3, r8, #32
1a008e96:	9303      	str	r3, [sp, #12]
1a008e98:	e565      	b.n	1a008966 <_vfprintf_r+0x103e>
1a008e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008e9c:	4619      	mov	r1, r3
1a008e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008ea0:	4299      	cmp	r1, r3
1a008ea2:	f300 8174 	bgt.w	1a00918e <_vfprintf_r+0x1866>
1a008ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a008ea8:	07d4      	lsls	r4, r2, #31
1a008eaa:	f140 8254 	bpl.w	1a009356 <_vfprintf_r+0x1a2e>
1a008eae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a008eb0:	189e      	adds	r6, r3, r2
1a008eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008eb4:	0558      	lsls	r0, r3, #21
1a008eb6:	d503      	bpl.n	1a008ec0 <_vfprintf_r+0x1598>
1a008eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008eba:	2b00      	cmp	r3, #0
1a008ebc:	f300 824d 	bgt.w	1a00935a <_vfprintf_r+0x1a32>
1a008ec0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008ec4:	9303      	str	r3, [sp, #12]
1a008ec6:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008eca:	2300      	movs	r3, #0
1a008ecc:	930c      	str	r3, [sp, #48]	; 0x30
1a008ece:	930f      	str	r3, [sp, #60]	; 0x3c
1a008ed0:	e5ac      	b.n	1a008a2c <_vfprintf_r+0x1104>
1a008ed2:	222d      	movs	r2, #45	; 0x2d
1a008ed4:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008ed8:	f04f 0900 	mov.w	r9, #0
1a008edc:	f7fe befb 	b.w	1a007cd6 <_vfprintf_r+0x3ae>
1a008ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008ee2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a008ee6:	18fb      	adds	r3, r7, r3
1a008ee8:	930a      	str	r3, [sp, #40]	; 0x28
1a008eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008eec:	970e      	str	r7, [sp, #56]	; 0x38
1a008eee:	465a      	mov	r2, fp
1a008ef0:	464f      	mov	r7, r9
1a008ef2:	4e59      	ldr	r6, [pc, #356]	; (1a009058 <_vfprintf_r+0x1730>)
1a008ef4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a008ef8:	f8dd a014 	ldr.w	sl, [sp, #20]
1a008efc:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a008f00:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a008f04:	4621      	mov	r1, r4
1a008f06:	2b00      	cmp	r3, #0
1a008f08:	d032      	beq.n	1a008f70 <_vfprintf_r+0x1648>
1a008f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008f0c:	2b00      	cmp	r3, #0
1a008f0e:	d16e      	bne.n	1a008fee <_vfprintf_r+0x16c6>
1a008f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008f12:	3b01      	subs	r3, #1
1a008f14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a008f18:	930f      	str	r3, [sp, #60]	; 0x3c
1a008f1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008f1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a008f1e:	6010      	str	r0, [r2, #0]
1a008f20:	3301      	adds	r3, #1
1a008f22:	4449      	add	r1, r9
1a008f24:	2b07      	cmp	r3, #7
1a008f26:	912a      	str	r1, [sp, #168]	; 0xa8
1a008f28:	f8c2 9004 	str.w	r9, [r2, #4]
1a008f2c:	9329      	str	r3, [sp, #164]	; 0xa4
1a008f2e:	dc62      	bgt.n	1a008ff6 <_vfprintf_r+0x16ce>
1a008f30:	3208      	adds	r2, #8
1a008f32:	980a      	ldr	r0, [sp, #40]	; 0x28
1a008f34:	f898 3000 	ldrb.w	r3, [r8]
1a008f38:	1bc5      	subs	r5, r0, r7
1a008f3a:	429d      	cmp	r5, r3
1a008f3c:	bfa8      	it	ge
1a008f3e:	461d      	movge	r5, r3
1a008f40:	2d00      	cmp	r5, #0
1a008f42:	dd0b      	ble.n	1a008f5c <_vfprintf_r+0x1634>
1a008f44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008f46:	6017      	str	r7, [r2, #0]
1a008f48:	3301      	adds	r3, #1
1a008f4a:	4429      	add	r1, r5
1a008f4c:	2b07      	cmp	r3, #7
1a008f4e:	912a      	str	r1, [sp, #168]	; 0xa8
1a008f50:	6055      	str	r5, [r2, #4]
1a008f52:	9329      	str	r3, [sp, #164]	; 0xa4
1a008f54:	dc5a      	bgt.n	1a00900c <_vfprintf_r+0x16e4>
1a008f56:	f898 3000 	ldrb.w	r3, [r8]
1a008f5a:	3208      	adds	r2, #8
1a008f5c:	2d00      	cmp	r5, #0
1a008f5e:	bfac      	ite	ge
1a008f60:	1b5d      	subge	r5, r3, r5
1a008f62:	461d      	movlt	r5, r3
1a008f64:	2d00      	cmp	r5, #0
1a008f66:	dc15      	bgt.n	1a008f94 <_vfprintf_r+0x166c>
1a008f68:	441f      	add	r7, r3
1a008f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008f6c:	2b00      	cmp	r3, #0
1a008f6e:	d1cc      	bne.n	1a008f0a <_vfprintf_r+0x15e2>
1a008f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008f72:	2b00      	cmp	r3, #0
1a008f74:	d13b      	bne.n	1a008fee <_vfprintf_r+0x16c6>
1a008f76:	46b9      	mov	r9, r7
1a008f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a008f7a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a008f7c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a008f80:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a008f84:	18fb      	adds	r3, r7, r3
1a008f86:	4599      	cmp	r9, r3
1a008f88:	4693      	mov	fp, r2
1a008f8a:	460c      	mov	r4, r1
1a008f8c:	bf28      	it	cs
1a008f8e:	4699      	movcs	r9, r3
1a008f90:	f7ff bb93 	b.w	1a0086ba <_vfprintf_r+0xd92>
1a008f94:	2d10      	cmp	r5, #16
1a008f96:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a008f98:	dd1c      	ble.n	1a008fd4 <_vfprintf_r+0x16ac>
1a008f9a:	2410      	movs	r4, #16
1a008f9c:	e004      	b.n	1a008fa8 <_vfprintf_r+0x1680>
1a008f9e:	3d10      	subs	r5, #16
1a008fa0:	2d10      	cmp	r5, #16
1a008fa2:	f102 0208 	add.w	r2, r2, #8
1a008fa6:	dd15      	ble.n	1a008fd4 <_vfprintf_r+0x16ac>
1a008fa8:	3001      	adds	r0, #1
1a008faa:	3110      	adds	r1, #16
1a008fac:	2807      	cmp	r0, #7
1a008fae:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a008fb2:	e9c2 6400 	strd	r6, r4, [r2]
1a008fb6:	ddf2      	ble.n	1a008f9e <_vfprintf_r+0x1676>
1a008fb8:	aa28      	add	r2, sp, #160	; 0xa0
1a008fba:	4659      	mov	r1, fp
1a008fbc:	4650      	mov	r0, sl
1a008fbe:	f002 faeb 	bl	1a00b598 <__sprint_r>
1a008fc2:	2800      	cmp	r0, #0
1a008fc4:	f47f ae30 	bne.w	1a008c28 <_vfprintf_r+0x1300>
1a008fc8:	3d10      	subs	r5, #16
1a008fca:	2d10      	cmp	r5, #16
1a008fcc:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a008fd0:	aa2b      	add	r2, sp, #172	; 0xac
1a008fd2:	dce9      	bgt.n	1a008fa8 <_vfprintf_r+0x1680>
1a008fd4:	3001      	adds	r0, #1
1a008fd6:	4429      	add	r1, r5
1a008fd8:	2807      	cmp	r0, #7
1a008fda:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a008fde:	e9c2 6500 	strd	r6, r5, [r2]
1a008fe2:	dc49      	bgt.n	1a009078 <_vfprintf_r+0x1750>
1a008fe4:	f898 3000 	ldrb.w	r3, [r8]
1a008fe8:	3208      	adds	r2, #8
1a008fea:	441f      	add	r7, r3
1a008fec:	e7bd      	b.n	1a008f6a <_vfprintf_r+0x1642>
1a008fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008ff0:	3b01      	subs	r3, #1
1a008ff2:	930c      	str	r3, [sp, #48]	; 0x30
1a008ff4:	e791      	b.n	1a008f1a <_vfprintf_r+0x15f2>
1a008ff6:	aa28      	add	r2, sp, #160	; 0xa0
1a008ff8:	4659      	mov	r1, fp
1a008ffa:	4650      	mov	r0, sl
1a008ffc:	f002 facc 	bl	1a00b598 <__sprint_r>
1a009000:	2800      	cmp	r0, #0
1a009002:	f47f ae11 	bne.w	1a008c28 <_vfprintf_r+0x1300>
1a009006:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a009008:	aa2b      	add	r2, sp, #172	; 0xac
1a00900a:	e792      	b.n	1a008f32 <_vfprintf_r+0x160a>
1a00900c:	aa28      	add	r2, sp, #160	; 0xa0
1a00900e:	4659      	mov	r1, fp
1a009010:	4650      	mov	r0, sl
1a009012:	f002 fac1 	bl	1a00b598 <__sprint_r>
1a009016:	2800      	cmp	r0, #0
1a009018:	f47f ae06 	bne.w	1a008c28 <_vfprintf_r+0x1300>
1a00901c:	f898 3000 	ldrb.w	r3, [r8]
1a009020:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a009022:	aa2b      	add	r2, sp, #172	; 0xac
1a009024:	e79a      	b.n	1a008f5c <_vfprintf_r+0x1634>
1a009026:	222d      	movs	r2, #45	; 0x2d
1a009028:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a00902c:	f7ff b87d 	b.w	1a00812a <_vfprintf_r+0x802>
1a009030:	9b02      	ldr	r3, [sp, #8]
1a009032:	930a      	str	r3, [sp, #40]	; 0x28
1a009034:	2300      	movs	r3, #0
1a009036:	9309      	str	r3, [sp, #36]	; 0x24
1a009038:	9202      	str	r2, [sp, #8]
1a00903a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a00903e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a009042:	931d      	str	r3, [sp, #116]	; 0x74
1a009044:	232d      	movs	r3, #45	; 0x2d
1a009046:	911c      	str	r1, [sp, #112]	; 0x70
1a009048:	931e      	str	r3, [sp, #120]	; 0x78
1a00904a:	e674      	b.n	1a008d36 <_vfprintf_r+0x140e>
1a00904c:	1a00c120 	.word	0x1a00c120
1a009050:	40300000 	.word	0x40300000
1a009054:	3fe00000 	.word	0x3fe00000
1a009058:	1a00c164 	.word	0x1a00c164
1a00905c:	aa28      	add	r2, sp, #160	; 0xa0
1a00905e:	9907      	ldr	r1, [sp, #28]
1a009060:	9805      	ldr	r0, [sp, #20]
1a009062:	f002 fa99 	bl	1a00b598 <__sprint_r>
1a009066:	2800      	cmp	r0, #0
1a009068:	f47f a9f6 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a00906c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00906e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a009070:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a009074:	f7ff bbeb 	b.w	1a00884e <_vfprintf_r+0xf26>
1a009078:	aa28      	add	r2, sp, #160	; 0xa0
1a00907a:	4659      	mov	r1, fp
1a00907c:	4650      	mov	r0, sl
1a00907e:	f002 fa8b 	bl	1a00b598 <__sprint_r>
1a009082:	2800      	cmp	r0, #0
1a009084:	f47f add0 	bne.w	1a008c28 <_vfprintf_r+0x1300>
1a009088:	f898 3000 	ldrb.w	r3, [r8]
1a00908c:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00908e:	aa2b      	add	r2, sp, #172	; 0xac
1a009090:	441f      	add	r7, r3
1a009092:	e76a      	b.n	1a008f6a <_vfprintf_r+0x1642>
1a009094:	aa28      	add	r2, sp, #160	; 0xa0
1a009096:	9907      	ldr	r1, [sp, #28]
1a009098:	9805      	ldr	r0, [sp, #20]
1a00909a:	f002 fa7d 	bl	1a00b598 <__sprint_r>
1a00909e:	2800      	cmp	r0, #0
1a0090a0:	f47f a9da 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a0090a4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0090a6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0090aa:	f7ff baf7 	b.w	1a00869c <_vfprintf_r+0xd74>
1a0090ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0090b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0090b2:	1aff      	subs	r7, r7, r3
1a0090b4:	461a      	mov	r2, r3
1a0090b6:	4638      	mov	r0, r7
1a0090b8:	f002 f9f8 	bl	1a00b4ac <strncpy>
1a0090bc:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0090c0:	b10b      	cbz	r3, 1a0090c6 <_vfprintf_r+0x179e>
1a0090c2:	f108 0801 	add.w	r8, r8, #1
1a0090c6:	220a      	movs	r2, #10
1a0090c8:	2300      	movs	r3, #0
1a0090ca:	4620      	mov	r0, r4
1a0090cc:	4629      	mov	r1, r5
1a0090ce:	f04f 0a00 	mov.w	sl, #0
1a0090d2:	f7fc ffb9 	bl	1a006048 <__aeabi_uldivmod>
1a0090d6:	f7ff b8ab 	b.w	1a008230 <_vfprintf_r+0x908>
1a0090da:	aa26      	add	r2, sp, #152	; 0x98
1a0090dc:	ab23      	add	r3, sp, #140	; 0x8c
1a0090de:	e9cd 3200 	strd	r3, r2, [sp]
1a0090e2:	2103      	movs	r1, #3
1a0090e4:	ab22      	add	r3, sp, #136	; 0x88
1a0090e6:	464a      	mov	r2, r9
1a0090e8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0090ec:	9805      	ldr	r0, [sp, #20]
1a0090ee:	f000 fb03 	bl	1a0096f8 <_dtoa_r>
1a0090f2:	7803      	ldrb	r3, [r0, #0]
1a0090f4:	2b30      	cmp	r3, #48	; 0x30
1a0090f6:	4607      	mov	r7, r0
1a0090f8:	f000 8161 	beq.w	1a0093be <_vfprintf_r+0x1a96>
1a0090fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0090fe:	444b      	add	r3, r9
1a009100:	18fc      	adds	r4, r7, r3
1a009102:	2200      	movs	r2, #0
1a009104:	2300      	movs	r3, #0
1a009106:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00910a:	f7fc ff1b 	bl	1a005f44 <__aeabi_dcmpeq>
1a00910e:	b108      	cbz	r0, 1a009114 <_vfprintf_r+0x17ec>
1a009110:	4626      	mov	r6, r4
1a009112:	e41c      	b.n	1a00894e <_vfprintf_r+0x1026>
1a009114:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a009116:	42a6      	cmp	r6, r4
1a009118:	f4bf ac19 	bcs.w	1a00894e <_vfprintf_r+0x1026>
1a00911c:	2230      	movs	r2, #48	; 0x30
1a00911e:	1c73      	adds	r3, r6, #1
1a009120:	9326      	str	r3, [sp, #152]	; 0x98
1a009122:	7032      	strb	r2, [r6, #0]
1a009124:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a009126:	42b4      	cmp	r4, r6
1a009128:	d8f9      	bhi.n	1a00911e <_vfprintf_r+0x17f6>
1a00912a:	e410      	b.n	1a00894e <_vfprintf_r+0x1026>
1a00912c:	aa28      	add	r2, sp, #160	; 0xa0
1a00912e:	9907      	ldr	r1, [sp, #28]
1a009130:	9805      	ldr	r0, [sp, #20]
1a009132:	f002 fa31 	bl	1a00b598 <__sprint_r>
1a009136:	2800      	cmp	r0, #0
1a009138:	f47f a98e 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a00913c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00913e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a009140:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a009144:	f7ff bad1 	b.w	1a0086ea <_vfprintf_r+0xdc2>
1a009148:	464e      	mov	r6, r9
1a00914a:	f8cd 900c 	str.w	r9, [sp, #12]
1a00914e:	9408      	str	r4, [sp, #32]
1a009150:	4681      	mov	r9, r0
1a009152:	900c      	str	r0, [sp, #48]	; 0x30
1a009154:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a009158:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00915c:	f7fe bdb9 	b.w	1a007cd2 <_vfprintf_r+0x3aa>
1a009160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a009164:	f003 0301 	and.w	r3, r3, #1
1a009168:	2a00      	cmp	r2, #0
1a00916a:	ea43 0309 	orr.w	r3, r3, r9
1a00916e:	f340 8142 	ble.w	1a0093f6 <_vfprintf_r+0x1ace>
1a009172:	2b00      	cmp	r3, #0
1a009174:	f040 8119 	bne.w	1a0093aa <_vfprintf_r+0x1a82>
1a009178:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a00917a:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00917e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009180:	055a      	lsls	r2, r3, #21
1a009182:	f100 80ec 	bmi.w	1a00935e <_vfprintf_r+0x1a36>
1a009186:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00918a:	9303      	str	r3, [sp, #12]
1a00918c:	e69d      	b.n	1a008eca <_vfprintf_r+0x15a2>
1a00918e:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a009192:	189e      	adds	r6, r3, r2
1a009194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a009196:	2b00      	cmp	r3, #0
1a009198:	f340 811e 	ble.w	1a0093d8 <_vfprintf_r+0x1ab0>
1a00919c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0091a0:	e7ed      	b.n	1a00917e <_vfprintf_r+0x1856>
1a0091a2:	aa28      	add	r2, sp, #160	; 0xa0
1a0091a4:	9907      	ldr	r1, [sp, #28]
1a0091a6:	9805      	ldr	r0, [sp, #20]
1a0091a8:	f002 f9f6 	bl	1a00b598 <__sprint_r>
1a0091ac:	2800      	cmp	r0, #0
1a0091ae:	f47f a953 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a0091b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0091b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0091b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0091b8:	1ad3      	subs	r3, r2, r3
1a0091ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0091be:	f7ff baac 	b.w	1a00871a <_vfprintf_r+0xdf2>
1a0091c2:	eb07 0409 	add.w	r4, r7, r9
1a0091c6:	e79c      	b.n	1a009102 <_vfprintf_r+0x17da>
1a0091c8:	425d      	negs	r5, r3
1a0091ca:	3310      	adds	r3, #16
1a0091cc:	4ba7      	ldr	r3, [pc, #668]	; (1a00946c <_vfprintf_r+0x1b44>)
1a0091ce:	da63      	bge.n	1a009298 <_vfprintf_r+0x1970>
1a0091d0:	4619      	mov	r1, r3
1a0091d2:	2610      	movs	r6, #16
1a0091d4:	4623      	mov	r3, r4
1a0091d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a0091da:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0091de:	460c      	mov	r4, r1
1a0091e0:	e004      	b.n	1a0091ec <_vfprintf_r+0x18c4>
1a0091e2:	f10b 0b08 	add.w	fp, fp, #8
1a0091e6:	3d10      	subs	r5, #16
1a0091e8:	2d10      	cmp	r5, #16
1a0091ea:	dd52      	ble.n	1a009292 <_vfprintf_r+0x196a>
1a0091ec:	3201      	adds	r2, #1
1a0091ee:	3310      	adds	r3, #16
1a0091f0:	2a07      	cmp	r2, #7
1a0091f2:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0091f6:	e9cb 4600 	strd	r4, r6, [fp]
1a0091fa:	ddf2      	ble.n	1a0091e2 <_vfprintf_r+0x18ba>
1a0091fc:	aa28      	add	r2, sp, #160	; 0xa0
1a0091fe:	4649      	mov	r1, r9
1a009200:	4640      	mov	r0, r8
1a009202:	f002 f9c9 	bl	1a00b598 <__sprint_r>
1a009206:	2800      	cmp	r0, #0
1a009208:	f47f a9c0 	bne.w	1a00858c <_vfprintf_r+0xc64>
1a00920c:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a009210:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a009214:	e7e7      	b.n	1a0091e6 <_vfprintf_r+0x18be>
1a009216:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a00921a:	07db      	lsls	r3, r3, #31
1a00921c:	d407      	bmi.n	1a00922e <_vfprintf_r+0x1906>
1a00921e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a009222:	059f      	lsls	r7, r3, #22
1a009224:	d403      	bmi.n	1a00922e <_vfprintf_r+0x1906>
1a009226:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00922a:	f7fd fbcd 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a00922e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a009232:	9304      	str	r3, [sp, #16]
1a009234:	f7ff b9bb 	b.w	1a0085ae <_vfprintf_r+0xc86>
1a009238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00923a:	9326      	str	r3, [sp, #152]	; 0x98
1a00923c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00923e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a009242:	7bd9      	ldrb	r1, [r3, #15]
1a009244:	428a      	cmp	r2, r1
1a009246:	4633      	mov	r3, r6
1a009248:	d109      	bne.n	1a00925e <_vfprintf_r+0x1936>
1a00924a:	2030      	movs	r0, #48	; 0x30
1a00924c:	f803 0c01 	strb.w	r0, [r3, #-1]
1a009250:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a009252:	1e5a      	subs	r2, r3, #1
1a009254:	9226      	str	r2, [sp, #152]	; 0x98
1a009256:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a00925a:	4291      	cmp	r1, r2
1a00925c:	d0f6      	beq.n	1a00924c <_vfprintf_r+0x1924>
1a00925e:	2a39      	cmp	r2, #57	; 0x39
1a009260:	bf0b      	itete	eq
1a009262:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a009264:	3201      	addne	r2, #1
1a009266:	7a92      	ldrbeq	r2, [r2, #10]
1a009268:	b2d2      	uxtbne	r2, r2
1a00926a:	f803 2c01 	strb.w	r2, [r3, #-1]
1a00926e:	f7ff bb6e 	b.w	1a00894e <_vfprintf_r+0x1026>
1a009272:	2330      	movs	r3, #48	; 0x30
1a009274:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a009278:	2378      	movs	r3, #120	; 0x78
1a00927a:	e53e      	b.n	1a008cfa <_vfprintf_r+0x13d2>
1a00927c:	f109 0101 	add.w	r1, r9, #1
1a009280:	9805      	ldr	r0, [sp, #20]
1a009282:	f7fd fba3 	bl	1a0069cc <_malloc_r>
1a009286:	4607      	mov	r7, r0
1a009288:	2800      	cmp	r0, #0
1a00928a:	f000 80d5 	beq.w	1a009438 <_vfprintf_r+0x1b10>
1a00928e:	9009      	str	r0, [sp, #36]	; 0x24
1a009290:	e540      	b.n	1a008d14 <_vfprintf_r+0x13ec>
1a009292:	4621      	mov	r1, r4
1a009294:	461c      	mov	r4, r3
1a009296:	460b      	mov	r3, r1
1a009298:	3201      	adds	r2, #1
1a00929a:	442c      	add	r4, r5
1a00929c:	2a07      	cmp	r2, #7
1a00929e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0092a2:	e9cb 3500 	strd	r3, r5, [fp]
1a0092a6:	f77f aaea 	ble.w	1a00887e <_vfprintf_r+0xf56>
1a0092aa:	aa28      	add	r2, sp, #160	; 0xa0
1a0092ac:	9907      	ldr	r1, [sp, #28]
1a0092ae:	9805      	ldr	r0, [sp, #20]
1a0092b0:	f002 f972 	bl	1a00b598 <__sprint_r>
1a0092b4:	2800      	cmp	r0, #0
1a0092b6:	f47f a8cf 	bne.w	1a008458 <_vfprintf_r+0xb30>
1a0092ba:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0092be:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0092c2:	f7ff b8df 	b.w	1a008484 <_vfprintf_r+0xb5c>
1a0092c6:	f109 0401 	add.w	r4, r9, #1
1a0092ca:	a926      	add	r1, sp, #152	; 0x98
1a0092cc:	ab23      	add	r3, sp, #140	; 0x8c
1a0092ce:	e9cd 3100 	strd	r3, r1, [sp]
1a0092d2:	4622      	mov	r2, r4
1a0092d4:	ab22      	add	r3, sp, #136	; 0x88
1a0092d6:	2102      	movs	r1, #2
1a0092d8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0092dc:	9805      	ldr	r0, [sp, #20]
1a0092de:	f000 fa0b 	bl	1a0096f8 <_dtoa_r>
1a0092e2:	4607      	mov	r7, r0
1a0092e4:	443c      	add	r4, r7
1a0092e6:	e70c      	b.n	1a009102 <_vfprintf_r+0x17da>
1a0092e8:	f04f 0906 	mov.w	r9, #6
1a0092ec:	f7ff bb03 	b.w	1a0088f6 <_vfprintf_r+0xfce>
1a0092f0:	a822      	add	r0, sp, #136	; 0x88
1a0092f2:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0092f6:	f002 f8a3 	bl	1a00b440 <frexp>
1a0092fa:	2200      	movs	r2, #0
1a0092fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a009300:	ec51 0b10 	vmov	r0, r1, d0
1a009304:	f7fc fbb6 	bl	1a005a74 <__aeabi_dmul>
1a009308:	2200      	movs	r2, #0
1a00930a:	2300      	movs	r3, #0
1a00930c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a009310:	f7fc fe18 	bl	1a005f44 <__aeabi_dcmpeq>
1a009314:	b108      	cbz	r0, 1a00931a <_vfprintf_r+0x19f2>
1a009316:	2301      	movs	r3, #1
1a009318:	9322      	str	r3, [sp, #136]	; 0x88
1a00931a:	4b55      	ldr	r3, [pc, #340]	; (1a009470 <_vfprintf_r+0x1b48>)
1a00931c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00931e:	e529      	b.n	1a008d74 <_vfprintf_r+0x144c>
1a009320:	2900      	cmp	r1, #0
1a009322:	d17b      	bne.n	1a00941c <_vfprintf_r+0x1af4>
1a009324:	2330      	movs	r3, #48	; 0x30
1a009326:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a00932a:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a00932e:	3230      	adds	r2, #48	; 0x30
1a009330:	f803 2b01 	strb.w	r2, [r3], #1
1a009334:	aa24      	add	r2, sp, #144	; 0x90
1a009336:	1a9b      	subs	r3, r3, r2
1a009338:	9316      	str	r3, [sp, #88]	; 0x58
1a00933a:	f7ff bb61 	b.w	1a008a00 <_vfprintf_r+0x10d8>
1a00933e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a009340:	4f4c      	ldr	r7, [pc, #304]	; (1a009474 <_vfprintf_r+0x1b4c>)
1a009342:	2b00      	cmp	r3, #0
1a009344:	bfb6      	itet	lt
1a009346:	222d      	movlt	r2, #45	; 0x2d
1a009348:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a00934c:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a009350:	4b49      	ldr	r3, [pc, #292]	; (1a009478 <_vfprintf_r+0x1b50>)
1a009352:	f7fe beec 	b.w	1a00812e <_vfprintf_r+0x806>
1a009356:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a009358:	e5ab      	b.n	1a008eb2 <_vfprintf_r+0x158a>
1a00935a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a00935e:	9818      	ldr	r0, [sp, #96]	; 0x60
1a009360:	2200      	movs	r2, #0
1a009362:	920c      	str	r2, [sp, #48]	; 0x30
1a009364:	920f      	str	r2, [sp, #60]	; 0x3c
1a009366:	7803      	ldrb	r3, [r0, #0]
1a009368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00936a:	2bff      	cmp	r3, #255	; 0xff
1a00936c:	d00c      	beq.n	1a009388 <_vfprintf_r+0x1a60>
1a00936e:	4293      	cmp	r3, r2
1a009370:	da0a      	bge.n	1a009388 <_vfprintf_r+0x1a60>
1a009372:	7841      	ldrb	r1, [r0, #1]
1a009374:	1ad2      	subs	r2, r2, r3
1a009376:	b1a1      	cbz	r1, 1a0093a2 <_vfprintf_r+0x1a7a>
1a009378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00937a:	3301      	adds	r3, #1
1a00937c:	930f      	str	r3, [sp, #60]	; 0x3c
1a00937e:	460b      	mov	r3, r1
1a009380:	2bff      	cmp	r3, #255	; 0xff
1a009382:	f100 0001 	add.w	r0, r0, #1
1a009386:	d1f2      	bne.n	1a00936e <_vfprintf_r+0x1a46>
1a009388:	920e      	str	r2, [sp, #56]	; 0x38
1a00938a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00938c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00938e:	9018      	str	r0, [sp, #96]	; 0x60
1a009390:	4413      	add	r3, r2
1a009392:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a009394:	fb02 6603 	mla	r6, r2, r3, r6
1a009398:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00939c:	9303      	str	r3, [sp, #12]
1a00939e:	f7ff bb45 	b.w	1a008a2c <_vfprintf_r+0x1104>
1a0093a2:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0093a4:	3101      	adds	r1, #1
1a0093a6:	910c      	str	r1, [sp, #48]	; 0x30
1a0093a8:	e7df      	b.n	1a00936a <_vfprintf_r+0x1a42>
1a0093aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0093ac:	18d6      	adds	r6, r2, r3
1a0093ae:	444e      	add	r6, r9
1a0093b0:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0093b4:	e6e3      	b.n	1a00917e <_vfprintf_r+0x1856>
1a0093b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0093ba:	f7ff b8ec 	b.w	1a008596 <_vfprintf_r+0xc6e>
1a0093be:	2200      	movs	r2, #0
1a0093c0:	2300      	movs	r3, #0
1a0093c2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0093c6:	f7fc fdbd 	bl	1a005f44 <__aeabi_dcmpeq>
1a0093ca:	2800      	cmp	r0, #0
1a0093cc:	f47f ae96 	bne.w	1a0090fc <_vfprintf_r+0x17d4>
1a0093d0:	f1c9 0301 	rsb	r3, r9, #1
1a0093d4:	9322      	str	r3, [sp, #136]	; 0x88
1a0093d6:	e692      	b.n	1a0090fe <_vfprintf_r+0x17d6>
1a0093d8:	f1c3 0301 	rsb	r3, r3, #1
1a0093dc:	441e      	add	r6, r3
1a0093de:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0093e2:	9303      	str	r3, [sp, #12]
1a0093e4:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0093e8:	e56f      	b.n	1a008eca <_vfprintf_r+0x15a2>
1a0093ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0093ec:	07dd      	lsls	r5, r3, #31
1a0093ee:	f57f ab10 	bpl.w	1a008a12 <_vfprintf_r+0x10ea>
1a0093f2:	f7ff bb0c 	b.w	1a008a0e <_vfprintf_r+0x10e6>
1a0093f6:	b92b      	cbnz	r3, 1a009404 <_vfprintf_r+0x1adc>
1a0093f8:	2301      	movs	r3, #1
1a0093fa:	9303      	str	r3, [sp, #12]
1a0093fc:	461e      	mov	r6, r3
1a0093fe:	f04f 0866 	mov.w	r8, #102	; 0x66
1a009402:	e562      	b.n	1a008eca <_vfprintf_r+0x15a2>
1a009404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a009406:	1c5e      	adds	r6, r3, #1
1a009408:	444e      	add	r6, r9
1a00940a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00940e:	9303      	str	r3, [sp, #12]
1a009410:	f04f 0866 	mov.w	r8, #102	; 0x66
1a009414:	e559      	b.n	1a008eca <_vfprintf_r+0x15a2>
1a009416:	465a      	mov	r2, fp
1a009418:	f7ff bb3f 	b.w	1a008a9a <_vfprintf_r+0x1172>
1a00941c:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a009420:	e785      	b.n	1a00932e <_vfprintf_r+0x1a06>
1a009422:	9b08      	ldr	r3, [sp, #32]
1a009424:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a009428:	f853 0b04 	ldr.w	r0, [r3], #4
1a00942c:	9308      	str	r3, [sp, #32]
1a00942e:	4692      	mov	sl, r2
1a009430:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a009434:	f7fe bafc 	b.w	1a007a30 <_vfprintf_r+0x108>
1a009438:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00943c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a009440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009444:	f8a9 300c 	strh.w	r3, [r9, #12]
1a009448:	f7ff b8a5 	b.w	1a008596 <_vfprintf_r+0xc6e>
1a00944c:	461e      	mov	r6, r3
1a00944e:	f7fe bc15 	b.w	1a007c7c <_vfprintf_r+0x354>
1a009452:	461e      	mov	r6, r3
1a009454:	f7fe bc5e 	b.w	1a007d14 <_vfprintf_r+0x3ec>
1a009458:	461e      	mov	r6, r3
1a00945a:	f7fe bc48 	b.w	1a007cee <_vfprintf_r+0x3c6>
1a00945e:	464c      	mov	r4, r9
1a009460:	443c      	add	r4, r7
1a009462:	e64e      	b.n	1a009102 <_vfprintf_r+0x17da>
1a009464:	2302      	movs	r3, #2
1a009466:	9316      	str	r3, [sp, #88]	; 0x58
1a009468:	f7ff baca 	b.w	1a008a00 <_vfprintf_r+0x10d8>
1a00946c:	1a00c164 	.word	0x1a00c164
1a009470:	1a00c134 	.word	0x1a00c134
1a009474:	1a00c118 	.word	0x1a00c118
1a009478:	1a00c11c 	.word	0x1a00c11c

1a00947c <__sbprintf>:
1a00947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009480:	460c      	mov	r4, r1
1a009482:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a009486:	8989      	ldrh	r1, [r1, #12]
1a009488:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a00948a:	89e5      	ldrh	r5, [r4, #14]
1a00948c:	9619      	str	r6, [sp, #100]	; 0x64
1a00948e:	f021 0102 	bic.w	r1, r1, #2
1a009492:	4606      	mov	r6, r0
1a009494:	69e0      	ldr	r0, [r4, #28]
1a009496:	f8ad 100c 	strh.w	r1, [sp, #12]
1a00949a:	4617      	mov	r7, r2
1a00949c:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a0094a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a0094a2:	f8ad 500e 	strh.w	r5, [sp, #14]
1a0094a6:	4698      	mov	r8, r3
1a0094a8:	ad1a      	add	r5, sp, #104	; 0x68
1a0094aa:	2300      	movs	r3, #0
1a0094ac:	9007      	str	r0, [sp, #28]
1a0094ae:	a816      	add	r0, sp, #88	; 0x58
1a0094b0:	9209      	str	r2, [sp, #36]	; 0x24
1a0094b2:	9306      	str	r3, [sp, #24]
1a0094b4:	9500      	str	r5, [sp, #0]
1a0094b6:	9504      	str	r5, [sp, #16]
1a0094b8:	9102      	str	r1, [sp, #8]
1a0094ba:	9105      	str	r1, [sp, #20]
1a0094bc:	f7fd fa7e 	bl	1a0069bc <__retarget_lock_init_recursive>
1a0094c0:	4643      	mov	r3, r8
1a0094c2:	463a      	mov	r2, r7
1a0094c4:	4669      	mov	r1, sp
1a0094c6:	4630      	mov	r0, r6
1a0094c8:	f7fe fa2e 	bl	1a007928 <_vfprintf_r>
1a0094cc:	1e05      	subs	r5, r0, #0
1a0094ce:	db07      	blt.n	1a0094e0 <__sbprintf+0x64>
1a0094d0:	4630      	mov	r0, r6
1a0094d2:	4669      	mov	r1, sp
1a0094d4:	f7fd f84c 	bl	1a006570 <_fflush_r>
1a0094d8:	2800      	cmp	r0, #0
1a0094da:	bf18      	it	ne
1a0094dc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0094e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a0094e4:	065b      	lsls	r3, r3, #25
1a0094e6:	d503      	bpl.n	1a0094f0 <__sbprintf+0x74>
1a0094e8:	89a3      	ldrh	r3, [r4, #12]
1a0094ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0094ee:	81a3      	strh	r3, [r4, #12]
1a0094f0:	9816      	ldr	r0, [sp, #88]	; 0x58
1a0094f2:	f7fd fa65 	bl	1a0069c0 <__retarget_lock_close_recursive>
1a0094f6:	4628      	mov	r0, r5
1a0094f8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a0094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a009500 <__swsetup_r>:
1a009500:	b538      	push	{r3, r4, r5, lr}
1a009502:	4b32      	ldr	r3, [pc, #200]	; (1a0095cc <__swsetup_r+0xcc>)
1a009504:	681b      	ldr	r3, [r3, #0]
1a009506:	4605      	mov	r5, r0
1a009508:	460c      	mov	r4, r1
1a00950a:	b10b      	cbz	r3, 1a009510 <__swsetup_r+0x10>
1a00950c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a00950e:	b312      	cbz	r2, 1a009556 <__swsetup_r+0x56>
1a009510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a009514:	b293      	uxth	r3, r2
1a009516:	0718      	lsls	r0, r3, #28
1a009518:	d525      	bpl.n	1a009566 <__swsetup_r+0x66>
1a00951a:	6920      	ldr	r0, [r4, #16]
1a00951c:	2800      	cmp	r0, #0
1a00951e:	d02d      	beq.n	1a00957c <__swsetup_r+0x7c>
1a009520:	f013 0201 	ands.w	r2, r3, #1
1a009524:	d007      	beq.n	1a009536 <__swsetup_r+0x36>
1a009526:	6963      	ldr	r3, [r4, #20]
1a009528:	2200      	movs	r2, #0
1a00952a:	425b      	negs	r3, r3
1a00952c:	61a3      	str	r3, [r4, #24]
1a00952e:	60a2      	str	r2, [r4, #8]
1a009530:	b138      	cbz	r0, 1a009542 <__swsetup_r+0x42>
1a009532:	2000      	movs	r0, #0
1a009534:	bd38      	pop	{r3, r4, r5, pc}
1a009536:	0799      	lsls	r1, r3, #30
1a009538:	bf58      	it	pl
1a00953a:	6962      	ldrpl	r2, [r4, #20]
1a00953c:	60a2      	str	r2, [r4, #8]
1a00953e:	2800      	cmp	r0, #0
1a009540:	d1f7      	bne.n	1a009532 <__swsetup_r+0x32>
1a009542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009546:	061a      	lsls	r2, r3, #24
1a009548:	d5f4      	bpl.n	1a009534 <__swsetup_r+0x34>
1a00954a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00954e:	81a3      	strh	r3, [r4, #12]
1a009550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009554:	bd38      	pop	{r3, r4, r5, pc}
1a009556:	4618      	mov	r0, r3
1a009558:	f7fd f866 	bl	1a006628 <__sinit>
1a00955c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a009560:	b293      	uxth	r3, r2
1a009562:	0718      	lsls	r0, r3, #28
1a009564:	d4d9      	bmi.n	1a00951a <__swsetup_r+0x1a>
1a009566:	06d9      	lsls	r1, r3, #27
1a009568:	d528      	bpl.n	1a0095bc <__swsetup_r+0xbc>
1a00956a:	0758      	lsls	r0, r3, #29
1a00956c:	d412      	bmi.n	1a009594 <__swsetup_r+0x94>
1a00956e:	6920      	ldr	r0, [r4, #16]
1a009570:	f042 0308 	orr.w	r3, r2, #8
1a009574:	81a3      	strh	r3, [r4, #12]
1a009576:	b29b      	uxth	r3, r3
1a009578:	2800      	cmp	r0, #0
1a00957a:	d1d1      	bne.n	1a009520 <__swsetup_r+0x20>
1a00957c:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a009580:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a009584:	d0cc      	beq.n	1a009520 <__swsetup_r+0x20>
1a009586:	4628      	mov	r0, r5
1a009588:	4621      	mov	r1, r4
1a00958a:	f001 f995 	bl	1a00a8b8 <__smakebuf_r>
1a00958e:	89a3      	ldrh	r3, [r4, #12]
1a009590:	6920      	ldr	r0, [r4, #16]
1a009592:	e7c5      	b.n	1a009520 <__swsetup_r+0x20>
1a009594:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a009596:	b151      	cbz	r1, 1a0095ae <__swsetup_r+0xae>
1a009598:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00959c:	4299      	cmp	r1, r3
1a00959e:	d004      	beq.n	1a0095aa <__swsetup_r+0xaa>
1a0095a0:	4628      	mov	r0, r5
1a0095a2:	f7fd f8c7 	bl	1a006734 <_free_r>
1a0095a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0095aa:	2300      	movs	r3, #0
1a0095ac:	6323      	str	r3, [r4, #48]	; 0x30
1a0095ae:	2300      	movs	r3, #0
1a0095b0:	6920      	ldr	r0, [r4, #16]
1a0095b2:	6063      	str	r3, [r4, #4]
1a0095b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a0095b8:	6020      	str	r0, [r4, #0]
1a0095ba:	e7d9      	b.n	1a009570 <__swsetup_r+0x70>
1a0095bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a0095c0:	2309      	movs	r3, #9
1a0095c2:	602b      	str	r3, [r5, #0]
1a0095c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0095c8:	81a2      	strh	r2, [r4, #12]
1a0095ca:	bd38      	pop	{r3, r4, r5, pc}
1a0095cc:	100000dc 	.word	0x100000dc

1a0095d0 <quorem>:
1a0095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0095d4:	6903      	ldr	r3, [r0, #16]
1a0095d6:	690f      	ldr	r7, [r1, #16]
1a0095d8:	42bb      	cmp	r3, r7
1a0095da:	b083      	sub	sp, #12
1a0095dc:	f2c0 8086 	blt.w	1a0096ec <quorem+0x11c>
1a0095e0:	3f01      	subs	r7, #1
1a0095e2:	f101 0614 	add.w	r6, r1, #20
1a0095e6:	f100 0a14 	add.w	sl, r0, #20
1a0095ea:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a0095ee:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a0095f2:	00bc      	lsls	r4, r7, #2
1a0095f4:	3301      	adds	r3, #1
1a0095f6:	9400      	str	r4, [sp, #0]
1a0095f8:	eb06 0904 	add.w	r9, r6, r4
1a0095fc:	429a      	cmp	r2, r3
1a0095fe:	4454      	add	r4, sl
1a009600:	fbb2 f8f3 	udiv	r8, r2, r3
1a009604:	9401      	str	r4, [sp, #4]
1a009606:	d33a      	bcc.n	1a00967e <quorem+0xae>
1a009608:	2500      	movs	r5, #0
1a00960a:	462a      	mov	r2, r5
1a00960c:	46b6      	mov	lr, r6
1a00960e:	46d4      	mov	ip, sl
1a009610:	f85e 4b04 	ldr.w	r4, [lr], #4
1a009614:	f8dc 3000 	ldr.w	r3, [ip]
1a009618:	fa1f fb84 	uxth.w	fp, r4
1a00961c:	fb08 550b 	mla	r5, r8, fp, r5
1a009620:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a009624:	0c24      	lsrs	r4, r4, #16
1a009626:	fb08 b404 	mla	r4, r8, r4, fp
1a00962a:	b2ad      	uxth	r5, r5
1a00962c:	1b55      	subs	r5, r2, r5
1a00962e:	b2a2      	uxth	r2, r4
1a009630:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a009634:	fa15 f383 	uxtah	r3, r5, r3
1a009638:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00963c:	b29b      	uxth	r3, r3
1a00963e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a009642:	45f1      	cmp	r9, lr
1a009644:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a009648:	f84c 3b04 	str.w	r3, [ip], #4
1a00964c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a009650:	d2de      	bcs.n	1a009610 <quorem+0x40>
1a009652:	9b00      	ldr	r3, [sp, #0]
1a009654:	f85a 3003 	ldr.w	r3, [sl, r3]
1a009658:	b98b      	cbnz	r3, 1a00967e <quorem+0xae>
1a00965a:	9a01      	ldr	r2, [sp, #4]
1a00965c:	1f13      	subs	r3, r2, #4
1a00965e:	459a      	cmp	sl, r3
1a009660:	d20c      	bcs.n	1a00967c <quorem+0xac>
1a009662:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a009666:	b94b      	cbnz	r3, 1a00967c <quorem+0xac>
1a009668:	f1a2 0308 	sub.w	r3, r2, #8
1a00966c:	e002      	b.n	1a009674 <quorem+0xa4>
1a00966e:	681a      	ldr	r2, [r3, #0]
1a009670:	3b04      	subs	r3, #4
1a009672:	b91a      	cbnz	r2, 1a00967c <quorem+0xac>
1a009674:	459a      	cmp	sl, r3
1a009676:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a00967a:	d3f8      	bcc.n	1a00966e <quorem+0x9e>
1a00967c:	6107      	str	r7, [r0, #16]
1a00967e:	4604      	mov	r4, r0
1a009680:	f001 fc30 	bl	1a00aee4 <__mcmp>
1a009684:	2800      	cmp	r0, #0
1a009686:	db2d      	blt.n	1a0096e4 <quorem+0x114>
1a009688:	f108 0801 	add.w	r8, r8, #1
1a00968c:	4650      	mov	r0, sl
1a00968e:	2300      	movs	r3, #0
1a009690:	f856 1b04 	ldr.w	r1, [r6], #4
1a009694:	6805      	ldr	r5, [r0, #0]
1a009696:	b28a      	uxth	r2, r1
1a009698:	1a9a      	subs	r2, r3, r2
1a00969a:	0c0b      	lsrs	r3, r1, #16
1a00969c:	fa12 f285 	uxtah	r2, r2, r5
1a0096a0:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a0096a4:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a0096a8:	b292      	uxth	r2, r2
1a0096aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0096ae:	45b1      	cmp	r9, r6
1a0096b0:	f840 2b04 	str.w	r2, [r0], #4
1a0096b4:	ea4f 4323 	mov.w	r3, r3, asr #16
1a0096b8:	d2ea      	bcs.n	1a009690 <quorem+0xc0>
1a0096ba:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a0096be:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a0096c2:	b97a      	cbnz	r2, 1a0096e4 <quorem+0x114>
1a0096c4:	1f1a      	subs	r2, r3, #4
1a0096c6:	4592      	cmp	sl, r2
1a0096c8:	d20b      	bcs.n	1a0096e2 <quorem+0x112>
1a0096ca:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a0096ce:	b942      	cbnz	r2, 1a0096e2 <quorem+0x112>
1a0096d0:	3b08      	subs	r3, #8
1a0096d2:	e002      	b.n	1a0096da <quorem+0x10a>
1a0096d4:	681a      	ldr	r2, [r3, #0]
1a0096d6:	3b04      	subs	r3, #4
1a0096d8:	b91a      	cbnz	r2, 1a0096e2 <quorem+0x112>
1a0096da:	459a      	cmp	sl, r3
1a0096dc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0096e0:	d3f8      	bcc.n	1a0096d4 <quorem+0x104>
1a0096e2:	6127      	str	r7, [r4, #16]
1a0096e4:	4640      	mov	r0, r8
1a0096e6:	b003      	add	sp, #12
1a0096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0096ec:	2000      	movs	r0, #0
1a0096ee:	b003      	add	sp, #12
1a0096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0096f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0096f8 <_dtoa_r>:
1a0096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0096fc:	ec57 6b10 	vmov	r6, r7, d0
1a009700:	b097      	sub	sp, #92	; 0x5c
1a009702:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a009704:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a009706:	9102      	str	r1, [sp, #8]
1a009708:	4682      	mov	sl, r0
1a00970a:	920a      	str	r2, [sp, #40]	; 0x28
1a00970c:	9307      	str	r3, [sp, #28]
1a00970e:	e9cd 6700 	strd	r6, r7, [sp]
1a009712:	b155      	cbz	r5, 1a00972a <_dtoa_r+0x32>
1a009714:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a009716:	606a      	str	r2, [r5, #4]
1a009718:	2301      	movs	r3, #1
1a00971a:	4093      	lsls	r3, r2
1a00971c:	60ab      	str	r3, [r5, #8]
1a00971e:	4629      	mov	r1, r5
1a009720:	f001 f9f4 	bl	1a00ab0c <_Bfree>
1a009724:	2300      	movs	r3, #0
1a009726:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a00972a:	1e3e      	subs	r6, r7, #0
1a00972c:	bfb4      	ite	lt
1a00972e:	2301      	movlt	r3, #1
1a009730:	2300      	movge	r3, #0
1a009732:	6023      	str	r3, [r4, #0]
1a009734:	4b76      	ldr	r3, [pc, #472]	; (1a009910 <_dtoa_r+0x218>)
1a009736:	bfbc      	itt	lt
1a009738:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a00973c:	9601      	strlt	r6, [sp, #4]
1a00973e:	43b3      	bics	r3, r6
1a009740:	f000 80ae 	beq.w	1a0098a0 <_dtoa_r+0x1a8>
1a009744:	ed9d 7b00 	vldr	d7, [sp]
1a009748:	2200      	movs	r2, #0
1a00974a:	2300      	movs	r3, #0
1a00974c:	ec51 0b17 	vmov	r0, r1, d7
1a009750:	ed8d 7b04 	vstr	d7, [sp, #16]
1a009754:	f7fc fbf6 	bl	1a005f44 <__aeabi_dcmpeq>
1a009758:	4605      	mov	r5, r0
1a00975a:	b178      	cbz	r0, 1a00977c <_dtoa_r+0x84>
1a00975c:	9a07      	ldr	r2, [sp, #28]
1a00975e:	2301      	movs	r3, #1
1a009760:	6013      	str	r3, [r2, #0]
1a009762:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a009764:	2b00      	cmp	r3, #0
1a009766:	f000 8313 	beq.w	1a009d90 <_dtoa_r+0x698>
1a00976a:	4b6a      	ldr	r3, [pc, #424]	; (1a009914 <_dtoa_r+0x21c>)
1a00976c:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00976e:	6013      	str	r3, [r2, #0]
1a009770:	3b01      	subs	r3, #1
1a009772:	9303      	str	r3, [sp, #12]
1a009774:	9803      	ldr	r0, [sp, #12]
1a009776:	b017      	add	sp, #92	; 0x5c
1a009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00977c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a009780:	aa14      	add	r2, sp, #80	; 0x50
1a009782:	a915      	add	r1, sp, #84	; 0x54
1a009784:	ec48 7b10 	vmov	d0, r7, r8
1a009788:	4650      	mov	r0, sl
1a00978a:	f001 fc43 	bl	1a00b014 <__d2b>
1a00978e:	0d34      	lsrs	r4, r6, #20
1a009790:	4683      	mov	fp, r0
1a009792:	f040 809b 	bne.w	1a0098cc <_dtoa_r+0x1d4>
1a009796:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a00979a:	442c      	add	r4, r5
1a00979c:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a0097a0:	2b20      	cmp	r3, #32
1a0097a2:	f340 83bb 	ble.w	1a009f1c <_dtoa_r+0x824>
1a0097a6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a0097aa:	409e      	lsls	r6, r3
1a0097ac:	9b00      	ldr	r3, [sp, #0]
1a0097ae:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a0097b2:	fa23 f000 	lsr.w	r0, r3, r0
1a0097b6:	4330      	orrs	r0, r6
1a0097b8:	f7fc f8e2 	bl	1a005980 <__aeabi_ui2d>
1a0097bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a0097c0:	2101      	movs	r1, #1
1a0097c2:	4602      	mov	r2, r0
1a0097c4:	3c01      	subs	r4, #1
1a0097c6:	910e      	str	r1, [sp, #56]	; 0x38
1a0097c8:	4610      	mov	r0, r2
1a0097ca:	4619      	mov	r1, r3
1a0097cc:	2200      	movs	r2, #0
1a0097ce:	4b52      	ldr	r3, [pc, #328]	; (1a009918 <_dtoa_r+0x220>)
1a0097d0:	f7fb ff98 	bl	1a005704 <__aeabi_dsub>
1a0097d4:	a348      	add	r3, pc, #288	; (adr r3, 1a0098f8 <_dtoa_r+0x200>)
1a0097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0097da:	f7fc f94b 	bl	1a005a74 <__aeabi_dmul>
1a0097de:	a348      	add	r3, pc, #288	; (adr r3, 1a009900 <_dtoa_r+0x208>)
1a0097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0097e4:	f7fb ff90 	bl	1a005708 <__adddf3>
1a0097e8:	4606      	mov	r6, r0
1a0097ea:	4620      	mov	r0, r4
1a0097ec:	460f      	mov	r7, r1
1a0097ee:	f7fc f8d7 	bl	1a0059a0 <__aeabi_i2d>
1a0097f2:	a345      	add	r3, pc, #276	; (adr r3, 1a009908 <_dtoa_r+0x210>)
1a0097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0097f8:	f7fc f93c 	bl	1a005a74 <__aeabi_dmul>
1a0097fc:	4602      	mov	r2, r0
1a0097fe:	460b      	mov	r3, r1
1a009800:	4630      	mov	r0, r6
1a009802:	4639      	mov	r1, r7
1a009804:	f7fb ff80 	bl	1a005708 <__adddf3>
1a009808:	4606      	mov	r6, r0
1a00980a:	460f      	mov	r7, r1
1a00980c:	f002 f832 	bl	1a00b874 <__aeabi_d2iz>
1a009810:	2200      	movs	r2, #0
1a009812:	4681      	mov	r9, r0
1a009814:	2300      	movs	r3, #0
1a009816:	4630      	mov	r0, r6
1a009818:	4639      	mov	r1, r7
1a00981a:	f7fc fb9d 	bl	1a005f58 <__aeabi_dcmplt>
1a00981e:	2800      	cmp	r0, #0
1a009820:	f040 82a9 	bne.w	1a009d76 <_dtoa_r+0x67e>
1a009824:	1b2c      	subs	r4, r5, r4
1a009826:	f1b9 0f16 	cmp.w	r9, #22
1a00982a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a00982e:	f200 8296 	bhi.w	1a009d5e <_dtoa_r+0x666>
1a009832:	4b3a      	ldr	r3, [pc, #232]	; (1a00991c <_dtoa_r+0x224>)
1a009834:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a009838:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00983c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a009840:	f7fc fb8a 	bl	1a005f58 <__aeabi_dcmplt>
1a009844:	2800      	cmp	r0, #0
1a009846:	d06f      	beq.n	1a009928 <_dtoa_r+0x230>
1a009848:	2300      	movs	r3, #0
1a00984a:	f1b8 0f00 	cmp.w	r8, #0
1a00984e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a009852:	930d      	str	r3, [sp, #52]	; 0x34
1a009854:	f2c0 8289 	blt.w	1a009d6a <_dtoa_r+0x672>
1a009858:	2300      	movs	r3, #0
1a00985a:	9308      	str	r3, [sp, #32]
1a00985c:	f1b9 0f00 	cmp.w	r9, #0
1a009860:	da68      	bge.n	1a009934 <_dtoa_r+0x23c>
1a009862:	9b08      	ldr	r3, [sp, #32]
1a009864:	f8cd 9018 	str.w	r9, [sp, #24]
1a009868:	eba3 0309 	sub.w	r3, r3, r9
1a00986c:	9308      	str	r3, [sp, #32]
1a00986e:	f1c9 0300 	rsb	r3, r9, #0
1a009872:	930c      	str	r3, [sp, #48]	; 0x30
1a009874:	9b02      	ldr	r3, [sp, #8]
1a009876:	2b09      	cmp	r3, #9
1a009878:	f04f 0900 	mov.w	r9, #0
1a00987c:	d862      	bhi.n	1a009944 <_dtoa_r+0x24c>
1a00987e:	2b05      	cmp	r3, #5
1a009880:	f340 834a 	ble.w	1a009f18 <_dtoa_r+0x820>
1a009884:	3b04      	subs	r3, #4
1a009886:	9302      	str	r3, [sp, #8]
1a009888:	2400      	movs	r4, #0
1a00988a:	9b02      	ldr	r3, [sp, #8]
1a00988c:	3b02      	subs	r3, #2
1a00988e:	2b03      	cmp	r3, #3
1a009890:	f200 8641 	bhi.w	1a00a516 <_dtoa_r+0xe1e>
1a009894:	e8df f013 	tbh	[pc, r3, lsl #1]
1a009898:	04630466 	.word	0x04630466
1a00989c:	0456043b 	.word	0x0456043b
1a0098a0:	9a07      	ldr	r2, [sp, #28]
1a0098a2:	f242 730f 	movw	r3, #9999	; 0x270f
1a0098a6:	6013      	str	r3, [r2, #0]
1a0098a8:	9b00      	ldr	r3, [sp, #0]
1a0098aa:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a0098ae:	4333      	orrs	r3, r6
1a0098b0:	d118      	bne.n	1a0098e4 <_dtoa_r+0x1ec>
1a0098b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0098b4:	2b00      	cmp	r3, #0
1a0098b6:	f000 8625 	beq.w	1a00a504 <_dtoa_r+0xe0c>
1a0098ba:	4b19      	ldr	r3, [pc, #100]	; (1a009920 <_dtoa_r+0x228>)
1a0098bc:	9303      	str	r3, [sp, #12]
1a0098be:	3308      	adds	r3, #8
1a0098c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0098c2:	9803      	ldr	r0, [sp, #12]
1a0098c4:	6013      	str	r3, [r2, #0]
1a0098c6:	b017      	add	sp, #92	; 0x5c
1a0098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0098cc:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a0098d0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a0098d4:	950e      	str	r5, [sp, #56]	; 0x38
1a0098d6:	463a      	mov	r2, r7
1a0098d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a0098dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a0098e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a0098e2:	e771      	b.n	1a0097c8 <_dtoa_r+0xd0>
1a0098e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0098e6:	2b00      	cmp	r3, #0
1a0098e8:	f040 8400 	bne.w	1a00a0ec <_dtoa_r+0x9f4>
1a0098ec:	4b0d      	ldr	r3, [pc, #52]	; (1a009924 <_dtoa_r+0x22c>)
1a0098ee:	9303      	str	r3, [sp, #12]
1a0098f0:	e740      	b.n	1a009774 <_dtoa_r+0x7c>
1a0098f2:	bf00      	nop
1a0098f4:	f3af 8000 	nop.w
1a0098f8:	636f4361 	.word	0x636f4361
1a0098fc:	3fd287a7 	.word	0x3fd287a7
1a009900:	8b60c8b3 	.word	0x8b60c8b3
1a009904:	3fc68a28 	.word	0x3fc68a28
1a009908:	509f79fb 	.word	0x509f79fb
1a00990c:	3fd34413 	.word	0x3fd34413
1a009910:	7ff00000 	.word	0x7ff00000
1a009914:	1a00c151 	.word	0x1a00c151
1a009918:	3ff80000 	.word	0x3ff80000
1a00991c:	1a00c1b0 	.word	0x1a00c1b0
1a009920:	1a00c178 	.word	0x1a00c178
1a009924:	1a00c174 	.word	0x1a00c174
1a009928:	f1b8 0f00 	cmp.w	r8, #0
1a00992c:	f2c0 84b6 	blt.w	1a00a29c <_dtoa_r+0xba4>
1a009930:	900d      	str	r0, [sp, #52]	; 0x34
1a009932:	9008      	str	r0, [sp, #32]
1a009934:	2300      	movs	r3, #0
1a009936:	930c      	str	r3, [sp, #48]	; 0x30
1a009938:	9b02      	ldr	r3, [sp, #8]
1a00993a:	f8cd 9018 	str.w	r9, [sp, #24]
1a00993e:	2b09      	cmp	r3, #9
1a009940:	44c8      	add	r8, r9
1a009942:	d99c      	bls.n	1a00987e <_dtoa_r+0x186>
1a009944:	2300      	movs	r3, #0
1a009946:	2401      	movs	r4, #1
1a009948:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a00994c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a009950:	9302      	str	r3, [sp, #8]
1a009952:	9509      	str	r5, [sp, #36]	; 0x24
1a009954:	2100      	movs	r1, #0
1a009956:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00995a:	950f      	str	r5, [sp, #60]	; 0x3c
1a00995c:	4650      	mov	r0, sl
1a00995e:	f001 f8af 	bl	1a00aac0 <_Balloc>
1a009962:	2d0e      	cmp	r5, #14
1a009964:	9003      	str	r0, [sp, #12]
1a009966:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00996a:	f200 810a 	bhi.w	1a009b82 <_dtoa_r+0x48a>
1a00996e:	2c00      	cmp	r4, #0
1a009970:	f000 8107 	beq.w	1a009b82 <_dtoa_r+0x48a>
1a009974:	9906      	ldr	r1, [sp, #24]
1a009976:	2900      	cmp	r1, #0
1a009978:	f340 8466 	ble.w	1a00a248 <_dtoa_r+0xb50>
1a00997c:	4bb1      	ldr	r3, [pc, #708]	; (1a009c44 <_dtoa_r+0x54c>)
1a00997e:	f001 020f 	and.w	r2, r1, #15
1a009982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a009986:	ed93 7b00 	vldr	d7, [r3]
1a00998a:	110c      	asrs	r4, r1, #4
1a00998c:	06e3      	lsls	r3, r4, #27
1a00998e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a009992:	f140 8406 	bpl.w	1a00a1a2 <_dtoa_r+0xaaa>
1a009996:	4bac      	ldr	r3, [pc, #688]	; (1a009c48 <_dtoa_r+0x550>)
1a009998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00999c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a0099a0:	f7fc f992 	bl	1a005cc8 <__aeabi_ddiv>
1a0099a4:	e9cd 0100 	strd	r0, r1, [sp]
1a0099a8:	f004 040f 	and.w	r4, r4, #15
1a0099ac:	2603      	movs	r6, #3
1a0099ae:	b17c      	cbz	r4, 1a0099d0 <_dtoa_r+0x2d8>
1a0099b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0099b4:	4da4      	ldr	r5, [pc, #656]	; (1a009c48 <_dtoa_r+0x550>)
1a0099b6:	07e7      	lsls	r7, r4, #31
1a0099b8:	d504      	bpl.n	1a0099c4 <_dtoa_r+0x2cc>
1a0099ba:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0099be:	f7fc f859 	bl	1a005a74 <__aeabi_dmul>
1a0099c2:	3601      	adds	r6, #1
1a0099c4:	1064      	asrs	r4, r4, #1
1a0099c6:	f105 0508 	add.w	r5, r5, #8
1a0099ca:	d1f4      	bne.n	1a0099b6 <_dtoa_r+0x2be>
1a0099cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a0099d0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0099d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a0099d8:	f7fc f976 	bl	1a005cc8 <__aeabi_ddiv>
1a0099dc:	e9cd 0100 	strd	r0, r1, [sp]
1a0099e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0099e2:	b153      	cbz	r3, 1a0099fa <_dtoa_r+0x302>
1a0099e4:	e9dd 4500 	ldrd	r4, r5, [sp]
1a0099e8:	2200      	movs	r2, #0
1a0099ea:	4b98      	ldr	r3, [pc, #608]	; (1a009c4c <_dtoa_r+0x554>)
1a0099ec:	4620      	mov	r0, r4
1a0099ee:	4629      	mov	r1, r5
1a0099f0:	f7fc fab2 	bl	1a005f58 <__aeabi_dcmplt>
1a0099f4:	2800      	cmp	r0, #0
1a0099f6:	f040 8521 	bne.w	1a00a43c <_dtoa_r+0xd44>
1a0099fa:	4630      	mov	r0, r6
1a0099fc:	f7fb ffd0 	bl	1a0059a0 <__aeabi_i2d>
1a009a00:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009a04:	f7fc f836 	bl	1a005a74 <__aeabi_dmul>
1a009a08:	4b91      	ldr	r3, [pc, #580]	; (1a009c50 <_dtoa_r+0x558>)
1a009a0a:	2200      	movs	r2, #0
1a009a0c:	f7fb fe7c 	bl	1a005708 <__adddf3>
1a009a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009a12:	4604      	mov	r4, r0
1a009a14:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a009a18:	2b00      	cmp	r3, #0
1a009a1a:	f000 83f9 	beq.w	1a00a210 <_dtoa_r+0xb18>
1a009a1e:	9b06      	ldr	r3, [sp, #24]
1a009a20:	9312      	str	r3, [sp, #72]	; 0x48
1a009a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009a24:	9310      	str	r3, [sp, #64]	; 0x40
1a009a26:	e9dd 6700 	ldrd	r6, r7, [sp]
1a009a2a:	4639      	mov	r1, r7
1a009a2c:	4630      	mov	r0, r6
1a009a2e:	f001 ff21 	bl	1a00b874 <__aeabi_d2iz>
1a009a32:	9000      	str	r0, [sp, #0]
1a009a34:	f7fb ffb4 	bl	1a0059a0 <__aeabi_i2d>
1a009a38:	4602      	mov	r2, r0
1a009a3a:	460b      	mov	r3, r1
1a009a3c:	4630      	mov	r0, r6
1a009a3e:	4639      	mov	r1, r7
1a009a40:	f7fb fe60 	bl	1a005704 <__aeabi_dsub>
1a009a44:	4b7f      	ldr	r3, [pc, #508]	; (1a009c44 <_dtoa_r+0x54c>)
1a009a46:	9a00      	ldr	r2, [sp, #0]
1a009a48:	460f      	mov	r7, r1
1a009a4a:	9910      	ldr	r1, [sp, #64]	; 0x40
1a009a4c:	4606      	mov	r6, r0
1a009a4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a009a52:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a009a54:	9903      	ldr	r1, [sp, #12]
1a009a56:	3230      	adds	r2, #48	; 0x30
1a009a58:	e9cd 4500 	strd	r4, r5, [sp]
1a009a5c:	b2d5      	uxtb	r5, r2
1a009a5e:	1c4c      	adds	r4, r1, #1
1a009a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a009a64:	2800      	cmp	r0, #0
1a009a66:	f000 848d 	beq.w	1a00a384 <_dtoa_r+0xc8c>
1a009a6a:	2000      	movs	r0, #0
1a009a6c:	4979      	ldr	r1, [pc, #484]	; (1a009c54 <_dtoa_r+0x55c>)
1a009a6e:	f7fc f92b 	bl	1a005cc8 <__aeabi_ddiv>
1a009a72:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009a76:	f7fb fe45 	bl	1a005704 <__aeabi_dsub>
1a009a7a:	9b03      	ldr	r3, [sp, #12]
1a009a7c:	4632      	mov	r2, r6
1a009a7e:	701d      	strb	r5, [r3, #0]
1a009a80:	463b      	mov	r3, r7
1a009a82:	e9cd 0100 	strd	r0, r1, [sp]
1a009a86:	f7fc fa85 	bl	1a005f94 <__aeabi_dcmpgt>
1a009a8a:	2800      	cmp	r0, #0
1a009a8c:	f040 84ca 	bne.w	1a00a424 <_dtoa_r+0xd2c>
1a009a90:	4632      	mov	r2, r6
1a009a92:	463b      	mov	r3, r7
1a009a94:	2000      	movs	r0, #0
1a009a96:	496d      	ldr	r1, [pc, #436]	; (1a009c4c <_dtoa_r+0x554>)
1a009a98:	f7fb fe34 	bl	1a005704 <__aeabi_dsub>
1a009a9c:	4602      	mov	r2, r0
1a009a9e:	460b      	mov	r3, r1
1a009aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009aa4:	f7fc fa76 	bl	1a005f94 <__aeabi_dcmpgt>
1a009aa8:	2800      	cmp	r0, #0
1a009aaa:	f040 8526 	bne.w	1a00a4fa <_dtoa_r+0xe02>
1a009aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009ab0:	2b01      	cmp	r3, #1
1a009ab2:	d062      	beq.n	1a009b7a <_dtoa_r+0x482>
1a009ab4:	9a03      	ldr	r2, [sp, #12]
1a009ab6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a009aba:	4413      	add	r3, r2
1a009abc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a009ac0:	e9dd 8900 	ldrd	r8, r9, [sp]
1a009ac4:	f8cd b000 	str.w	fp, [sp]
1a009ac8:	46d3      	mov	fp, sl
1a009aca:	469a      	mov	sl, r3
1a009acc:	e00c      	b.n	1a009ae8 <_dtoa_r+0x3f0>
1a009ace:	2000      	movs	r0, #0
1a009ad0:	495e      	ldr	r1, [pc, #376]	; (1a009c4c <_dtoa_r+0x554>)
1a009ad2:	f7fb fe17 	bl	1a005704 <__aeabi_dsub>
1a009ad6:	4642      	mov	r2, r8
1a009ad8:	464b      	mov	r3, r9
1a009ada:	f7fc fa3d 	bl	1a005f58 <__aeabi_dcmplt>
1a009ade:	2800      	cmp	r0, #0
1a009ae0:	f040 84eb 	bne.w	1a00a4ba <_dtoa_r+0xdc2>
1a009ae4:	45a2      	cmp	sl, r4
1a009ae6:	d041      	beq.n	1a009b6c <_dtoa_r+0x474>
1a009ae8:	4640      	mov	r0, r8
1a009aea:	4649      	mov	r1, r9
1a009aec:	2200      	movs	r2, #0
1a009aee:	4b5a      	ldr	r3, [pc, #360]	; (1a009c58 <_dtoa_r+0x560>)
1a009af0:	f7fb ffc0 	bl	1a005a74 <__aeabi_dmul>
1a009af4:	2200      	movs	r2, #0
1a009af6:	4b58      	ldr	r3, [pc, #352]	; (1a009c58 <_dtoa_r+0x560>)
1a009af8:	4680      	mov	r8, r0
1a009afa:	4689      	mov	r9, r1
1a009afc:	4630      	mov	r0, r6
1a009afe:	4639      	mov	r1, r7
1a009b00:	f7fb ffb8 	bl	1a005a74 <__aeabi_dmul>
1a009b04:	460f      	mov	r7, r1
1a009b06:	4606      	mov	r6, r0
1a009b08:	f001 feb4 	bl	1a00b874 <__aeabi_d2iz>
1a009b0c:	4605      	mov	r5, r0
1a009b0e:	f7fb ff47 	bl	1a0059a0 <__aeabi_i2d>
1a009b12:	4602      	mov	r2, r0
1a009b14:	460b      	mov	r3, r1
1a009b16:	4630      	mov	r0, r6
1a009b18:	4639      	mov	r1, r7
1a009b1a:	f7fb fdf3 	bl	1a005704 <__aeabi_dsub>
1a009b1e:	3530      	adds	r5, #48	; 0x30
1a009b20:	b2ed      	uxtb	r5, r5
1a009b22:	4642      	mov	r2, r8
1a009b24:	464b      	mov	r3, r9
1a009b26:	f804 5b01 	strb.w	r5, [r4], #1
1a009b2a:	4606      	mov	r6, r0
1a009b2c:	460f      	mov	r7, r1
1a009b2e:	f7fc fa13 	bl	1a005f58 <__aeabi_dcmplt>
1a009b32:	4632      	mov	r2, r6
1a009b34:	463b      	mov	r3, r7
1a009b36:	2800      	cmp	r0, #0
1a009b38:	d0c9      	beq.n	1a009ace <_dtoa_r+0x3d6>
1a009b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009b3c:	46da      	mov	sl, fp
1a009b3e:	3301      	adds	r3, #1
1a009b40:	f8dd b000 	ldr.w	fp, [sp]
1a009b44:	9306      	str	r3, [sp, #24]
1a009b46:	4659      	mov	r1, fp
1a009b48:	4650      	mov	r0, sl
1a009b4a:	f000 ffdf 	bl	1a00ab0c <_Bfree>
1a009b4e:	2300      	movs	r3, #0
1a009b50:	7023      	strb	r3, [r4, #0]
1a009b52:	9b07      	ldr	r3, [sp, #28]
1a009b54:	461a      	mov	r2, r3
1a009b56:	9b06      	ldr	r3, [sp, #24]
1a009b58:	6013      	str	r3, [r2, #0]
1a009b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a009b5c:	2b00      	cmp	r3, #0
1a009b5e:	f43f ae09 	beq.w	1a009774 <_dtoa_r+0x7c>
1a009b62:	9803      	ldr	r0, [sp, #12]
1a009b64:	601c      	str	r4, [r3, #0]
1a009b66:	b017      	add	sp, #92	; 0x5c
1a009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009b6c:	46da      	mov	sl, fp
1a009b6e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a009b72:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a009b76:	f8dd b000 	ldr.w	fp, [sp]
1a009b7a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a009b7e:	e9cd 3400 	strd	r3, r4, [sp]
1a009b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a009b84:	2b00      	cmp	r3, #0
1a009b86:	f2c0 80c9 	blt.w	1a009d1c <_dtoa_r+0x624>
1a009b8a:	9a06      	ldr	r2, [sp, #24]
1a009b8c:	2a0e      	cmp	r2, #14
1a009b8e:	f300 80c5 	bgt.w	1a009d1c <_dtoa_r+0x624>
1a009b92:	4b2c      	ldr	r3, [pc, #176]	; (1a009c44 <_dtoa_r+0x54c>)
1a009b94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a009b98:	e9d3 8900 	ldrd	r8, r9, [r3]
1a009b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009b9e:	2b00      	cmp	r3, #0
1a009ba0:	da17      	bge.n	1a009bd2 <_dtoa_r+0x4da>
1a009ba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a009ba4:	2f00      	cmp	r7, #0
1a009ba6:	dc14      	bgt.n	1a009bd2 <_dtoa_r+0x4da>
1a009ba8:	f040 834b 	bne.w	1a00a242 <_dtoa_r+0xb4a>
1a009bac:	2200      	movs	r2, #0
1a009bae:	4b2b      	ldr	r3, [pc, #172]	; (1a009c5c <_dtoa_r+0x564>)
1a009bb0:	4640      	mov	r0, r8
1a009bb2:	4649      	mov	r1, r9
1a009bb4:	f7fb ff5e 	bl	1a005a74 <__aeabi_dmul>
1a009bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009bbc:	f7fc f9e0 	bl	1a005f80 <__aeabi_dcmpge>
1a009bc0:	2800      	cmp	r0, #0
1a009bc2:	f000 83be 	beq.w	1a00a342 <_dtoa_r+0xc4a>
1a009bc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a009bc8:	463d      	mov	r5, r7
1a009bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009bcc:	9c03      	ldr	r4, [sp, #12]
1a009bce:	43db      	mvns	r3, r3
1a009bd0:	e260      	b.n	1a00a094 <_dtoa_r+0x99c>
1a009bd2:	e9dd 4500 	ldrd	r4, r5, [sp]
1a009bd6:	4642      	mov	r2, r8
1a009bd8:	464b      	mov	r3, r9
1a009bda:	4620      	mov	r0, r4
1a009bdc:	4629      	mov	r1, r5
1a009bde:	f7fc f873 	bl	1a005cc8 <__aeabi_ddiv>
1a009be2:	f001 fe47 	bl	1a00b874 <__aeabi_d2iz>
1a009be6:	9000      	str	r0, [sp, #0]
1a009be8:	f7fb feda 	bl	1a0059a0 <__aeabi_i2d>
1a009bec:	4642      	mov	r2, r8
1a009bee:	464b      	mov	r3, r9
1a009bf0:	f7fb ff40 	bl	1a005a74 <__aeabi_dmul>
1a009bf4:	4602      	mov	r2, r0
1a009bf6:	460b      	mov	r3, r1
1a009bf8:	4620      	mov	r0, r4
1a009bfa:	4629      	mov	r1, r5
1a009bfc:	f7fb fd82 	bl	1a005704 <__aeabi_dsub>
1a009c00:	9b00      	ldr	r3, [sp, #0]
1a009c02:	9c03      	ldr	r4, [sp, #12]
1a009c04:	9a06      	ldr	r2, [sp, #24]
1a009c06:	3330      	adds	r3, #48	; 0x30
1a009c08:	f804 3b01 	strb.w	r3, [r4], #1
1a009c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009c0e:	3201      	adds	r2, #1
1a009c10:	2b01      	cmp	r3, #1
1a009c12:	4606      	mov	r6, r0
1a009c14:	460f      	mov	r7, r1
1a009c16:	9206      	str	r2, [sp, #24]
1a009c18:	d054      	beq.n	1a009cc4 <_dtoa_r+0x5cc>
1a009c1a:	2200      	movs	r2, #0
1a009c1c:	4b0e      	ldr	r3, [pc, #56]	; (1a009c58 <_dtoa_r+0x560>)
1a009c1e:	f7fb ff29 	bl	1a005a74 <__aeabi_dmul>
1a009c22:	2200      	movs	r2, #0
1a009c24:	2300      	movs	r3, #0
1a009c26:	4606      	mov	r6, r0
1a009c28:	460f      	mov	r7, r1
1a009c2a:	f7fc f98b 	bl	1a005f44 <__aeabi_dcmpeq>
1a009c2e:	2800      	cmp	r0, #0
1a009c30:	d189      	bne.n	1a009b46 <_dtoa_r+0x44e>
1a009c32:	f8cd b000 	str.w	fp, [sp]
1a009c36:	2501      	movs	r5, #1
1a009c38:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a009c3c:	f8cd a008 	str.w	sl, [sp, #8]
1a009c40:	e019      	b.n	1a009c76 <_dtoa_r+0x57e>
1a009c42:	bf00      	nop
1a009c44:	1a00c1b0 	.word	0x1a00c1b0
1a009c48:	1a00c188 	.word	0x1a00c188
1a009c4c:	3ff00000 	.word	0x3ff00000
1a009c50:	401c0000 	.word	0x401c0000
1a009c54:	3fe00000 	.word	0x3fe00000
1a009c58:	40240000 	.word	0x40240000
1a009c5c:	40140000 	.word	0x40140000
1a009c60:	f7fb ff08 	bl	1a005a74 <__aeabi_dmul>
1a009c64:	2200      	movs	r2, #0
1a009c66:	2300      	movs	r3, #0
1a009c68:	4606      	mov	r6, r0
1a009c6a:	460f      	mov	r7, r1
1a009c6c:	f7fc f96a 	bl	1a005f44 <__aeabi_dcmpeq>
1a009c70:	2800      	cmp	r0, #0
1a009c72:	f040 835c 	bne.w	1a00a32e <_dtoa_r+0xc36>
1a009c76:	4642      	mov	r2, r8
1a009c78:	464b      	mov	r3, r9
1a009c7a:	4630      	mov	r0, r6
1a009c7c:	4639      	mov	r1, r7
1a009c7e:	f7fc f823 	bl	1a005cc8 <__aeabi_ddiv>
1a009c82:	f001 fdf7 	bl	1a00b874 <__aeabi_d2iz>
1a009c86:	4682      	mov	sl, r0
1a009c88:	f7fb fe8a 	bl	1a0059a0 <__aeabi_i2d>
1a009c8c:	4642      	mov	r2, r8
1a009c8e:	464b      	mov	r3, r9
1a009c90:	f7fb fef0 	bl	1a005a74 <__aeabi_dmul>
1a009c94:	4602      	mov	r2, r0
1a009c96:	460b      	mov	r3, r1
1a009c98:	4630      	mov	r0, r6
1a009c9a:	4639      	mov	r1, r7
1a009c9c:	f7fb fd32 	bl	1a005704 <__aeabi_dsub>
1a009ca0:	3501      	adds	r5, #1
1a009ca2:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a009ca6:	45ab      	cmp	fp, r5
1a009ca8:	4606      	mov	r6, r0
1a009caa:	460f      	mov	r7, r1
1a009cac:	f04f 0200 	mov.w	r2, #0
1a009cb0:	4ba7      	ldr	r3, [pc, #668]	; (1a009f50 <_dtoa_r+0x858>)
1a009cb2:	f804 cb01 	strb.w	ip, [r4], #1
1a009cb6:	d1d3      	bne.n	1a009c60 <_dtoa_r+0x568>
1a009cb8:	f8dd b000 	ldr.w	fp, [sp]
1a009cbc:	f8cd a000 	str.w	sl, [sp]
1a009cc0:	f8dd a008 	ldr.w	sl, [sp, #8]
1a009cc4:	4632      	mov	r2, r6
1a009cc6:	463b      	mov	r3, r7
1a009cc8:	4630      	mov	r0, r6
1a009cca:	4639      	mov	r1, r7
1a009ccc:	f7fb fd1c 	bl	1a005708 <__adddf3>
1a009cd0:	4642      	mov	r2, r8
1a009cd2:	464b      	mov	r3, r9
1a009cd4:	4606      	mov	r6, r0
1a009cd6:	460f      	mov	r7, r1
1a009cd8:	f7fc f95c 	bl	1a005f94 <__aeabi_dcmpgt>
1a009cdc:	b960      	cbnz	r0, 1a009cf8 <_dtoa_r+0x600>
1a009cde:	4642      	mov	r2, r8
1a009ce0:	464b      	mov	r3, r9
1a009ce2:	4630      	mov	r0, r6
1a009ce4:	4639      	mov	r1, r7
1a009ce6:	f7fc f92d 	bl	1a005f44 <__aeabi_dcmpeq>
1a009cea:	2800      	cmp	r0, #0
1a009cec:	f43f af2b 	beq.w	1a009b46 <_dtoa_r+0x44e>
1a009cf0:	9b00      	ldr	r3, [sp, #0]
1a009cf2:	07db      	lsls	r3, r3, #31
1a009cf4:	f57f af27 	bpl.w	1a009b46 <_dtoa_r+0x44e>
1a009cf8:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a009cfc:	9a03      	ldr	r2, [sp, #12]
1a009cfe:	1e63      	subs	r3, r4, #1
1a009d00:	e004      	b.n	1a009d0c <_dtoa_r+0x614>
1a009d02:	429a      	cmp	r2, r3
1a009d04:	f000 83c0 	beq.w	1a00a488 <_dtoa_r+0xd90>
1a009d08:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a009d0c:	2d39      	cmp	r5, #57	; 0x39
1a009d0e:	f103 0401 	add.w	r4, r3, #1
1a009d12:	d0f6      	beq.n	1a009d02 <_dtoa_r+0x60a>
1a009d14:	1c6a      	adds	r2, r5, #1
1a009d16:	b2d2      	uxtb	r2, r2
1a009d18:	701a      	strb	r2, [r3, #0]
1a009d1a:	e714      	b.n	1a009b46 <_dtoa_r+0x44e>
1a009d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a009d1e:	2a00      	cmp	r2, #0
1a009d20:	d03c      	beq.n	1a009d9c <_dtoa_r+0x6a4>
1a009d22:	9a02      	ldr	r2, [sp, #8]
1a009d24:	2a01      	cmp	r2, #1
1a009d26:	f340 8258 	ble.w	1a00a1da <_dtoa_r+0xae2>
1a009d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009d2c:	1e5e      	subs	r6, r3, #1
1a009d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009d30:	42b3      	cmp	r3, r6
1a009d32:	f280 8234 	bge.w	1a00a19e <_dtoa_r+0xaa6>
1a009d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009d38:	960c      	str	r6, [sp, #48]	; 0x30
1a009d3a:	1af3      	subs	r3, r6, r3
1a009d3c:	4499      	add	r9, r3
1a009d3e:	2600      	movs	r6, #0
1a009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009d42:	2b00      	cmp	r3, #0
1a009d44:	f2c0 82f8 	blt.w	1a00a338 <_dtoa_r+0xc40>
1a009d48:	9a08      	ldr	r2, [sp, #32]
1a009d4a:	4614      	mov	r4, r2
1a009d4c:	441a      	add	r2, r3
1a009d4e:	4498      	add	r8, r3
1a009d50:	9208      	str	r2, [sp, #32]
1a009d52:	2101      	movs	r1, #1
1a009d54:	4650      	mov	r0, sl
1a009d56:	f000 ff79 	bl	1a00ac4c <__i2b>
1a009d5a:	4605      	mov	r5, r0
1a009d5c:	e021      	b.n	1a009da2 <_dtoa_r+0x6aa>
1a009d5e:	2301      	movs	r3, #1
1a009d60:	f1b8 0f00 	cmp.w	r8, #0
1a009d64:	930d      	str	r3, [sp, #52]	; 0x34
1a009d66:	f6bf ad77 	bge.w	1a009858 <_dtoa_r+0x160>
1a009d6a:	f1c4 0301 	rsb	r3, r4, #1
1a009d6e:	9308      	str	r3, [sp, #32]
1a009d70:	f04f 0800 	mov.w	r8, #0
1a009d74:	e572      	b.n	1a00985c <_dtoa_r+0x164>
1a009d76:	4648      	mov	r0, r9
1a009d78:	f7fb fe12 	bl	1a0059a0 <__aeabi_i2d>
1a009d7c:	4632      	mov	r2, r6
1a009d7e:	463b      	mov	r3, r7
1a009d80:	f7fc f8e0 	bl	1a005f44 <__aeabi_dcmpeq>
1a009d84:	2800      	cmp	r0, #0
1a009d86:	f47f ad4d 	bne.w	1a009824 <_dtoa_r+0x12c>
1a009d8a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a009d8e:	e549      	b.n	1a009824 <_dtoa_r+0x12c>
1a009d90:	4b70      	ldr	r3, [pc, #448]	; (1a009f54 <_dtoa_r+0x85c>)
1a009d92:	9303      	str	r3, [sp, #12]
1a009d94:	9803      	ldr	r0, [sp, #12]
1a009d96:	b017      	add	sp, #92	; 0x5c
1a009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009d9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a009d9e:	9c08      	ldr	r4, [sp, #32]
1a009da0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a009da2:	2c00      	cmp	r4, #0
1a009da4:	dd0c      	ble.n	1a009dc0 <_dtoa_r+0x6c8>
1a009da6:	f1b8 0f00 	cmp.w	r8, #0
1a009daa:	dd09      	ble.n	1a009dc0 <_dtoa_r+0x6c8>
1a009dac:	4544      	cmp	r4, r8
1a009dae:	9a08      	ldr	r2, [sp, #32]
1a009db0:	4623      	mov	r3, r4
1a009db2:	bfa8      	it	ge
1a009db4:	4643      	movge	r3, r8
1a009db6:	1ad2      	subs	r2, r2, r3
1a009db8:	9208      	str	r2, [sp, #32]
1a009dba:	1ae4      	subs	r4, r4, r3
1a009dbc:	eba8 0803 	sub.w	r8, r8, r3
1a009dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009dc2:	b1d3      	cbz	r3, 1a009dfa <_dtoa_r+0x702>
1a009dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009dc6:	2b00      	cmp	r3, #0
1a009dc8:	f000 8189 	beq.w	1a00a0de <_dtoa_r+0x9e6>
1a009dcc:	2e00      	cmp	r6, #0
1a009dce:	dd10      	ble.n	1a009df2 <_dtoa_r+0x6fa>
1a009dd0:	4629      	mov	r1, r5
1a009dd2:	4632      	mov	r2, r6
1a009dd4:	4650      	mov	r0, sl
1a009dd6:	f000 ffdb 	bl	1a00ad90 <__pow5mult>
1a009dda:	465a      	mov	r2, fp
1a009ddc:	4601      	mov	r1, r0
1a009dde:	4605      	mov	r5, r0
1a009de0:	4650      	mov	r0, sl
1a009de2:	f000 ff3d 	bl	1a00ac60 <__multiply>
1a009de6:	4659      	mov	r1, fp
1a009de8:	4607      	mov	r7, r0
1a009dea:	4650      	mov	r0, sl
1a009dec:	f000 fe8e 	bl	1a00ab0c <_Bfree>
1a009df0:	46bb      	mov	fp, r7
1a009df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009df4:	1b9a      	subs	r2, r3, r6
1a009df6:	f040 8173 	bne.w	1a00a0e0 <_dtoa_r+0x9e8>
1a009dfa:	2101      	movs	r1, #1
1a009dfc:	4650      	mov	r0, sl
1a009dfe:	f000 ff25 	bl	1a00ac4c <__i2b>
1a009e02:	f1b9 0f00 	cmp.w	r9, #0
1a009e06:	4607      	mov	r7, r0
1a009e08:	f300 808e 	bgt.w	1a009f28 <_dtoa_r+0x830>
1a009e0c:	9b02      	ldr	r3, [sp, #8]
1a009e0e:	2b01      	cmp	r3, #1
1a009e10:	f340 8171 	ble.w	1a00a0f6 <_dtoa_r+0x9fe>
1a009e14:	2600      	movs	r6, #0
1a009e16:	2001      	movs	r0, #1
1a009e18:	f1b9 0f00 	cmp.w	r9, #0
1a009e1c:	f040 808f 	bne.w	1a009f3e <_dtoa_r+0x846>
1a009e20:	4440      	add	r0, r8
1a009e22:	f010 001f 	ands.w	r0, r0, #31
1a009e26:	d075      	beq.n	1a009f14 <_dtoa_r+0x81c>
1a009e28:	f1c0 0320 	rsb	r3, r0, #32
1a009e2c:	2b04      	cmp	r3, #4
1a009e2e:	f340 836d 	ble.w	1a00a50c <_dtoa_r+0xe14>
1a009e32:	f1c0 001c 	rsb	r0, r0, #28
1a009e36:	9b08      	ldr	r3, [sp, #32]
1a009e38:	4403      	add	r3, r0
1a009e3a:	9308      	str	r3, [sp, #32]
1a009e3c:	4404      	add	r4, r0
1a009e3e:	4480      	add	r8, r0
1a009e40:	9b08      	ldr	r3, [sp, #32]
1a009e42:	2b00      	cmp	r3, #0
1a009e44:	dd05      	ble.n	1a009e52 <_dtoa_r+0x75a>
1a009e46:	4659      	mov	r1, fp
1a009e48:	461a      	mov	r2, r3
1a009e4a:	4650      	mov	r0, sl
1a009e4c:	f000 fff0 	bl	1a00ae30 <__lshift>
1a009e50:	4683      	mov	fp, r0
1a009e52:	f1b8 0f00 	cmp.w	r8, #0
1a009e56:	dd05      	ble.n	1a009e64 <_dtoa_r+0x76c>
1a009e58:	4639      	mov	r1, r7
1a009e5a:	4642      	mov	r2, r8
1a009e5c:	4650      	mov	r0, sl
1a009e5e:	f000 ffe7 	bl	1a00ae30 <__lshift>
1a009e62:	4607      	mov	r7, r0
1a009e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a009e66:	2b00      	cmp	r3, #0
1a009e68:	f040 811e 	bne.w	1a00a0a8 <_dtoa_r+0x9b0>
1a009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009e6e:	2b00      	cmp	r3, #0
1a009e70:	f340 80f5 	ble.w	1a00a05e <_dtoa_r+0x966>
1a009e74:	9b06      	ldr	r3, [sp, #24]
1a009e76:	3301      	adds	r3, #1
1a009e78:	9306      	str	r3, [sp, #24]
1a009e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009e7c:	2b00      	cmp	r3, #0
1a009e7e:	d177      	bne.n	1a009f70 <_dtoa_r+0x878>
1a009e80:	9c03      	ldr	r4, [sp, #12]
1a009e82:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a009e86:	2601      	movs	r6, #1
1a009e88:	e003      	b.n	1a009e92 <_dtoa_r+0x79a>
1a009e8a:	f000 fe49 	bl	1a00ab20 <__multadd>
1a009e8e:	3601      	adds	r6, #1
1a009e90:	4683      	mov	fp, r0
1a009e92:	4639      	mov	r1, r7
1a009e94:	4658      	mov	r0, fp
1a009e96:	f7ff fb9b 	bl	1a0095d0 <quorem>
1a009e9a:	4546      	cmp	r6, r8
1a009e9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a009ea0:	f804 9b01 	strb.w	r9, [r4], #1
1a009ea4:	f04f 0300 	mov.w	r3, #0
1a009ea8:	f04f 020a 	mov.w	r2, #10
1a009eac:	4659      	mov	r1, fp
1a009eae:	4650      	mov	r0, sl
1a009eb0:	dbeb      	blt.n	1a009e8a <_dtoa_r+0x792>
1a009eb2:	2300      	movs	r3, #0
1a009eb4:	9300      	str	r3, [sp, #0]
1a009eb6:	4659      	mov	r1, fp
1a009eb8:	2201      	movs	r2, #1
1a009eba:	4650      	mov	r0, sl
1a009ebc:	f000 ffb8 	bl	1a00ae30 <__lshift>
1a009ec0:	4639      	mov	r1, r7
1a009ec2:	4683      	mov	fp, r0
1a009ec4:	f001 f80e 	bl	1a00aee4 <__mcmp>
1a009ec8:	2800      	cmp	r0, #0
1a009eca:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a009ece:	f340 816f 	ble.w	1a00a1b0 <_dtoa_r+0xab8>
1a009ed2:	1e63      	subs	r3, r4, #1
1a009ed4:	9903      	ldr	r1, [sp, #12]
1a009ed6:	e004      	b.n	1a009ee2 <_dtoa_r+0x7ea>
1a009ed8:	4299      	cmp	r1, r3
1a009eda:	f000 8177 	beq.w	1a00a1cc <_dtoa_r+0xad4>
1a009ede:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a009ee2:	2a39      	cmp	r2, #57	; 0x39
1a009ee4:	f103 0401 	add.w	r4, r3, #1
1a009ee8:	d0f6      	beq.n	1a009ed8 <_dtoa_r+0x7e0>
1a009eea:	3201      	adds	r2, #1
1a009eec:	701a      	strb	r2, [r3, #0]
1a009eee:	4639      	mov	r1, r7
1a009ef0:	4650      	mov	r0, sl
1a009ef2:	f000 fe0b 	bl	1a00ab0c <_Bfree>
1a009ef6:	2d00      	cmp	r5, #0
1a009ef8:	f43f ae25 	beq.w	1a009b46 <_dtoa_r+0x44e>
1a009efc:	9900      	ldr	r1, [sp, #0]
1a009efe:	b121      	cbz	r1, 1a009f0a <_dtoa_r+0x812>
1a009f00:	42a9      	cmp	r1, r5
1a009f02:	d002      	beq.n	1a009f0a <_dtoa_r+0x812>
1a009f04:	4650      	mov	r0, sl
1a009f06:	f000 fe01 	bl	1a00ab0c <_Bfree>
1a009f0a:	4629      	mov	r1, r5
1a009f0c:	4650      	mov	r0, sl
1a009f0e:	f000 fdfd 	bl	1a00ab0c <_Bfree>
1a009f12:	e618      	b.n	1a009b46 <_dtoa_r+0x44e>
1a009f14:	201c      	movs	r0, #28
1a009f16:	e78e      	b.n	1a009e36 <_dtoa_r+0x73e>
1a009f18:	2401      	movs	r4, #1
1a009f1a:	e4b6      	b.n	1a00988a <_dtoa_r+0x192>
1a009f1c:	f1c3 0620 	rsb	r6, r3, #32
1a009f20:	9b00      	ldr	r3, [sp, #0]
1a009f22:	fa03 f006 	lsl.w	r0, r3, r6
1a009f26:	e447      	b.n	1a0097b8 <_dtoa_r+0xc0>
1a009f28:	4601      	mov	r1, r0
1a009f2a:	464a      	mov	r2, r9
1a009f2c:	4650      	mov	r0, sl
1a009f2e:	f000 ff2f 	bl	1a00ad90 <__pow5mult>
1a009f32:	9b02      	ldr	r3, [sp, #8]
1a009f34:	2b01      	cmp	r3, #1
1a009f36:	4607      	mov	r7, r0
1a009f38:	f340 81b2 	ble.w	1a00a2a0 <_dtoa_r+0xba8>
1a009f3c:	2600      	movs	r6, #0
1a009f3e:	693b      	ldr	r3, [r7, #16]
1a009f40:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a009f44:	6918      	ldr	r0, [r3, #16]
1a009f46:	f000 fe31 	bl	1a00abac <__hi0bits>
1a009f4a:	f1c0 0020 	rsb	r0, r0, #32
1a009f4e:	e767      	b.n	1a009e20 <_dtoa_r+0x728>
1a009f50:	40240000 	.word	0x40240000
1a009f54:	1a00c150 	.word	0x1a00c150
1a009f58:	4629      	mov	r1, r5
1a009f5a:	2300      	movs	r3, #0
1a009f5c:	220a      	movs	r2, #10
1a009f5e:	4650      	mov	r0, sl
1a009f60:	f000 fdde 	bl	1a00ab20 <__multadd>
1a009f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009f66:	2b00      	cmp	r3, #0
1a009f68:	4605      	mov	r5, r0
1a009f6a:	f340 82c1 	ble.w	1a00a4f0 <_dtoa_r+0xdf8>
1a009f6e:	9309      	str	r3, [sp, #36]	; 0x24
1a009f70:	2c00      	cmp	r4, #0
1a009f72:	f300 810d 	bgt.w	1a00a190 <_dtoa_r+0xa98>
1a009f76:	2e00      	cmp	r6, #0
1a009f78:	f040 81c5 	bne.w	1a00a306 <_dtoa_r+0xc0e>
1a009f7c:	46a8      	mov	r8, r5
1a009f7e:	9b00      	ldr	r3, [sp, #0]
1a009f80:	9902      	ldr	r1, [sp, #8]
1a009f82:	9e03      	ldr	r6, [sp, #12]
1a009f84:	f003 0201 	and.w	r2, r3, #1
1a009f88:	920b      	str	r2, [sp, #44]	; 0x2c
1a009f8a:	430a      	orrs	r2, r1
1a009f8c:	920a      	str	r2, [sp, #40]	; 0x28
1a009f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a009f90:	1e73      	subs	r3, r6, #1
1a009f92:	441a      	add	r2, r3
1a009f94:	9209      	str	r2, [sp, #36]	; 0x24
1a009f96:	463c      	mov	r4, r7
1a009f98:	4621      	mov	r1, r4
1a009f9a:	4658      	mov	r0, fp
1a009f9c:	f7ff fb18 	bl	1a0095d0 <quorem>
1a009fa0:	4629      	mov	r1, r5
1a009fa2:	9000      	str	r0, [sp, #0]
1a009fa4:	4658      	mov	r0, fp
1a009fa6:	f000 ff9d 	bl	1a00aee4 <__mcmp>
1a009faa:	4642      	mov	r2, r8
1a009fac:	4607      	mov	r7, r0
1a009fae:	4621      	mov	r1, r4
1a009fb0:	4650      	mov	r0, sl
1a009fb2:	f000 ffb3 	bl	1a00af1c <__mdiff>
1a009fb6:	9b00      	ldr	r3, [sp, #0]
1a009fb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a009fbc:	68c3      	ldr	r3, [r0, #12]
1a009fbe:	4681      	mov	r9, r0
1a009fc0:	2b00      	cmp	r3, #0
1a009fc2:	d13e      	bne.n	1a00a042 <_dtoa_r+0x94a>
1a009fc4:	4601      	mov	r1, r0
1a009fc6:	4658      	mov	r0, fp
1a009fc8:	9208      	str	r2, [sp, #32]
1a009fca:	f000 ff8b 	bl	1a00aee4 <__mcmp>
1a009fce:	4649      	mov	r1, r9
1a009fd0:	9004      	str	r0, [sp, #16]
1a009fd2:	4650      	mov	r0, sl
1a009fd4:	f000 fd9a 	bl	1a00ab0c <_Bfree>
1a009fd8:	9b04      	ldr	r3, [sp, #16]
1a009fda:	9a08      	ldr	r2, [sp, #32]
1a009fdc:	b91b      	cbnz	r3, 1a009fe6 <_dtoa_r+0x8ee>
1a009fde:	990a      	ldr	r1, [sp, #40]	; 0x28
1a009fe0:	2900      	cmp	r1, #0
1a009fe2:	f000 8271 	beq.w	1a00a4c8 <_dtoa_r+0xdd0>
1a009fe6:	2f00      	cmp	r7, #0
1a009fe8:	f106 0901 	add.w	r9, r6, #1
1a009fec:	f2c0 816e 	blt.w	1a00a2cc <_dtoa_r+0xbd4>
1a009ff0:	9902      	ldr	r1, [sp, #8]
1a009ff2:	430f      	orrs	r7, r1
1a009ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a009ff6:	4339      	orrs	r1, r7
1a009ff8:	f000 8168 	beq.w	1a00a2cc <_dtoa_r+0xbd4>
1a009ffc:	2b00      	cmp	r3, #0
1a009ffe:	f300 81a2 	bgt.w	1a00a346 <_dtoa_r+0xc4e>
1a00a002:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00a004:	7032      	strb	r2, [r6, #0]
1a00a006:	42b3      	cmp	r3, r6
1a00a008:	f000 81a9 	beq.w	1a00a35e <_dtoa_r+0xc66>
1a00a00c:	4659      	mov	r1, fp
1a00a00e:	2300      	movs	r3, #0
1a00a010:	220a      	movs	r2, #10
1a00a012:	4650      	mov	r0, sl
1a00a014:	f000 fd84 	bl	1a00ab20 <__multadd>
1a00a018:	4545      	cmp	r5, r8
1a00a01a:	4683      	mov	fp, r0
1a00a01c:	4629      	mov	r1, r5
1a00a01e:	f04f 0300 	mov.w	r3, #0
1a00a022:	f04f 020a 	mov.w	r2, #10
1a00a026:	4650      	mov	r0, sl
1a00a028:	d013      	beq.n	1a00a052 <_dtoa_r+0x95a>
1a00a02a:	f000 fd79 	bl	1a00ab20 <__multadd>
1a00a02e:	4641      	mov	r1, r8
1a00a030:	4605      	mov	r5, r0
1a00a032:	2300      	movs	r3, #0
1a00a034:	220a      	movs	r2, #10
1a00a036:	4650      	mov	r0, sl
1a00a038:	f000 fd72 	bl	1a00ab20 <__multadd>
1a00a03c:	464e      	mov	r6, r9
1a00a03e:	4680      	mov	r8, r0
1a00a040:	e7aa      	b.n	1a009f98 <_dtoa_r+0x8a0>
1a00a042:	4601      	mov	r1, r0
1a00a044:	4650      	mov	r0, sl
1a00a046:	9204      	str	r2, [sp, #16]
1a00a048:	f000 fd60 	bl	1a00ab0c <_Bfree>
1a00a04c:	2301      	movs	r3, #1
1a00a04e:	9a04      	ldr	r2, [sp, #16]
1a00a050:	e7c9      	b.n	1a009fe6 <_dtoa_r+0x8ee>
1a00a052:	f000 fd65 	bl	1a00ab20 <__multadd>
1a00a056:	464e      	mov	r6, r9
1a00a058:	4605      	mov	r5, r0
1a00a05a:	4680      	mov	r8, r0
1a00a05c:	e79c      	b.n	1a009f98 <_dtoa_r+0x8a0>
1a00a05e:	9b02      	ldr	r3, [sp, #8]
1a00a060:	2b02      	cmp	r3, #2
1a00a062:	f340 8082 	ble.w	1a00a16a <_dtoa_r+0xa72>
1a00a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00a068:	2b00      	cmp	r3, #0
1a00a06a:	f47f adae 	bne.w	1a009bca <_dtoa_r+0x4d2>
1a00a06e:	4639      	mov	r1, r7
1a00a070:	2205      	movs	r2, #5
1a00a072:	4650      	mov	r0, sl
1a00a074:	f000 fd54 	bl	1a00ab20 <__multadd>
1a00a078:	4601      	mov	r1, r0
1a00a07a:	4607      	mov	r7, r0
1a00a07c:	4658      	mov	r0, fp
1a00a07e:	f000 ff31 	bl	1a00aee4 <__mcmp>
1a00a082:	2800      	cmp	r0, #0
1a00a084:	f77f ada1 	ble.w	1a009bca <_dtoa_r+0x4d2>
1a00a088:	9c03      	ldr	r4, [sp, #12]
1a00a08a:	9b06      	ldr	r3, [sp, #24]
1a00a08c:	2231      	movs	r2, #49	; 0x31
1a00a08e:	f804 2b01 	strb.w	r2, [r4], #1
1a00a092:	3301      	adds	r3, #1
1a00a094:	3301      	adds	r3, #1
1a00a096:	4639      	mov	r1, r7
1a00a098:	4650      	mov	r0, sl
1a00a09a:	9306      	str	r3, [sp, #24]
1a00a09c:	f000 fd36 	bl	1a00ab0c <_Bfree>
1a00a0a0:	2d00      	cmp	r5, #0
1a00a0a2:	f47f af32 	bne.w	1a009f0a <_dtoa_r+0x812>
1a00a0a6:	e54e      	b.n	1a009b46 <_dtoa_r+0x44e>
1a00a0a8:	4639      	mov	r1, r7
1a00a0aa:	4658      	mov	r0, fp
1a00a0ac:	f000 ff1a 	bl	1a00aee4 <__mcmp>
1a00a0b0:	2800      	cmp	r0, #0
1a00a0b2:	f6bf aedb 	bge.w	1a009e6c <_dtoa_r+0x774>
1a00a0b6:	4659      	mov	r1, fp
1a00a0b8:	2300      	movs	r3, #0
1a00a0ba:	220a      	movs	r2, #10
1a00a0bc:	4650      	mov	r0, sl
1a00a0be:	f000 fd2f 	bl	1a00ab20 <__multadd>
1a00a0c2:	9b06      	ldr	r3, [sp, #24]
1a00a0c4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a00a0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00a0ca:	4683      	mov	fp, r0
1a00a0cc:	2b00      	cmp	r3, #0
1a00a0ce:	f47f af43 	bne.w	1a009f58 <_dtoa_r+0x860>
1a00a0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00a0d4:	2b00      	cmp	r3, #0
1a00a0d6:	f340 8202 	ble.w	1a00a4de <_dtoa_r+0xde6>
1a00a0da:	9309      	str	r3, [sp, #36]	; 0x24
1a00a0dc:	e6d0      	b.n	1a009e80 <_dtoa_r+0x788>
1a00a0de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00a0e0:	4659      	mov	r1, fp
1a00a0e2:	4650      	mov	r0, sl
1a00a0e4:	f000 fe54 	bl	1a00ad90 <__pow5mult>
1a00a0e8:	4683      	mov	fp, r0
1a00a0ea:	e686      	b.n	1a009dfa <_dtoa_r+0x702>
1a00a0ec:	4b9f      	ldr	r3, [pc, #636]	; (1a00a36c <_dtoa_r+0xc74>)
1a00a0ee:	9303      	str	r3, [sp, #12]
1a00a0f0:	3303      	adds	r3, #3
1a00a0f2:	f7ff bbe5 	b.w	1a0098c0 <_dtoa_r+0x1c8>
1a00a0f6:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00a0fa:	2900      	cmp	r1, #0
1a00a0fc:	f47f ae8a 	bne.w	1a009e14 <_dtoa_r+0x71c>
1a00a100:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00a104:	2b00      	cmp	r3, #0
1a00a106:	f000 80d5 	beq.w	1a00a2b4 <_dtoa_r+0xbbc>
1a00a10a:	9e00      	ldr	r6, [sp, #0]
1a00a10c:	e683      	b.n	1a009e16 <_dtoa_r+0x71e>
1a00a10e:	2301      	movs	r3, #1
1a00a110:	930b      	str	r3, [sp, #44]	; 0x2c
1a00a112:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00a114:	2800      	cmp	r0, #0
1a00a116:	dd46      	ble.n	1a00a1a6 <_dtoa_r+0xaae>
1a00a118:	900f      	str	r0, [sp, #60]	; 0x3c
1a00a11a:	9009      	str	r0, [sp, #36]	; 0x24
1a00a11c:	2100      	movs	r1, #0
1a00a11e:	2817      	cmp	r0, #23
1a00a120:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00a124:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00a126:	f77f ac19 	ble.w	1a00995c <_dtoa_r+0x264>
1a00a12a:	2201      	movs	r2, #1
1a00a12c:	2304      	movs	r3, #4
1a00a12e:	005b      	lsls	r3, r3, #1
1a00a130:	f103 0614 	add.w	r6, r3, #20
1a00a134:	42b0      	cmp	r0, r6
1a00a136:	4611      	mov	r1, r2
1a00a138:	f102 0201 	add.w	r2, r2, #1
1a00a13c:	d2f7      	bcs.n	1a00a12e <_dtoa_r+0xa36>
1a00a13e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00a142:	e40b      	b.n	1a00995c <_dtoa_r+0x264>
1a00a144:	2301      	movs	r3, #1
1a00a146:	930b      	str	r3, [sp, #44]	; 0x2c
1a00a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00a14a:	9a06      	ldr	r2, [sp, #24]
1a00a14c:	4413      	add	r3, r2
1a00a14e:	930f      	str	r3, [sp, #60]	; 0x3c
1a00a150:	3301      	adds	r3, #1
1a00a152:	2b01      	cmp	r3, #1
1a00a154:	4618      	mov	r0, r3
1a00a156:	9309      	str	r3, [sp, #36]	; 0x24
1a00a158:	bfb8      	it	lt
1a00a15a:	2001      	movlt	r0, #1
1a00a15c:	e7de      	b.n	1a00a11c <_dtoa_r+0xa24>
1a00a15e:	2300      	movs	r3, #0
1a00a160:	930b      	str	r3, [sp, #44]	; 0x2c
1a00a162:	e7f1      	b.n	1a00a148 <_dtoa_r+0xa50>
1a00a164:	2300      	movs	r3, #0
1a00a166:	930b      	str	r3, [sp, #44]	; 0x2c
1a00a168:	e7d3      	b.n	1a00a112 <_dtoa_r+0xa1a>
1a00a16a:	9b06      	ldr	r3, [sp, #24]
1a00a16c:	3301      	adds	r3, #1
1a00a16e:	9306      	str	r3, [sp, #24]
1a00a170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00a172:	2b00      	cmp	r3, #0
1a00a174:	f47f aefc 	bne.w	1a009f70 <_dtoa_r+0x878>
1a00a178:	4639      	mov	r1, r7
1a00a17a:	4658      	mov	r0, fp
1a00a17c:	f7ff fa28 	bl	1a0095d0 <quorem>
1a00a180:	9c03      	ldr	r4, [sp, #12]
1a00a182:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a00a186:	2300      	movs	r3, #0
1a00a188:	f804 9b01 	strb.w	r9, [r4], #1
1a00a18c:	9300      	str	r3, [sp, #0]
1a00a18e:	e692      	b.n	1a009eb6 <_dtoa_r+0x7be>
1a00a190:	4629      	mov	r1, r5
1a00a192:	4622      	mov	r2, r4
1a00a194:	4650      	mov	r0, sl
1a00a196:	f000 fe4b 	bl	1a00ae30 <__lshift>
1a00a19a:	4605      	mov	r5, r0
1a00a19c:	e6eb      	b.n	1a009f76 <_dtoa_r+0x87e>
1a00a19e:	1b9e      	subs	r6, r3, r6
1a00a1a0:	e5ce      	b.n	1a009d40 <_dtoa_r+0x648>
1a00a1a2:	2602      	movs	r6, #2
1a00a1a4:	e403      	b.n	1a0099ae <_dtoa_r+0x2b6>
1a00a1a6:	2501      	movs	r5, #1
1a00a1a8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a00a1ac:	f7ff bbd2 	b.w	1a009954 <_dtoa_r+0x25c>
1a00a1b0:	d103      	bne.n	1a00a1ba <_dtoa_r+0xac2>
1a00a1b2:	f019 0f01 	tst.w	r9, #1
1a00a1b6:	f47f ae8c 	bne.w	1a009ed2 <_dtoa_r+0x7da>
1a00a1ba:	1e63      	subs	r3, r4, #1
1a00a1bc:	e001      	b.n	1a00a1c2 <_dtoa_r+0xaca>
1a00a1be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00a1c2:	2a30      	cmp	r2, #48	; 0x30
1a00a1c4:	f103 0401 	add.w	r4, r3, #1
1a00a1c8:	d0f9      	beq.n	1a00a1be <_dtoa_r+0xac6>
1a00a1ca:	e690      	b.n	1a009eee <_dtoa_r+0x7f6>
1a00a1cc:	9a06      	ldr	r2, [sp, #24]
1a00a1ce:	3201      	adds	r2, #1
1a00a1d0:	9206      	str	r2, [sp, #24]
1a00a1d2:	9a03      	ldr	r2, [sp, #12]
1a00a1d4:	2331      	movs	r3, #49	; 0x31
1a00a1d6:	7013      	strb	r3, [r2, #0]
1a00a1d8:	e689      	b.n	1a009eee <_dtoa_r+0x7f6>
1a00a1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00a1dc:	2a00      	cmp	r2, #0
1a00a1de:	f000 8126 	beq.w	1a00a42e <_dtoa_r+0xd36>
1a00a1e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00a1e6:	9a08      	ldr	r2, [sp, #32]
1a00a1e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a00a1ea:	4614      	mov	r4, r2
1a00a1ec:	441a      	add	r2, r3
1a00a1ee:	4498      	add	r8, r3
1a00a1f0:	9208      	str	r2, [sp, #32]
1a00a1f2:	e5ae      	b.n	1a009d52 <_dtoa_r+0x65a>
1a00a1f4:	4630      	mov	r0, r6
1a00a1f6:	f7fb fbd3 	bl	1a0059a0 <__aeabi_i2d>
1a00a1fa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00a1fe:	f7fb fc39 	bl	1a005a74 <__aeabi_dmul>
1a00a202:	2200      	movs	r2, #0
1a00a204:	4b5a      	ldr	r3, [pc, #360]	; (1a00a370 <_dtoa_r+0xc78>)
1a00a206:	f7fb fa7f 	bl	1a005708 <__adddf3>
1a00a20a:	4604      	mov	r4, r0
1a00a20c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00a210:	2200      	movs	r2, #0
1a00a212:	4b58      	ldr	r3, [pc, #352]	; (1a00a374 <_dtoa_r+0xc7c>)
1a00a214:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00a218:	f7fb fa74 	bl	1a005704 <__aeabi_dsub>
1a00a21c:	4622      	mov	r2, r4
1a00a21e:	462b      	mov	r3, r5
1a00a220:	4606      	mov	r6, r0
1a00a222:	460f      	mov	r7, r1
1a00a224:	f7fb feb6 	bl	1a005f94 <__aeabi_dcmpgt>
1a00a228:	2800      	cmp	r0, #0
1a00a22a:	f040 8089 	bne.w	1a00a340 <_dtoa_r+0xc48>
1a00a22e:	4622      	mov	r2, r4
1a00a230:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00a234:	4630      	mov	r0, r6
1a00a236:	4639      	mov	r1, r7
1a00a238:	f7fb fe8e 	bl	1a005f58 <__aeabi_dcmplt>
1a00a23c:	2800      	cmp	r0, #0
1a00a23e:	f43f ac9c 	beq.w	1a009b7a <_dtoa_r+0x482>
1a00a242:	2700      	movs	r7, #0
1a00a244:	463d      	mov	r5, r7
1a00a246:	e4c0      	b.n	1a009bca <_dtoa_r+0x4d2>
1a00a248:	f000 80f5 	beq.w	1a00a436 <_dtoa_r+0xd3e>
1a00a24c:	9b06      	ldr	r3, [sp, #24]
1a00a24e:	425c      	negs	r4, r3
1a00a250:	4b49      	ldr	r3, [pc, #292]	; (1a00a378 <_dtoa_r+0xc80>)
1a00a252:	f004 020f 	and.w	r2, r4, #15
1a00a256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00a25e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00a262:	f7fb fc07 	bl	1a005a74 <__aeabi_dmul>
1a00a266:	1124      	asrs	r4, r4, #4
1a00a268:	e9cd 0100 	strd	r0, r1, [sp]
1a00a26c:	f000 80e3 	beq.w	1a00a436 <_dtoa_r+0xd3e>
1a00a270:	4d42      	ldr	r5, [pc, #264]	; (1a00a37c <_dtoa_r+0xc84>)
1a00a272:	2300      	movs	r3, #0
1a00a274:	2602      	movs	r6, #2
1a00a276:	07e2      	lsls	r2, r4, #31
1a00a278:	d505      	bpl.n	1a00a286 <_dtoa_r+0xb8e>
1a00a27a:	e9d5 2300 	ldrd	r2, r3, [r5]
1a00a27e:	f7fb fbf9 	bl	1a005a74 <__aeabi_dmul>
1a00a282:	3601      	adds	r6, #1
1a00a284:	2301      	movs	r3, #1
1a00a286:	1064      	asrs	r4, r4, #1
1a00a288:	f105 0508 	add.w	r5, r5, #8
1a00a28c:	d1f3      	bne.n	1a00a276 <_dtoa_r+0xb7e>
1a00a28e:	2b00      	cmp	r3, #0
1a00a290:	f43f aba6 	beq.w	1a0099e0 <_dtoa_r+0x2e8>
1a00a294:	e9cd 0100 	strd	r0, r1, [sp]
1a00a298:	f7ff bba2 	b.w	1a0099e0 <_dtoa_r+0x2e8>
1a00a29c:	900d      	str	r0, [sp, #52]	; 0x34
1a00a29e:	e564      	b.n	1a009d6a <_dtoa_r+0x672>
1a00a2a0:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00a2a4:	2900      	cmp	r1, #0
1a00a2a6:	f47f ae49 	bne.w	1a009f3c <_dtoa_r+0x844>
1a00a2aa:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00a2ae:	2b00      	cmp	r3, #0
1a00a2b0:	f47f ae44 	bne.w	1a009f3c <_dtoa_r+0x844>
1a00a2b4:	4e32      	ldr	r6, [pc, #200]	; (1a00a380 <_dtoa_r+0xc88>)
1a00a2b6:	4016      	ands	r6, r2
1a00a2b8:	2e00      	cmp	r6, #0
1a00a2ba:	f43f adac 	beq.w	1a009e16 <_dtoa_r+0x71e>
1a00a2be:	9b08      	ldr	r3, [sp, #32]
1a00a2c0:	3301      	adds	r3, #1
1a00a2c2:	9308      	str	r3, [sp, #32]
1a00a2c4:	f108 0801 	add.w	r8, r8, #1
1a00a2c8:	2601      	movs	r6, #1
1a00a2ca:	e5a4      	b.n	1a009e16 <_dtoa_r+0x71e>
1a00a2cc:	2b00      	cmp	r3, #0
1a00a2ce:	4627      	mov	r7, r4
1a00a2d0:	464c      	mov	r4, r9
1a00a2d2:	4691      	mov	r9, r2
1a00a2d4:	dd12      	ble.n	1a00a2fc <_dtoa_r+0xc04>
1a00a2d6:	4659      	mov	r1, fp
1a00a2d8:	2201      	movs	r2, #1
1a00a2da:	4650      	mov	r0, sl
1a00a2dc:	f000 fda8 	bl	1a00ae30 <__lshift>
1a00a2e0:	4639      	mov	r1, r7
1a00a2e2:	4683      	mov	fp, r0
1a00a2e4:	f000 fdfe 	bl	1a00aee4 <__mcmp>
1a00a2e8:	2800      	cmp	r0, #0
1a00a2ea:	f340 80df 	ble.w	1a00a4ac <_dtoa_r+0xdb4>
1a00a2ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00a2f2:	f000 80d0 	beq.w	1a00a496 <_dtoa_r+0xd9e>
1a00a2f6:	9b00      	ldr	r3, [sp, #0]
1a00a2f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a00a2fc:	9500      	str	r5, [sp, #0]
1a00a2fe:	f886 9000 	strb.w	r9, [r6]
1a00a302:	4645      	mov	r5, r8
1a00a304:	e5f3      	b.n	1a009eee <_dtoa_r+0x7f6>
1a00a306:	6869      	ldr	r1, [r5, #4]
1a00a308:	4650      	mov	r0, sl
1a00a30a:	f000 fbd9 	bl	1a00aac0 <_Balloc>
1a00a30e:	692b      	ldr	r3, [r5, #16]
1a00a310:	3302      	adds	r3, #2
1a00a312:	009a      	lsls	r2, r3, #2
1a00a314:	4604      	mov	r4, r0
1a00a316:	f105 010c 	add.w	r1, r5, #12
1a00a31a:	300c      	adds	r0, #12
1a00a31c:	f7fc fe0e 	bl	1a006f3c <memcpy>
1a00a320:	4621      	mov	r1, r4
1a00a322:	2201      	movs	r2, #1
1a00a324:	4650      	mov	r0, sl
1a00a326:	f000 fd83 	bl	1a00ae30 <__lshift>
1a00a32a:	4680      	mov	r8, r0
1a00a32c:	e627      	b.n	1a009f7e <_dtoa_r+0x886>
1a00a32e:	f8dd b000 	ldr.w	fp, [sp]
1a00a332:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00a336:	e406      	b.n	1a009b46 <_dtoa_r+0x44e>
1a00a338:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a00a33c:	1a9c      	subs	r4, r3, r2
1a00a33e:	e508      	b.n	1a009d52 <_dtoa_r+0x65a>
1a00a340:	2700      	movs	r7, #0
1a00a342:	463d      	mov	r5, r7
1a00a344:	e6a0      	b.n	1a00a088 <_dtoa_r+0x990>
1a00a346:	2a39      	cmp	r2, #57	; 0x39
1a00a348:	4627      	mov	r7, r4
1a00a34a:	464c      	mov	r4, r9
1a00a34c:	f000 80a3 	beq.w	1a00a496 <_dtoa_r+0xd9e>
1a00a350:	f102 0901 	add.w	r9, r2, #1
1a00a354:	9500      	str	r5, [sp, #0]
1a00a356:	f886 9000 	strb.w	r9, [r6]
1a00a35a:	4645      	mov	r5, r8
1a00a35c:	e5c7      	b.n	1a009eee <_dtoa_r+0x7f6>
1a00a35e:	4627      	mov	r7, r4
1a00a360:	9500      	str	r5, [sp, #0]
1a00a362:	464c      	mov	r4, r9
1a00a364:	4645      	mov	r5, r8
1a00a366:	4691      	mov	r9, r2
1a00a368:	e5a5      	b.n	1a009eb6 <_dtoa_r+0x7be>
1a00a36a:	bf00      	nop
1a00a36c:	1a00c174 	.word	0x1a00c174
1a00a370:	401c0000 	.word	0x401c0000
1a00a374:	40140000 	.word	0x40140000
1a00a378:	1a00c1b0 	.word	0x1a00c1b0
1a00a37c:	1a00c188 	.word	0x1a00c188
1a00a380:	7ff00000 	.word	0x7ff00000
1a00a384:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00a388:	f7fb fb74 	bl	1a005a74 <__aeabi_dmul>
1a00a38c:	9b03      	ldr	r3, [sp, #12]
1a00a38e:	701d      	strb	r5, [r3, #0]
1a00a390:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00a392:	2b01      	cmp	r3, #1
1a00a394:	e9cd 0100 	strd	r0, r1, [sp]
1a00a398:	d023      	beq.n	1a00a3e2 <_dtoa_r+0xcea>
1a00a39a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00a39c:	9a03      	ldr	r2, [sp, #12]
1a00a39e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00a3a2:	4413      	add	r3, r2
1a00a3a4:	46c1      	mov	r9, r8
1a00a3a6:	4698      	mov	r8, r3
1a00a3a8:	2200      	movs	r2, #0
1a00a3aa:	4b64      	ldr	r3, [pc, #400]	; (1a00a53c <_dtoa_r+0xe44>)
1a00a3ac:	4630      	mov	r0, r6
1a00a3ae:	4639      	mov	r1, r7
1a00a3b0:	f7fb fb60 	bl	1a005a74 <__aeabi_dmul>
1a00a3b4:	460f      	mov	r7, r1
1a00a3b6:	4606      	mov	r6, r0
1a00a3b8:	f001 fa5c 	bl	1a00b874 <__aeabi_d2iz>
1a00a3bc:	4605      	mov	r5, r0
1a00a3be:	f7fb faef 	bl	1a0059a0 <__aeabi_i2d>
1a00a3c2:	3530      	adds	r5, #48	; 0x30
1a00a3c4:	4602      	mov	r2, r0
1a00a3c6:	460b      	mov	r3, r1
1a00a3c8:	4630      	mov	r0, r6
1a00a3ca:	4639      	mov	r1, r7
1a00a3cc:	f7fb f99a 	bl	1a005704 <__aeabi_dsub>
1a00a3d0:	f804 5b01 	strb.w	r5, [r4], #1
1a00a3d4:	45a0      	cmp	r8, r4
1a00a3d6:	4606      	mov	r6, r0
1a00a3d8:	460f      	mov	r7, r1
1a00a3da:	d1e5      	bne.n	1a00a3a8 <_dtoa_r+0xcb0>
1a00a3dc:	46c8      	mov	r8, r9
1a00a3de:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00a3e2:	4b57      	ldr	r3, [pc, #348]	; (1a00a540 <_dtoa_r+0xe48>)
1a00a3e4:	2200      	movs	r2, #0
1a00a3e6:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00a3ea:	f7fb f98d 	bl	1a005708 <__adddf3>
1a00a3ee:	4632      	mov	r2, r6
1a00a3f0:	463b      	mov	r3, r7
1a00a3f2:	f7fb fdb1 	bl	1a005f58 <__aeabi_dcmplt>
1a00a3f6:	2800      	cmp	r0, #0
1a00a3f8:	d152      	bne.n	1a00a4a0 <_dtoa_r+0xda8>
1a00a3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00a3fe:	2000      	movs	r0, #0
1a00a400:	494f      	ldr	r1, [pc, #316]	; (1a00a540 <_dtoa_r+0xe48>)
1a00a402:	f7fb f97f 	bl	1a005704 <__aeabi_dsub>
1a00a406:	4632      	mov	r2, r6
1a00a408:	463b      	mov	r3, r7
1a00a40a:	f7fb fdc3 	bl	1a005f94 <__aeabi_dcmpgt>
1a00a40e:	2800      	cmp	r0, #0
1a00a410:	f43f abb3 	beq.w	1a009b7a <_dtoa_r+0x482>
1a00a414:	e000      	b.n	1a00a418 <_dtoa_r+0xd20>
1a00a416:	4614      	mov	r4, r2
1a00a418:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a00a41c:	2b30      	cmp	r3, #48	; 0x30
1a00a41e:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00a422:	d0f8      	beq.n	1a00a416 <_dtoa_r+0xd1e>
1a00a424:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a426:	3301      	adds	r3, #1
1a00a428:	9306      	str	r3, [sp, #24]
1a00a42a:	f7ff bb8c 	b.w	1a009b46 <_dtoa_r+0x44e>
1a00a42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a00a430:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00a434:	e6d7      	b.n	1a00a1e6 <_dtoa_r+0xaee>
1a00a436:	2602      	movs	r6, #2
1a00a438:	f7ff bad2 	b.w	1a0099e0 <_dtoa_r+0x2e8>
1a00a43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00a43e:	2b00      	cmp	r3, #0
1a00a440:	f43f aed8 	beq.w	1a00a1f4 <_dtoa_r+0xafc>
1a00a444:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00a446:	2f00      	cmp	r7, #0
1a00a448:	f77f ab97 	ble.w	1a009b7a <_dtoa_r+0x482>
1a00a44c:	2200      	movs	r2, #0
1a00a44e:	4b3b      	ldr	r3, [pc, #236]	; (1a00a53c <_dtoa_r+0xe44>)
1a00a450:	4620      	mov	r0, r4
1a00a452:	4629      	mov	r1, r5
1a00a454:	f7fb fb0e 	bl	1a005a74 <__aeabi_dmul>
1a00a458:	4604      	mov	r4, r0
1a00a45a:	460d      	mov	r5, r1
1a00a45c:	1c70      	adds	r0, r6, #1
1a00a45e:	e9cd 4500 	strd	r4, r5, [sp]
1a00a462:	f7fb fa9d 	bl	1a0059a0 <__aeabi_i2d>
1a00a466:	4622      	mov	r2, r4
1a00a468:	462b      	mov	r3, r5
1a00a46a:	f7fb fb03 	bl	1a005a74 <__aeabi_dmul>
1a00a46e:	4b35      	ldr	r3, [pc, #212]	; (1a00a544 <_dtoa_r+0xe4c>)
1a00a470:	2200      	movs	r2, #0
1a00a472:	f7fb f949 	bl	1a005708 <__adddf3>
1a00a476:	9b06      	ldr	r3, [sp, #24]
1a00a478:	9710      	str	r7, [sp, #64]	; 0x40
1a00a47a:	3b01      	subs	r3, #1
1a00a47c:	4604      	mov	r4, r0
1a00a47e:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a00a482:	9312      	str	r3, [sp, #72]	; 0x48
1a00a484:	f7ff bacf 	b.w	1a009a26 <_dtoa_r+0x32e>
1a00a488:	9a06      	ldr	r2, [sp, #24]
1a00a48a:	3201      	adds	r2, #1
1a00a48c:	9206      	str	r2, [sp, #24]
1a00a48e:	2231      	movs	r2, #49	; 0x31
1a00a490:	701a      	strb	r2, [r3, #0]
1a00a492:	f7ff bb58 	b.w	1a009b46 <_dtoa_r+0x44e>
1a00a496:	2239      	movs	r2, #57	; 0x39
1a00a498:	9500      	str	r5, [sp, #0]
1a00a49a:	7032      	strb	r2, [r6, #0]
1a00a49c:	4645      	mov	r5, r8
1a00a49e:	e518      	b.n	1a009ed2 <_dtoa_r+0x7da>
1a00a4a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a4a2:	3301      	adds	r3, #1
1a00a4a4:	9306      	str	r3, [sp, #24]
1a00a4a6:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00a4aa:	e427      	b.n	1a009cfc <_dtoa_r+0x604>
1a00a4ac:	f47f af26 	bne.w	1a00a2fc <_dtoa_r+0xc04>
1a00a4b0:	f019 0f01 	tst.w	r9, #1
1a00a4b4:	f47f af1b 	bne.w	1a00a2ee <_dtoa_r+0xbf6>
1a00a4b8:	e720      	b.n	1a00a2fc <_dtoa_r+0xc04>
1a00a4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a4bc:	3301      	adds	r3, #1
1a00a4be:	46da      	mov	sl, fp
1a00a4c0:	9306      	str	r3, [sp, #24]
1a00a4c2:	f8dd b000 	ldr.w	fp, [sp]
1a00a4c6:	e419      	b.n	1a009cfc <_dtoa_r+0x604>
1a00a4c8:	2a39      	cmp	r2, #57	; 0x39
1a00a4ca:	463b      	mov	r3, r7
1a00a4cc:	4691      	mov	r9, r2
1a00a4ce:	4627      	mov	r7, r4
1a00a4d0:	f106 0401 	add.w	r4, r6, #1
1a00a4d4:	d0df      	beq.n	1a00a496 <_dtoa_r+0xd9e>
1a00a4d6:	2b00      	cmp	r3, #0
1a00a4d8:	f73f af0d 	bgt.w	1a00a2f6 <_dtoa_r+0xbfe>
1a00a4dc:	e70e      	b.n	1a00a2fc <_dtoa_r+0xc04>
1a00a4de:	9b02      	ldr	r3, [sp, #8]
1a00a4e0:	2b02      	cmp	r3, #2
1a00a4e2:	f77f ae49 	ble.w	1a00a178 <_dtoa_r+0xa80>
1a00a4e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00a4e8:	9309      	str	r3, [sp, #36]	; 0x24
1a00a4ea:	f8cd 8018 	str.w	r8, [sp, #24]
1a00a4ee:	e5ba      	b.n	1a00a066 <_dtoa_r+0x96e>
1a00a4f0:	9b02      	ldr	r3, [sp, #8]
1a00a4f2:	2b02      	cmp	r3, #2
1a00a4f4:	dcf7      	bgt.n	1a00a4e6 <_dtoa_r+0xdee>
1a00a4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00a4f8:	e539      	b.n	1a009f6e <_dtoa_r+0x876>
1a00a4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00a4fc:	3301      	adds	r3, #1
1a00a4fe:	9306      	str	r3, [sp, #24]
1a00a500:	f7ff bbfc 	b.w	1a009cfc <_dtoa_r+0x604>
1a00a504:	4b10      	ldr	r3, [pc, #64]	; (1a00a548 <_dtoa_r+0xe50>)
1a00a506:	9303      	str	r3, [sp, #12]
1a00a508:	f7ff b934 	b.w	1a009774 <_dtoa_r+0x7c>
1a00a50c:	f43f ac98 	beq.w	1a009e40 <_dtoa_r+0x748>
1a00a510:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00a514:	e48f      	b.n	1a009e36 <_dtoa_r+0x73e>
1a00a516:	2400      	movs	r4, #0
1a00a518:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a00a51c:	4621      	mov	r1, r4
1a00a51e:	4650      	mov	r0, sl
1a00a520:	f000 face 	bl	1a00aac0 <_Balloc>
1a00a524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00a528:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a00a52c:	930f      	str	r3, [sp, #60]	; 0x3c
1a00a52e:	2301      	movs	r3, #1
1a00a530:	9003      	str	r0, [sp, #12]
1a00a532:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a00a536:	930b      	str	r3, [sp, #44]	; 0x2c
1a00a538:	f7ff bb23 	b.w	1a009b82 <_dtoa_r+0x48a>
1a00a53c:	40240000 	.word	0x40240000
1a00a540:	3fe00000 	.word	0x3fe00000
1a00a544:	401c0000 	.word	0x401c0000
1a00a548:	1a00c178 	.word	0x1a00c178

1a00a54c <__sfvwrite_r>:
1a00a54c:	6893      	ldr	r3, [r2, #8]
1a00a54e:	2b00      	cmp	r3, #0
1a00a550:	f000 8102 	beq.w	1a00a758 <__sfvwrite_r+0x20c>
1a00a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a558:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a00a55c:	b29b      	uxth	r3, r3
1a00a55e:	460c      	mov	r4, r1
1a00a560:	0719      	lsls	r1, r3, #28
1a00a562:	b083      	sub	sp, #12
1a00a564:	4682      	mov	sl, r0
1a00a566:	4690      	mov	r8, r2
1a00a568:	d535      	bpl.n	1a00a5d6 <__sfvwrite_r+0x8a>
1a00a56a:	6922      	ldr	r2, [r4, #16]
1a00a56c:	b39a      	cbz	r2, 1a00a5d6 <__sfvwrite_r+0x8a>
1a00a56e:	f013 0202 	ands.w	r2, r3, #2
1a00a572:	f8d8 6000 	ldr.w	r6, [r8]
1a00a576:	d03d      	beq.n	1a00a5f4 <__sfvwrite_r+0xa8>
1a00a578:	2700      	movs	r7, #0
1a00a57a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a00a57e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00a582:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a00a850 <__sfvwrite_r+0x304>
1a00a586:	463d      	mov	r5, r7
1a00a588:	454d      	cmp	r5, r9
1a00a58a:	462b      	mov	r3, r5
1a00a58c:	463a      	mov	r2, r7
1a00a58e:	bf28      	it	cs
1a00a590:	464b      	movcs	r3, r9
1a00a592:	4661      	mov	r1, ip
1a00a594:	4650      	mov	r0, sl
1a00a596:	b1d5      	cbz	r5, 1a00a5ce <__sfvwrite_r+0x82>
1a00a598:	47d8      	blx	fp
1a00a59a:	2800      	cmp	r0, #0
1a00a59c:	f340 80d2 	ble.w	1a00a744 <__sfvwrite_r+0x1f8>
1a00a5a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00a5a4:	1a1b      	subs	r3, r3, r0
1a00a5a6:	4407      	add	r7, r0
1a00a5a8:	1a2d      	subs	r5, r5, r0
1a00a5aa:	f8c8 3008 	str.w	r3, [r8, #8]
1a00a5ae:	2b00      	cmp	r3, #0
1a00a5b0:	f000 80b7 	beq.w	1a00a722 <__sfvwrite_r+0x1d6>
1a00a5b4:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00a5b8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a00a5bc:	454d      	cmp	r5, r9
1a00a5be:	462b      	mov	r3, r5
1a00a5c0:	463a      	mov	r2, r7
1a00a5c2:	bf28      	it	cs
1a00a5c4:	464b      	movcs	r3, r9
1a00a5c6:	4661      	mov	r1, ip
1a00a5c8:	4650      	mov	r0, sl
1a00a5ca:	2d00      	cmp	r5, #0
1a00a5cc:	d1e4      	bne.n	1a00a598 <__sfvwrite_r+0x4c>
1a00a5ce:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00a5d2:	3608      	adds	r6, #8
1a00a5d4:	e7d8      	b.n	1a00a588 <__sfvwrite_r+0x3c>
1a00a5d6:	4621      	mov	r1, r4
1a00a5d8:	4650      	mov	r0, sl
1a00a5da:	f7fe ff91 	bl	1a009500 <__swsetup_r>
1a00a5de:	2800      	cmp	r0, #0
1a00a5e0:	f040 8130 	bne.w	1a00a844 <__sfvwrite_r+0x2f8>
1a00a5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a5e8:	f8d8 6000 	ldr.w	r6, [r8]
1a00a5ec:	b29b      	uxth	r3, r3
1a00a5ee:	f013 0202 	ands.w	r2, r3, #2
1a00a5f2:	d1c1      	bne.n	1a00a578 <__sfvwrite_r+0x2c>
1a00a5f4:	f013 0901 	ands.w	r9, r3, #1
1a00a5f8:	f040 80b0 	bne.w	1a00a75c <__sfvwrite_r+0x210>
1a00a5fc:	68a7      	ldr	r7, [r4, #8]
1a00a5fe:	6820      	ldr	r0, [r4, #0]
1a00a600:	464d      	mov	r5, r9
1a00a602:	2d00      	cmp	r5, #0
1a00a604:	d054      	beq.n	1a00a6b0 <__sfvwrite_r+0x164>
1a00a606:	059a      	lsls	r2, r3, #22
1a00a608:	f140 80bc 	bpl.w	1a00a784 <__sfvwrite_r+0x238>
1a00a60c:	42af      	cmp	r7, r5
1a00a60e:	46bb      	mov	fp, r7
1a00a610:	f200 80e7 	bhi.w	1a00a7e2 <__sfvwrite_r+0x296>
1a00a614:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00a618:	d02f      	beq.n	1a00a67a <__sfvwrite_r+0x12e>
1a00a61a:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a00a61e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a00a622:	eba0 0b01 	sub.w	fp, r0, r1
1a00a626:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a00a62a:	1c68      	adds	r0, r5, #1
1a00a62c:	107f      	asrs	r7, r7, #1
1a00a62e:	4458      	add	r0, fp
1a00a630:	42b8      	cmp	r0, r7
1a00a632:	463a      	mov	r2, r7
1a00a634:	bf84      	itt	hi
1a00a636:	4607      	movhi	r7, r0
1a00a638:	463a      	movhi	r2, r7
1a00a63a:	055b      	lsls	r3, r3, #21
1a00a63c:	f140 80e9 	bpl.w	1a00a812 <__sfvwrite_r+0x2c6>
1a00a640:	4611      	mov	r1, r2
1a00a642:	4650      	mov	r0, sl
1a00a644:	f7fc f9c2 	bl	1a0069cc <_malloc_r>
1a00a648:	2800      	cmp	r0, #0
1a00a64a:	f000 80f5 	beq.w	1a00a838 <__sfvwrite_r+0x2ec>
1a00a64e:	465a      	mov	r2, fp
1a00a650:	6921      	ldr	r1, [r4, #16]
1a00a652:	9001      	str	r0, [sp, #4]
1a00a654:	f7fc fc72 	bl	1a006f3c <memcpy>
1a00a658:	89a2      	ldrh	r2, [r4, #12]
1a00a65a:	9b01      	ldr	r3, [sp, #4]
1a00a65c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a00a660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00a664:	81a2      	strh	r2, [r4, #12]
1a00a666:	eba7 020b 	sub.w	r2, r7, fp
1a00a66a:	eb03 000b 	add.w	r0, r3, fp
1a00a66e:	6167      	str	r7, [r4, #20]
1a00a670:	6123      	str	r3, [r4, #16]
1a00a672:	6020      	str	r0, [r4, #0]
1a00a674:	60a2      	str	r2, [r4, #8]
1a00a676:	462f      	mov	r7, r5
1a00a678:	46ab      	mov	fp, r5
1a00a67a:	465a      	mov	r2, fp
1a00a67c:	4649      	mov	r1, r9
1a00a67e:	f000 f9b7 	bl	1a00a9f0 <memmove>
1a00a682:	68a2      	ldr	r2, [r4, #8]
1a00a684:	6823      	ldr	r3, [r4, #0]
1a00a686:	1bd2      	subs	r2, r2, r7
1a00a688:	445b      	add	r3, fp
1a00a68a:	462f      	mov	r7, r5
1a00a68c:	60a2      	str	r2, [r4, #8]
1a00a68e:	6023      	str	r3, [r4, #0]
1a00a690:	2500      	movs	r5, #0
1a00a692:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00a696:	1bdb      	subs	r3, r3, r7
1a00a698:	44b9      	add	r9, r7
1a00a69a:	f8c8 3008 	str.w	r3, [r8, #8]
1a00a69e:	2b00      	cmp	r3, #0
1a00a6a0:	d03f      	beq.n	1a00a722 <__sfvwrite_r+0x1d6>
1a00a6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a6a6:	68a7      	ldr	r7, [r4, #8]
1a00a6a8:	6820      	ldr	r0, [r4, #0]
1a00a6aa:	b29b      	uxth	r3, r3
1a00a6ac:	2d00      	cmp	r5, #0
1a00a6ae:	d1aa      	bne.n	1a00a606 <__sfvwrite_r+0xba>
1a00a6b0:	e9d6 9500 	ldrd	r9, r5, [r6]
1a00a6b4:	3608      	adds	r6, #8
1a00a6b6:	e7a4      	b.n	1a00a602 <__sfvwrite_r+0xb6>
1a00a6b8:	f10b 0308 	add.w	r3, fp, #8
1a00a6bc:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00a6c0:	469b      	mov	fp, r3
1a00a6c2:	3308      	adds	r3, #8
1a00a6c4:	2f00      	cmp	r7, #0
1a00a6c6:	d0f9      	beq.n	1a00a6bc <__sfvwrite_r+0x170>
1a00a6c8:	463a      	mov	r2, r7
1a00a6ca:	210a      	movs	r1, #10
1a00a6cc:	4630      	mov	r0, r6
1a00a6ce:	f000 f93f 	bl	1a00a950 <memchr>
1a00a6d2:	2800      	cmp	r0, #0
1a00a6d4:	d053      	beq.n	1a00a77e <__sfvwrite_r+0x232>
1a00a6d6:	3001      	adds	r0, #1
1a00a6d8:	eba0 0906 	sub.w	r9, r0, r6
1a00a6dc:	464b      	mov	r3, r9
1a00a6de:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a00a6e2:	6820      	ldr	r0, [r4, #0]
1a00a6e4:	42bb      	cmp	r3, r7
1a00a6e6:	bf28      	it	cs
1a00a6e8:	463b      	movcs	r3, r7
1a00a6ea:	4288      	cmp	r0, r1
1a00a6ec:	d903      	bls.n	1a00a6f6 <__sfvwrite_r+0x1aa>
1a00a6ee:	68a5      	ldr	r5, [r4, #8]
1a00a6f0:	4415      	add	r5, r2
1a00a6f2:	42ab      	cmp	r3, r5
1a00a6f4:	dc19      	bgt.n	1a00a72a <__sfvwrite_r+0x1de>
1a00a6f6:	429a      	cmp	r2, r3
1a00a6f8:	dc7d      	bgt.n	1a00a7f6 <__sfvwrite_r+0x2aa>
1a00a6fa:	4613      	mov	r3, r2
1a00a6fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a00a6fe:	69e1      	ldr	r1, [r4, #28]
1a00a700:	4632      	mov	r2, r6
1a00a702:	4650      	mov	r0, sl
1a00a704:	47a8      	blx	r5
1a00a706:	1e05      	subs	r5, r0, #0
1a00a708:	dd1c      	ble.n	1a00a744 <__sfvwrite_r+0x1f8>
1a00a70a:	ebb9 0905 	subs.w	r9, r9, r5
1a00a70e:	d06b      	beq.n	1a00a7e8 <__sfvwrite_r+0x29c>
1a00a710:	2001      	movs	r0, #1
1a00a712:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00a716:	1b5b      	subs	r3, r3, r5
1a00a718:	442e      	add	r6, r5
1a00a71a:	1b7f      	subs	r7, r7, r5
1a00a71c:	f8c8 3008 	str.w	r3, [r8, #8]
1a00a720:	bb13      	cbnz	r3, 1a00a768 <__sfvwrite_r+0x21c>
1a00a722:	2000      	movs	r0, #0
1a00a724:	b003      	add	sp, #12
1a00a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a72a:	4631      	mov	r1, r6
1a00a72c:	462a      	mov	r2, r5
1a00a72e:	f000 f95f 	bl	1a00a9f0 <memmove>
1a00a732:	6823      	ldr	r3, [r4, #0]
1a00a734:	442b      	add	r3, r5
1a00a736:	6023      	str	r3, [r4, #0]
1a00a738:	4621      	mov	r1, r4
1a00a73a:	4650      	mov	r0, sl
1a00a73c:	f7fb ff18 	bl	1a006570 <_fflush_r>
1a00a740:	2800      	cmp	r0, #0
1a00a742:	d0e2      	beq.n	1a00a70a <__sfvwrite_r+0x1be>
1a00a744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00a74c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00a750:	81a3      	strh	r3, [r4, #12]
1a00a752:	b003      	add	sp, #12
1a00a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a758:	2000      	movs	r0, #0
1a00a75a:	4770      	bx	lr
1a00a75c:	4633      	mov	r3, r6
1a00a75e:	4691      	mov	r9, r2
1a00a760:	4610      	mov	r0, r2
1a00a762:	4617      	mov	r7, r2
1a00a764:	464e      	mov	r6, r9
1a00a766:	469b      	mov	fp, r3
1a00a768:	2f00      	cmp	r7, #0
1a00a76a:	d0a5      	beq.n	1a00a6b8 <__sfvwrite_r+0x16c>
1a00a76c:	2800      	cmp	r0, #0
1a00a76e:	d1b5      	bne.n	1a00a6dc <__sfvwrite_r+0x190>
1a00a770:	463a      	mov	r2, r7
1a00a772:	210a      	movs	r1, #10
1a00a774:	4630      	mov	r0, r6
1a00a776:	f000 f8eb 	bl	1a00a950 <memchr>
1a00a77a:	2800      	cmp	r0, #0
1a00a77c:	d1ab      	bne.n	1a00a6d6 <__sfvwrite_r+0x18a>
1a00a77e:	1c7b      	adds	r3, r7, #1
1a00a780:	4699      	mov	r9, r3
1a00a782:	e7ac      	b.n	1a00a6de <__sfvwrite_r+0x192>
1a00a784:	6923      	ldr	r3, [r4, #16]
1a00a786:	4283      	cmp	r3, r0
1a00a788:	d315      	bcc.n	1a00a7b6 <__sfvwrite_r+0x26a>
1a00a78a:	6961      	ldr	r1, [r4, #20]
1a00a78c:	42a9      	cmp	r1, r5
1a00a78e:	d812      	bhi.n	1a00a7b6 <__sfvwrite_r+0x26a>
1a00a790:	4b2e      	ldr	r3, [pc, #184]	; (1a00a84c <__sfvwrite_r+0x300>)
1a00a792:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a00a794:	429d      	cmp	r5, r3
1a00a796:	bf94      	ite	ls
1a00a798:	462b      	movls	r3, r5
1a00a79a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a00a79e:	464a      	mov	r2, r9
1a00a7a0:	fb93 f3f1 	sdiv	r3, r3, r1
1a00a7a4:	4650      	mov	r0, sl
1a00a7a6:	fb01 f303 	mul.w	r3, r1, r3
1a00a7aa:	69e1      	ldr	r1, [r4, #28]
1a00a7ac:	47b8      	blx	r7
1a00a7ae:	1e07      	subs	r7, r0, #0
1a00a7b0:	ddc8      	ble.n	1a00a744 <__sfvwrite_r+0x1f8>
1a00a7b2:	1bed      	subs	r5, r5, r7
1a00a7b4:	e76d      	b.n	1a00a692 <__sfvwrite_r+0x146>
1a00a7b6:	42af      	cmp	r7, r5
1a00a7b8:	bf28      	it	cs
1a00a7ba:	462f      	movcs	r7, r5
1a00a7bc:	463a      	mov	r2, r7
1a00a7be:	4649      	mov	r1, r9
1a00a7c0:	f000 f916 	bl	1a00a9f0 <memmove>
1a00a7c4:	68a3      	ldr	r3, [r4, #8]
1a00a7c6:	6822      	ldr	r2, [r4, #0]
1a00a7c8:	1bdb      	subs	r3, r3, r7
1a00a7ca:	443a      	add	r2, r7
1a00a7cc:	60a3      	str	r3, [r4, #8]
1a00a7ce:	6022      	str	r2, [r4, #0]
1a00a7d0:	2b00      	cmp	r3, #0
1a00a7d2:	d1ee      	bne.n	1a00a7b2 <__sfvwrite_r+0x266>
1a00a7d4:	4621      	mov	r1, r4
1a00a7d6:	4650      	mov	r0, sl
1a00a7d8:	f7fb feca 	bl	1a006570 <_fflush_r>
1a00a7dc:	2800      	cmp	r0, #0
1a00a7de:	d0e8      	beq.n	1a00a7b2 <__sfvwrite_r+0x266>
1a00a7e0:	e7b0      	b.n	1a00a744 <__sfvwrite_r+0x1f8>
1a00a7e2:	462f      	mov	r7, r5
1a00a7e4:	46ab      	mov	fp, r5
1a00a7e6:	e748      	b.n	1a00a67a <__sfvwrite_r+0x12e>
1a00a7e8:	4621      	mov	r1, r4
1a00a7ea:	4650      	mov	r0, sl
1a00a7ec:	f7fb fec0 	bl	1a006570 <_fflush_r>
1a00a7f0:	2800      	cmp	r0, #0
1a00a7f2:	d08e      	beq.n	1a00a712 <__sfvwrite_r+0x1c6>
1a00a7f4:	e7a6      	b.n	1a00a744 <__sfvwrite_r+0x1f8>
1a00a7f6:	461a      	mov	r2, r3
1a00a7f8:	4631      	mov	r1, r6
1a00a7fa:	9301      	str	r3, [sp, #4]
1a00a7fc:	f000 f8f8 	bl	1a00a9f0 <memmove>
1a00a800:	9b01      	ldr	r3, [sp, #4]
1a00a802:	68a1      	ldr	r1, [r4, #8]
1a00a804:	6822      	ldr	r2, [r4, #0]
1a00a806:	1ac9      	subs	r1, r1, r3
1a00a808:	441a      	add	r2, r3
1a00a80a:	60a1      	str	r1, [r4, #8]
1a00a80c:	6022      	str	r2, [r4, #0]
1a00a80e:	461d      	mov	r5, r3
1a00a810:	e77b      	b.n	1a00a70a <__sfvwrite_r+0x1be>
1a00a812:	4650      	mov	r0, sl
1a00a814:	f000 fc5e 	bl	1a00b0d4 <_realloc_r>
1a00a818:	4603      	mov	r3, r0
1a00a81a:	2800      	cmp	r0, #0
1a00a81c:	f47f af23 	bne.w	1a00a666 <__sfvwrite_r+0x11a>
1a00a820:	6921      	ldr	r1, [r4, #16]
1a00a822:	4650      	mov	r0, sl
1a00a824:	f7fb ff86 	bl	1a006734 <_free_r>
1a00a828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a82c:	220c      	movs	r2, #12
1a00a82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00a832:	f8ca 2000 	str.w	r2, [sl]
1a00a836:	e787      	b.n	1a00a748 <__sfvwrite_r+0x1fc>
1a00a838:	230c      	movs	r3, #12
1a00a83a:	f8ca 3000 	str.w	r3, [sl]
1a00a83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a842:	e781      	b.n	1a00a748 <__sfvwrite_r+0x1fc>
1a00a844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00a848:	e76c      	b.n	1a00a724 <__sfvwrite_r+0x1d8>
1a00a84a:	bf00      	nop
1a00a84c:	7ffffffe 	.word	0x7ffffffe
1a00a850:	7ffffc00 	.word	0x7ffffc00

1a00a854 <_localeconv_r>:
1a00a854:	4800      	ldr	r0, [pc, #0]	; (1a00a858 <_localeconv_r+0x4>)
1a00a856:	4770      	bx	lr
1a00a858:	10000a08 	.word	0x10000a08

1a00a85c <__swhatbuf_r>:
1a00a85c:	b570      	push	{r4, r5, r6, lr}
1a00a85e:	460c      	mov	r4, r1
1a00a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00a864:	2900      	cmp	r1, #0
1a00a866:	b096      	sub	sp, #88	; 0x58
1a00a868:	4615      	mov	r5, r2
1a00a86a:	461e      	mov	r6, r3
1a00a86c:	db14      	blt.n	1a00a898 <__swhatbuf_r+0x3c>
1a00a86e:	466a      	mov	r2, sp
1a00a870:	f7f6 fd07 	bl	1a001282 <_fstat_r>
1a00a874:	2800      	cmp	r0, #0
1a00a876:	db0f      	blt.n	1a00a898 <__swhatbuf_r+0x3c>
1a00a878:	9a01      	ldr	r2, [sp, #4]
1a00a87a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00a87e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a00a882:	fab2 f282 	clz	r2, r2
1a00a886:	0952      	lsrs	r2, r2, #5
1a00a888:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00a88c:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a00a890:	6032      	str	r2, [r6, #0]
1a00a892:	602b      	str	r3, [r5, #0]
1a00a894:	b016      	add	sp, #88	; 0x58
1a00a896:	bd70      	pop	{r4, r5, r6, pc}
1a00a898:	89a2      	ldrh	r2, [r4, #12]
1a00a89a:	2300      	movs	r3, #0
1a00a89c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a00a8a0:	6033      	str	r3, [r6, #0]
1a00a8a2:	d004      	beq.n	1a00a8ae <__swhatbuf_r+0x52>
1a00a8a4:	2240      	movs	r2, #64	; 0x40
1a00a8a6:	4618      	mov	r0, r3
1a00a8a8:	602a      	str	r2, [r5, #0]
1a00a8aa:	b016      	add	sp, #88	; 0x58
1a00a8ac:	bd70      	pop	{r4, r5, r6, pc}
1a00a8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00a8b2:	602b      	str	r3, [r5, #0]
1a00a8b4:	b016      	add	sp, #88	; 0x58
1a00a8b6:	bd70      	pop	{r4, r5, r6, pc}

1a00a8b8 <__smakebuf_r>:
1a00a8b8:	898a      	ldrh	r2, [r1, #12]
1a00a8ba:	0792      	lsls	r2, r2, #30
1a00a8bc:	460b      	mov	r3, r1
1a00a8be:	d506      	bpl.n	1a00a8ce <__smakebuf_r+0x16>
1a00a8c0:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a00a8c4:	2101      	movs	r1, #1
1a00a8c6:	601a      	str	r2, [r3, #0]
1a00a8c8:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a00a8cc:	4770      	bx	lr
1a00a8ce:	b570      	push	{r4, r5, r6, lr}
1a00a8d0:	b082      	sub	sp, #8
1a00a8d2:	ab01      	add	r3, sp, #4
1a00a8d4:	466a      	mov	r2, sp
1a00a8d6:	460c      	mov	r4, r1
1a00a8d8:	4606      	mov	r6, r0
1a00a8da:	f7ff ffbf 	bl	1a00a85c <__swhatbuf_r>
1a00a8de:	9900      	ldr	r1, [sp, #0]
1a00a8e0:	4605      	mov	r5, r0
1a00a8e2:	4630      	mov	r0, r6
1a00a8e4:	f7fc f872 	bl	1a0069cc <_malloc_r>
1a00a8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a8ec:	b170      	cbz	r0, 1a00a90c <__smakebuf_r+0x54>
1a00a8ee:	4916      	ldr	r1, [pc, #88]	; (1a00a948 <__smakebuf_r+0x90>)
1a00a8f0:	63f1      	str	r1, [r6, #60]	; 0x3c
1a00a8f2:	9a01      	ldr	r2, [sp, #4]
1a00a8f4:	9900      	ldr	r1, [sp, #0]
1a00a8f6:	6020      	str	r0, [r4, #0]
1a00a8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00a8fc:	81a3      	strh	r3, [r4, #12]
1a00a8fe:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00a902:	b98a      	cbnz	r2, 1a00a928 <__smakebuf_r+0x70>
1a00a904:	432b      	orrs	r3, r5
1a00a906:	81a3      	strh	r3, [r4, #12]
1a00a908:	b002      	add	sp, #8
1a00a90a:	bd70      	pop	{r4, r5, r6, pc}
1a00a90c:	059a      	lsls	r2, r3, #22
1a00a90e:	d4fb      	bmi.n	1a00a908 <__smakebuf_r+0x50>
1a00a910:	f023 0303 	bic.w	r3, r3, #3
1a00a914:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00a918:	f043 0302 	orr.w	r3, r3, #2
1a00a91c:	2101      	movs	r1, #1
1a00a91e:	81a3      	strh	r3, [r4, #12]
1a00a920:	6022      	str	r2, [r4, #0]
1a00a922:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00a926:	e7ef      	b.n	1a00a908 <__smakebuf_r+0x50>
1a00a928:	4630      	mov	r0, r6
1a00a92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00a92e:	f7f6 fcad 	bl	1a00128c <_isatty_r>
1a00a932:	b910      	cbnz	r0, 1a00a93a <__smakebuf_r+0x82>
1a00a934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00a938:	e7e4      	b.n	1a00a904 <__smakebuf_r+0x4c>
1a00a93a:	89a3      	ldrh	r3, [r4, #12]
1a00a93c:	f023 0303 	bic.w	r3, r3, #3
1a00a940:	f043 0301 	orr.w	r3, r3, #1
1a00a944:	b21b      	sxth	r3, r3
1a00a946:	e7dd      	b.n	1a00a904 <__smakebuf_r+0x4c>
1a00a948:	1a00661d 	.word	0x1a00661d
1a00a94c:	ffffffff 	.word	0xffffffff

1a00a950 <memchr>:
1a00a950:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00a954:	2a10      	cmp	r2, #16
1a00a956:	db2b      	blt.n	1a00a9b0 <memchr+0x60>
1a00a958:	f010 0f07 	tst.w	r0, #7
1a00a95c:	d008      	beq.n	1a00a970 <memchr+0x20>
1a00a95e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a00a962:	3a01      	subs	r2, #1
1a00a964:	428b      	cmp	r3, r1
1a00a966:	d02d      	beq.n	1a00a9c4 <memchr+0x74>
1a00a968:	f010 0f07 	tst.w	r0, #7
1a00a96c:	b342      	cbz	r2, 1a00a9c0 <memchr+0x70>
1a00a96e:	d1f6      	bne.n	1a00a95e <memchr+0xe>
1a00a970:	b4f0      	push	{r4, r5, r6, r7}
1a00a972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a00a976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00a97a:	f022 0407 	bic.w	r4, r2, #7
1a00a97e:	f07f 0700 	mvns.w	r7, #0
1a00a982:	2300      	movs	r3, #0
1a00a984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a00a988:	3c08      	subs	r4, #8
1a00a98a:	ea85 0501 	eor.w	r5, r5, r1
1a00a98e:	ea86 0601 	eor.w	r6, r6, r1
1a00a992:	fa85 f547 	uadd8	r5, r5, r7
1a00a996:	faa3 f587 	sel	r5, r3, r7
1a00a99a:	fa86 f647 	uadd8	r6, r6, r7
1a00a99e:	faa5 f687 	sel	r6, r5, r7
1a00a9a2:	b98e      	cbnz	r6, 1a00a9c8 <memchr+0x78>
1a00a9a4:	d1ee      	bne.n	1a00a984 <memchr+0x34>
1a00a9a6:	bcf0      	pop	{r4, r5, r6, r7}
1a00a9a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00a9ac:	f002 0207 	and.w	r2, r2, #7
1a00a9b0:	b132      	cbz	r2, 1a00a9c0 <memchr+0x70>
1a00a9b2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a00a9b6:	3a01      	subs	r2, #1
1a00a9b8:	ea83 0301 	eor.w	r3, r3, r1
1a00a9bc:	b113      	cbz	r3, 1a00a9c4 <memchr+0x74>
1a00a9be:	d1f8      	bne.n	1a00a9b2 <memchr+0x62>
1a00a9c0:	2000      	movs	r0, #0
1a00a9c2:	4770      	bx	lr
1a00a9c4:	3801      	subs	r0, #1
1a00a9c6:	4770      	bx	lr
1a00a9c8:	2d00      	cmp	r5, #0
1a00a9ca:	bf06      	itte	eq
1a00a9cc:	4635      	moveq	r5, r6
1a00a9ce:	3803      	subeq	r0, #3
1a00a9d0:	3807      	subne	r0, #7
1a00a9d2:	f015 0f01 	tst.w	r5, #1
1a00a9d6:	d107      	bne.n	1a00a9e8 <memchr+0x98>
1a00a9d8:	3001      	adds	r0, #1
1a00a9da:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00a9de:	bf02      	ittt	eq
1a00a9e0:	3001      	addeq	r0, #1
1a00a9e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a00a9e6:	3001      	addeq	r0, #1
1a00a9e8:	bcf0      	pop	{r4, r5, r6, r7}
1a00a9ea:	3801      	subs	r0, #1
1a00a9ec:	4770      	bx	lr
1a00a9ee:	bf00      	nop

1a00a9f0 <memmove>:
1a00a9f0:	4288      	cmp	r0, r1
1a00a9f2:	b4f0      	push	{r4, r5, r6, r7}
1a00a9f4:	d90d      	bls.n	1a00aa12 <memmove+0x22>
1a00a9f6:	188b      	adds	r3, r1, r2
1a00a9f8:	4283      	cmp	r3, r0
1a00a9fa:	d90a      	bls.n	1a00aa12 <memmove+0x22>
1a00a9fc:	1884      	adds	r4, r0, r2
1a00a9fe:	b132      	cbz	r2, 1a00aa0e <memmove+0x1e>
1a00aa00:	4622      	mov	r2, r4
1a00aa02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a00aa06:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00aa0a:	4299      	cmp	r1, r3
1a00aa0c:	d1f9      	bne.n	1a00aa02 <memmove+0x12>
1a00aa0e:	bcf0      	pop	{r4, r5, r6, r7}
1a00aa10:	4770      	bx	lr
1a00aa12:	2a0f      	cmp	r2, #15
1a00aa14:	d80e      	bhi.n	1a00aa34 <memmove+0x44>
1a00aa16:	4603      	mov	r3, r0
1a00aa18:	1e54      	subs	r4, r2, #1
1a00aa1a:	2a00      	cmp	r2, #0
1a00aa1c:	d0f7      	beq.n	1a00aa0e <memmove+0x1e>
1a00aa1e:	3401      	adds	r4, #1
1a00aa20:	440c      	add	r4, r1
1a00aa22:	3b01      	subs	r3, #1
1a00aa24:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00aa28:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00aa2c:	42a1      	cmp	r1, r4
1a00aa2e:	d1f9      	bne.n	1a00aa24 <memmove+0x34>
1a00aa30:	bcf0      	pop	{r4, r5, r6, r7}
1a00aa32:	4770      	bx	lr
1a00aa34:	ea40 0301 	orr.w	r3, r0, r1
1a00aa38:	079b      	lsls	r3, r3, #30
1a00aa3a:	d13b      	bne.n	1a00aab4 <memmove+0xc4>
1a00aa3c:	f1a2 0710 	sub.w	r7, r2, #16
1a00aa40:	093f      	lsrs	r7, r7, #4
1a00aa42:	f101 0620 	add.w	r6, r1, #32
1a00aa46:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00aa4a:	f101 0310 	add.w	r3, r1, #16
1a00aa4e:	f100 0410 	add.w	r4, r0, #16
1a00aa52:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a00aa56:	f844 5c10 	str.w	r5, [r4, #-16]
1a00aa5a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00aa5e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a00aa62:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a00aa66:	f844 5c08 	str.w	r5, [r4, #-8]
1a00aa6a:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a00aa6e:	f844 5c04 	str.w	r5, [r4, #-4]
1a00aa72:	3310      	adds	r3, #16
1a00aa74:	42b3      	cmp	r3, r6
1a00aa76:	f104 0410 	add.w	r4, r4, #16
1a00aa7a:	d1ea      	bne.n	1a00aa52 <memmove+0x62>
1a00aa7c:	1c7b      	adds	r3, r7, #1
1a00aa7e:	011b      	lsls	r3, r3, #4
1a00aa80:	f012 0f0c 	tst.w	r2, #12
1a00aa84:	4419      	add	r1, r3
1a00aa86:	f002 050f 	and.w	r5, r2, #15
1a00aa8a:	4403      	add	r3, r0
1a00aa8c:	d015      	beq.n	1a00aaba <memmove+0xca>
1a00aa8e:	3d04      	subs	r5, #4
1a00aa90:	08ad      	lsrs	r5, r5, #2
1a00aa92:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a00aa96:	1f1c      	subs	r4, r3, #4
1a00aa98:	460e      	mov	r6, r1
1a00aa9a:	f856 7b04 	ldr.w	r7, [r6], #4
1a00aa9e:	f844 7f04 	str.w	r7, [r4, #4]!
1a00aaa2:	4564      	cmp	r4, ip
1a00aaa4:	d1f9      	bne.n	1a00aa9a <memmove+0xaa>
1a00aaa6:	3501      	adds	r5, #1
1a00aaa8:	00ad      	lsls	r5, r5, #2
1a00aaaa:	442b      	add	r3, r5
1a00aaac:	4429      	add	r1, r5
1a00aaae:	f002 0203 	and.w	r2, r2, #3
1a00aab2:	e7b1      	b.n	1a00aa18 <memmove+0x28>
1a00aab4:	1e54      	subs	r4, r2, #1
1a00aab6:	4603      	mov	r3, r0
1a00aab8:	e7b1      	b.n	1a00aa1e <memmove+0x2e>
1a00aaba:	462a      	mov	r2, r5
1a00aabc:	e7ac      	b.n	1a00aa18 <memmove+0x28>
1a00aabe:	bf00      	nop

1a00aac0 <_Balloc>:
1a00aac0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00aac2:	b570      	push	{r4, r5, r6, lr}
1a00aac4:	4605      	mov	r5, r0
1a00aac6:	460c      	mov	r4, r1
1a00aac8:	b14b      	cbz	r3, 1a00aade <_Balloc+0x1e>
1a00aaca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00aace:	b180      	cbz	r0, 1a00aaf2 <_Balloc+0x32>
1a00aad0:	6802      	ldr	r2, [r0, #0]
1a00aad2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00aad6:	2300      	movs	r3, #0
1a00aad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00aadc:	bd70      	pop	{r4, r5, r6, pc}
1a00aade:	2221      	movs	r2, #33	; 0x21
1a00aae0:	2104      	movs	r1, #4
1a00aae2:	f000 fd63 	bl	1a00b5ac <_calloc_r>
1a00aae6:	4603      	mov	r3, r0
1a00aae8:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00aaea:	2800      	cmp	r0, #0
1a00aaec:	d1ed      	bne.n	1a00aaca <_Balloc+0xa>
1a00aaee:	2000      	movs	r0, #0
1a00aaf0:	bd70      	pop	{r4, r5, r6, pc}
1a00aaf2:	2101      	movs	r1, #1
1a00aaf4:	fa01 f604 	lsl.w	r6, r1, r4
1a00aaf8:	1d72      	adds	r2, r6, #5
1a00aafa:	4628      	mov	r0, r5
1a00aafc:	0092      	lsls	r2, r2, #2
1a00aafe:	f000 fd55 	bl	1a00b5ac <_calloc_r>
1a00ab02:	2800      	cmp	r0, #0
1a00ab04:	d0f3      	beq.n	1a00aaee <_Balloc+0x2e>
1a00ab06:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00ab0a:	e7e4      	b.n	1a00aad6 <_Balloc+0x16>

1a00ab0c <_Bfree>:
1a00ab0c:	b131      	cbz	r1, 1a00ab1c <_Bfree+0x10>
1a00ab0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00ab10:	684a      	ldr	r2, [r1, #4]
1a00ab12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00ab16:	6008      	str	r0, [r1, #0]
1a00ab18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00ab1c:	4770      	bx	lr
1a00ab1e:	bf00      	nop

1a00ab20 <__multadd>:
1a00ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00ab22:	690c      	ldr	r4, [r1, #16]
1a00ab24:	b083      	sub	sp, #12
1a00ab26:	460d      	mov	r5, r1
1a00ab28:	4606      	mov	r6, r0
1a00ab2a:	f101 0c14 	add.w	ip, r1, #20
1a00ab2e:	2700      	movs	r7, #0
1a00ab30:	f8dc 0000 	ldr.w	r0, [ip]
1a00ab34:	b281      	uxth	r1, r0
1a00ab36:	fb02 3301 	mla	r3, r2, r1, r3
1a00ab3a:	0c19      	lsrs	r1, r3, #16
1a00ab3c:	0c00      	lsrs	r0, r0, #16
1a00ab3e:	fb02 1000 	mla	r0, r2, r0, r1
1a00ab42:	b29b      	uxth	r3, r3
1a00ab44:	3701      	adds	r7, #1
1a00ab46:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00ab4a:	42bc      	cmp	r4, r7
1a00ab4c:	f84c 3b04 	str.w	r3, [ip], #4
1a00ab50:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a00ab54:	dcec      	bgt.n	1a00ab30 <__multadd+0x10>
1a00ab56:	b13b      	cbz	r3, 1a00ab68 <__multadd+0x48>
1a00ab58:	68aa      	ldr	r2, [r5, #8]
1a00ab5a:	42a2      	cmp	r2, r4
1a00ab5c:	dd07      	ble.n	1a00ab6e <__multadd+0x4e>
1a00ab5e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00ab62:	3401      	adds	r4, #1
1a00ab64:	6153      	str	r3, [r2, #20]
1a00ab66:	612c      	str	r4, [r5, #16]
1a00ab68:	4628      	mov	r0, r5
1a00ab6a:	b003      	add	sp, #12
1a00ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00ab6e:	6869      	ldr	r1, [r5, #4]
1a00ab70:	9301      	str	r3, [sp, #4]
1a00ab72:	3101      	adds	r1, #1
1a00ab74:	4630      	mov	r0, r6
1a00ab76:	f7ff ffa3 	bl	1a00aac0 <_Balloc>
1a00ab7a:	692a      	ldr	r2, [r5, #16]
1a00ab7c:	3202      	adds	r2, #2
1a00ab7e:	f105 010c 	add.w	r1, r5, #12
1a00ab82:	4607      	mov	r7, r0
1a00ab84:	0092      	lsls	r2, r2, #2
1a00ab86:	300c      	adds	r0, #12
1a00ab88:	f7fc f9d8 	bl	1a006f3c <memcpy>
1a00ab8c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00ab8e:	6869      	ldr	r1, [r5, #4]
1a00ab90:	9b01      	ldr	r3, [sp, #4]
1a00ab92:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00ab96:	6028      	str	r0, [r5, #0]
1a00ab98:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00ab9c:	463d      	mov	r5, r7
1a00ab9e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00aba2:	3401      	adds	r4, #1
1a00aba4:	6153      	str	r3, [r2, #20]
1a00aba6:	612c      	str	r4, [r5, #16]
1a00aba8:	e7de      	b.n	1a00ab68 <__multadd+0x48>
1a00abaa:	bf00      	nop

1a00abac <__hi0bits>:
1a00abac:	0c02      	lsrs	r2, r0, #16
1a00abae:	0412      	lsls	r2, r2, #16
1a00abb0:	4603      	mov	r3, r0
1a00abb2:	b9ca      	cbnz	r2, 1a00abe8 <__hi0bits+0x3c>
1a00abb4:	0403      	lsls	r3, r0, #16
1a00abb6:	2010      	movs	r0, #16
1a00abb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00abbc:	bf04      	itt	eq
1a00abbe:	021b      	lsleq	r3, r3, #8
1a00abc0:	3008      	addeq	r0, #8
1a00abc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00abc6:	bf04      	itt	eq
1a00abc8:	011b      	lsleq	r3, r3, #4
1a00abca:	3004      	addeq	r0, #4
1a00abcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00abd0:	bf04      	itt	eq
1a00abd2:	009b      	lsleq	r3, r3, #2
1a00abd4:	3002      	addeq	r0, #2
1a00abd6:	2b00      	cmp	r3, #0
1a00abd8:	db05      	blt.n	1a00abe6 <__hi0bits+0x3a>
1a00abda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00abde:	f100 0001 	add.w	r0, r0, #1
1a00abe2:	bf08      	it	eq
1a00abe4:	2020      	moveq	r0, #32
1a00abe6:	4770      	bx	lr
1a00abe8:	2000      	movs	r0, #0
1a00abea:	e7e5      	b.n	1a00abb8 <__hi0bits+0xc>

1a00abec <__lo0bits>:
1a00abec:	6803      	ldr	r3, [r0, #0]
1a00abee:	f013 0207 	ands.w	r2, r3, #7
1a00abf2:	4601      	mov	r1, r0
1a00abf4:	d007      	beq.n	1a00ac06 <__lo0bits+0x1a>
1a00abf6:	07da      	lsls	r2, r3, #31
1a00abf8:	d420      	bmi.n	1a00ac3c <__lo0bits+0x50>
1a00abfa:	0798      	lsls	r0, r3, #30
1a00abfc:	d522      	bpl.n	1a00ac44 <__lo0bits+0x58>
1a00abfe:	085b      	lsrs	r3, r3, #1
1a00ac00:	600b      	str	r3, [r1, #0]
1a00ac02:	2001      	movs	r0, #1
1a00ac04:	4770      	bx	lr
1a00ac06:	b298      	uxth	r0, r3
1a00ac08:	b9b0      	cbnz	r0, 1a00ac38 <__lo0bits+0x4c>
1a00ac0a:	0c1b      	lsrs	r3, r3, #16
1a00ac0c:	2010      	movs	r0, #16
1a00ac0e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00ac12:	bf04      	itt	eq
1a00ac14:	0a1b      	lsreq	r3, r3, #8
1a00ac16:	3008      	addeq	r0, #8
1a00ac18:	071a      	lsls	r2, r3, #28
1a00ac1a:	bf04      	itt	eq
1a00ac1c:	091b      	lsreq	r3, r3, #4
1a00ac1e:	3004      	addeq	r0, #4
1a00ac20:	079a      	lsls	r2, r3, #30
1a00ac22:	bf04      	itt	eq
1a00ac24:	089b      	lsreq	r3, r3, #2
1a00ac26:	3002      	addeq	r0, #2
1a00ac28:	07da      	lsls	r2, r3, #31
1a00ac2a:	d403      	bmi.n	1a00ac34 <__lo0bits+0x48>
1a00ac2c:	085b      	lsrs	r3, r3, #1
1a00ac2e:	f100 0001 	add.w	r0, r0, #1
1a00ac32:	d005      	beq.n	1a00ac40 <__lo0bits+0x54>
1a00ac34:	600b      	str	r3, [r1, #0]
1a00ac36:	4770      	bx	lr
1a00ac38:	4610      	mov	r0, r2
1a00ac3a:	e7e8      	b.n	1a00ac0e <__lo0bits+0x22>
1a00ac3c:	2000      	movs	r0, #0
1a00ac3e:	4770      	bx	lr
1a00ac40:	2020      	movs	r0, #32
1a00ac42:	4770      	bx	lr
1a00ac44:	089b      	lsrs	r3, r3, #2
1a00ac46:	600b      	str	r3, [r1, #0]
1a00ac48:	2002      	movs	r0, #2
1a00ac4a:	4770      	bx	lr

1a00ac4c <__i2b>:
1a00ac4c:	b510      	push	{r4, lr}
1a00ac4e:	460c      	mov	r4, r1
1a00ac50:	2101      	movs	r1, #1
1a00ac52:	f7ff ff35 	bl	1a00aac0 <_Balloc>
1a00ac56:	2201      	movs	r2, #1
1a00ac58:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00ac5c:	bd10      	pop	{r4, pc}
1a00ac5e:	bf00      	nop

1a00ac60 <__multiply>:
1a00ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00ac64:	690e      	ldr	r6, [r1, #16]
1a00ac66:	6917      	ldr	r7, [r2, #16]
1a00ac68:	42be      	cmp	r6, r7
1a00ac6a:	b083      	sub	sp, #12
1a00ac6c:	460c      	mov	r4, r1
1a00ac6e:	4615      	mov	r5, r2
1a00ac70:	db05      	blt.n	1a00ac7e <__multiply+0x1e>
1a00ac72:	463a      	mov	r2, r7
1a00ac74:	462b      	mov	r3, r5
1a00ac76:	4637      	mov	r7, r6
1a00ac78:	460d      	mov	r5, r1
1a00ac7a:	4616      	mov	r6, r2
1a00ac7c:	461c      	mov	r4, r3
1a00ac7e:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a00ac82:	eb07 0806 	add.w	r8, r7, r6
1a00ac86:	4543      	cmp	r3, r8
1a00ac88:	bfb8      	it	lt
1a00ac8a:	3101      	addlt	r1, #1
1a00ac8c:	f7ff ff18 	bl	1a00aac0 <_Balloc>
1a00ac90:	f100 0a14 	add.w	sl, r0, #20
1a00ac94:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a00ac98:	45ca      	cmp	sl, r9
1a00ac9a:	9000      	str	r0, [sp, #0]
1a00ac9c:	d205      	bcs.n	1a00acaa <__multiply+0x4a>
1a00ac9e:	4653      	mov	r3, sl
1a00aca0:	2100      	movs	r1, #0
1a00aca2:	f843 1b04 	str.w	r1, [r3], #4
1a00aca6:	4599      	cmp	r9, r3
1a00aca8:	d8fb      	bhi.n	1a00aca2 <__multiply+0x42>
1a00acaa:	f104 0e14 	add.w	lr, r4, #20
1a00acae:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a00acb2:	f105 0314 	add.w	r3, r5, #20
1a00acb6:	45de      	cmp	lr, fp
1a00acb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00acbc:	d253      	bcs.n	1a00ad66 <__multiply+0x106>
1a00acbe:	f8cd 8004 	str.w	r8, [sp, #4]
1a00acc2:	4698      	mov	r8, r3
1a00acc4:	e005      	b.n	1a00acd2 <__multiply+0x72>
1a00acc6:	0c09      	lsrs	r1, r1, #16
1a00acc8:	d128      	bne.n	1a00ad1c <__multiply+0xbc>
1a00acca:	45f3      	cmp	fp, lr
1a00accc:	f10a 0a04 	add.w	sl, sl, #4
1a00acd0:	d947      	bls.n	1a00ad62 <__multiply+0x102>
1a00acd2:	f85e 1b04 	ldr.w	r1, [lr], #4
1a00acd6:	b28e      	uxth	r6, r1
1a00acd8:	2e00      	cmp	r6, #0
1a00acda:	d0f4      	beq.n	1a00acc6 <__multiply+0x66>
1a00acdc:	4645      	mov	r5, r8
1a00acde:	4654      	mov	r4, sl
1a00ace0:	2300      	movs	r3, #0
1a00ace2:	f855 1b04 	ldr.w	r1, [r5], #4
1a00ace6:	6820      	ldr	r0, [r4, #0]
1a00ace8:	b28a      	uxth	r2, r1
1a00acea:	fa1f fc80 	uxth.w	ip, r0
1a00acee:	fb06 c202 	mla	r2, r6, r2, ip
1a00acf2:	0c09      	lsrs	r1, r1, #16
1a00acf4:	0c00      	lsrs	r0, r0, #16
1a00acf6:	4413      	add	r3, r2
1a00acf8:	fb06 0201 	mla	r2, r6, r1, r0
1a00acfc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a00ad00:	b29b      	uxth	r3, r3
1a00ad02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00ad06:	42af      	cmp	r7, r5
1a00ad08:	f844 3b04 	str.w	r3, [r4], #4
1a00ad0c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a00ad10:	d8e7      	bhi.n	1a00ace2 <__multiply+0x82>
1a00ad12:	6023      	str	r3, [r4, #0]
1a00ad14:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a00ad18:	0c09      	lsrs	r1, r1, #16
1a00ad1a:	d0d6      	beq.n	1a00acca <__multiply+0x6a>
1a00ad1c:	f8da 3000 	ldr.w	r3, [sl]
1a00ad20:	4640      	mov	r0, r8
1a00ad22:	461a      	mov	r2, r3
1a00ad24:	4654      	mov	r4, sl
1a00ad26:	f04f 0c00 	mov.w	ip, #0
1a00ad2a:	8805      	ldrh	r5, [r0, #0]
1a00ad2c:	0c12      	lsrs	r2, r2, #16
1a00ad2e:	fb01 2205 	mla	r2, r1, r5, r2
1a00ad32:	4494      	add	ip, r2
1a00ad34:	b29b      	uxth	r3, r3
1a00ad36:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00ad3a:	f844 3b04 	str.w	r3, [r4], #4
1a00ad3e:	f850 3b04 	ldr.w	r3, [r0], #4
1a00ad42:	6822      	ldr	r2, [r4, #0]
1a00ad44:	0c1b      	lsrs	r3, r3, #16
1a00ad46:	b295      	uxth	r5, r2
1a00ad48:	fb01 5303 	mla	r3, r1, r3, r5
1a00ad4c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a00ad50:	4287      	cmp	r7, r0
1a00ad52:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00ad56:	d8e8      	bhi.n	1a00ad2a <__multiply+0xca>
1a00ad58:	45f3      	cmp	fp, lr
1a00ad5a:	6023      	str	r3, [r4, #0]
1a00ad5c:	f10a 0a04 	add.w	sl, sl, #4
1a00ad60:	d8b7      	bhi.n	1a00acd2 <__multiply+0x72>
1a00ad62:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a00ad66:	f1b8 0f00 	cmp.w	r8, #0
1a00ad6a:	dd0b      	ble.n	1a00ad84 <__multiply+0x124>
1a00ad6c:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a00ad70:	f1a9 0904 	sub.w	r9, r9, #4
1a00ad74:	b11b      	cbz	r3, 1a00ad7e <__multiply+0x11e>
1a00ad76:	e005      	b.n	1a00ad84 <__multiply+0x124>
1a00ad78:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00ad7c:	b913      	cbnz	r3, 1a00ad84 <__multiply+0x124>
1a00ad7e:	f1b8 0801 	subs.w	r8, r8, #1
1a00ad82:	d1f9      	bne.n	1a00ad78 <__multiply+0x118>
1a00ad84:	9800      	ldr	r0, [sp, #0]
1a00ad86:	f8c0 8010 	str.w	r8, [r0, #16]
1a00ad8a:	b003      	add	sp, #12
1a00ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00ad90 <__pow5mult>:
1a00ad90:	f012 0303 	ands.w	r3, r2, #3
1a00ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00ad98:	4614      	mov	r4, r2
1a00ad9a:	4607      	mov	r7, r0
1a00ad9c:	d12e      	bne.n	1a00adfc <__pow5mult+0x6c>
1a00ad9e:	460d      	mov	r5, r1
1a00ada0:	10a4      	asrs	r4, r4, #2
1a00ada2:	d01c      	beq.n	1a00adde <__pow5mult+0x4e>
1a00ada4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00ada6:	b396      	cbz	r6, 1a00ae0e <__pow5mult+0x7e>
1a00ada8:	07e3      	lsls	r3, r4, #31
1a00adaa:	f04f 0800 	mov.w	r8, #0
1a00adae:	d406      	bmi.n	1a00adbe <__pow5mult+0x2e>
1a00adb0:	1064      	asrs	r4, r4, #1
1a00adb2:	d014      	beq.n	1a00adde <__pow5mult+0x4e>
1a00adb4:	6830      	ldr	r0, [r6, #0]
1a00adb6:	b1a8      	cbz	r0, 1a00ade4 <__pow5mult+0x54>
1a00adb8:	4606      	mov	r6, r0
1a00adba:	07e3      	lsls	r3, r4, #31
1a00adbc:	d5f8      	bpl.n	1a00adb0 <__pow5mult+0x20>
1a00adbe:	4632      	mov	r2, r6
1a00adc0:	4629      	mov	r1, r5
1a00adc2:	4638      	mov	r0, r7
1a00adc4:	f7ff ff4c 	bl	1a00ac60 <__multiply>
1a00adc8:	b1b5      	cbz	r5, 1a00adf8 <__pow5mult+0x68>
1a00adca:	686a      	ldr	r2, [r5, #4]
1a00adcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00adce:	1064      	asrs	r4, r4, #1
1a00add0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00add4:	6029      	str	r1, [r5, #0]
1a00add6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00adda:	4605      	mov	r5, r0
1a00addc:	d1ea      	bne.n	1a00adb4 <__pow5mult+0x24>
1a00adde:	4628      	mov	r0, r5
1a00ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00ade4:	4632      	mov	r2, r6
1a00ade6:	4631      	mov	r1, r6
1a00ade8:	4638      	mov	r0, r7
1a00adea:	f7ff ff39 	bl	1a00ac60 <__multiply>
1a00adee:	6030      	str	r0, [r6, #0]
1a00adf0:	f8c0 8000 	str.w	r8, [r0]
1a00adf4:	4606      	mov	r6, r0
1a00adf6:	e7e0      	b.n	1a00adba <__pow5mult+0x2a>
1a00adf8:	4605      	mov	r5, r0
1a00adfa:	e7d9      	b.n	1a00adb0 <__pow5mult+0x20>
1a00adfc:	3b01      	subs	r3, #1
1a00adfe:	4a0b      	ldr	r2, [pc, #44]	; (1a00ae2c <__pow5mult+0x9c>)
1a00ae00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00ae04:	2300      	movs	r3, #0
1a00ae06:	f7ff fe8b 	bl	1a00ab20 <__multadd>
1a00ae0a:	4605      	mov	r5, r0
1a00ae0c:	e7c8      	b.n	1a00ada0 <__pow5mult+0x10>
1a00ae0e:	2101      	movs	r1, #1
1a00ae10:	4638      	mov	r0, r7
1a00ae12:	f7ff fe55 	bl	1a00aac0 <_Balloc>
1a00ae16:	f240 2371 	movw	r3, #625	; 0x271
1a00ae1a:	6143      	str	r3, [r0, #20]
1a00ae1c:	2201      	movs	r2, #1
1a00ae1e:	2300      	movs	r3, #0
1a00ae20:	6102      	str	r2, [r0, #16]
1a00ae22:	4606      	mov	r6, r0
1a00ae24:	64b8      	str	r0, [r7, #72]	; 0x48
1a00ae26:	6003      	str	r3, [r0, #0]
1a00ae28:	e7be      	b.n	1a00ada8 <__pow5mult+0x18>
1a00ae2a:	bf00      	nop
1a00ae2c:	1a00c278 	.word	0x1a00c278

1a00ae30 <__lshift>:
1a00ae30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00ae34:	690e      	ldr	r6, [r1, #16]
1a00ae36:	460d      	mov	r5, r1
1a00ae38:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00ae3c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00ae40:	444e      	add	r6, r9
1a00ae42:	1c74      	adds	r4, r6, #1
1a00ae44:	429c      	cmp	r4, r3
1a00ae46:	4690      	mov	r8, r2
1a00ae48:	4607      	mov	r7, r0
1a00ae4a:	dd04      	ble.n	1a00ae56 <__lshift+0x26>
1a00ae4c:	005b      	lsls	r3, r3, #1
1a00ae4e:	429c      	cmp	r4, r3
1a00ae50:	f101 0101 	add.w	r1, r1, #1
1a00ae54:	dcfa      	bgt.n	1a00ae4c <__lshift+0x1c>
1a00ae56:	4638      	mov	r0, r7
1a00ae58:	f7ff fe32 	bl	1a00aac0 <_Balloc>
1a00ae5c:	f1b9 0f00 	cmp.w	r9, #0
1a00ae60:	f100 0c14 	add.w	ip, r0, #20
1a00ae64:	dd0e      	ble.n	1a00ae84 <__lshift+0x54>
1a00ae66:	f109 0905 	add.w	r9, r9, #5
1a00ae6a:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00ae6e:	eb00 0109 	add.w	r1, r0, r9
1a00ae72:	4663      	mov	r3, ip
1a00ae74:	2200      	movs	r2, #0
1a00ae76:	f843 2b04 	str.w	r2, [r3], #4
1a00ae7a:	428b      	cmp	r3, r1
1a00ae7c:	d1fb      	bne.n	1a00ae76 <__lshift+0x46>
1a00ae7e:	f1a9 0914 	sub.w	r9, r9, #20
1a00ae82:	44cc      	add	ip, r9
1a00ae84:	6929      	ldr	r1, [r5, #16]
1a00ae86:	f105 0314 	add.w	r3, r5, #20
1a00ae8a:	f018 081f 	ands.w	r8, r8, #31
1a00ae8e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a00ae92:	d01d      	beq.n	1a00aed0 <__lshift+0xa0>
1a00ae94:	f1c8 0920 	rsb	r9, r8, #32
1a00ae98:	2200      	movs	r2, #0
1a00ae9a:	6819      	ldr	r1, [r3, #0]
1a00ae9c:	fa01 f108 	lsl.w	r1, r1, r8
1a00aea0:	4311      	orrs	r1, r2
1a00aea2:	f84c 1b04 	str.w	r1, [ip], #4
1a00aea6:	f853 2b04 	ldr.w	r2, [r3], #4
1a00aeaa:	4573      	cmp	r3, lr
1a00aeac:	fa22 f209 	lsr.w	r2, r2, r9
1a00aeb0:	d3f3      	bcc.n	1a00ae9a <__lshift+0x6a>
1a00aeb2:	f8cc 2000 	str.w	r2, [ip]
1a00aeb6:	2a00      	cmp	r2, #0
1a00aeb8:	bf18      	it	ne
1a00aeba:	4626      	movne	r6, r4
1a00aebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00aebe:	686a      	ldr	r2, [r5, #4]
1a00aec0:	6106      	str	r6, [r0, #16]
1a00aec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00aec6:	6029      	str	r1, [r5, #0]
1a00aec8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00aecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00aed0:	f1ac 0c04 	sub.w	ip, ip, #4
1a00aed4:	f853 2b04 	ldr.w	r2, [r3], #4
1a00aed8:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00aedc:	459e      	cmp	lr, r3
1a00aede:	d8f9      	bhi.n	1a00aed4 <__lshift+0xa4>
1a00aee0:	e7ec      	b.n	1a00aebc <__lshift+0x8c>
1a00aee2:	bf00      	nop

1a00aee4 <__mcmp>:
1a00aee4:	b430      	push	{r4, r5}
1a00aee6:	690b      	ldr	r3, [r1, #16]
1a00aee8:	4605      	mov	r5, r0
1a00aeea:	6900      	ldr	r0, [r0, #16]
1a00aeec:	1ac0      	subs	r0, r0, r3
1a00aeee:	d110      	bne.n	1a00af12 <__mcmp+0x2e>
1a00aef0:	009b      	lsls	r3, r3, #2
1a00aef2:	3514      	adds	r5, #20
1a00aef4:	3114      	adds	r1, #20
1a00aef6:	4419      	add	r1, r3
1a00aef8:	442b      	add	r3, r5
1a00aefa:	e001      	b.n	1a00af00 <__mcmp+0x1c>
1a00aefc:	429d      	cmp	r5, r3
1a00aefe:	d208      	bcs.n	1a00af12 <__mcmp+0x2e>
1a00af00:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00af04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00af08:	4294      	cmp	r4, r2
1a00af0a:	d0f7      	beq.n	1a00aefc <__mcmp+0x18>
1a00af0c:	d203      	bcs.n	1a00af16 <__mcmp+0x32>
1a00af0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00af12:	bc30      	pop	{r4, r5}
1a00af14:	4770      	bx	lr
1a00af16:	2001      	movs	r0, #1
1a00af18:	bc30      	pop	{r4, r5}
1a00af1a:	4770      	bx	lr

1a00af1c <__mdiff>:
1a00af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00af20:	460f      	mov	r7, r1
1a00af22:	690d      	ldr	r5, [r1, #16]
1a00af24:	6911      	ldr	r1, [r2, #16]
1a00af26:	1a6d      	subs	r5, r5, r1
1a00af28:	2d00      	cmp	r5, #0
1a00af2a:	4690      	mov	r8, r2
1a00af2c:	4684      	mov	ip, r0
1a00af2e:	f107 0414 	add.w	r4, r7, #20
1a00af32:	f102 0614 	add.w	r6, r2, #20
1a00af36:	d114      	bne.n	1a00af62 <__mdiff+0x46>
1a00af38:	0089      	lsls	r1, r1, #2
1a00af3a:	1863      	adds	r3, r4, r1
1a00af3c:	4431      	add	r1, r6
1a00af3e:	e001      	b.n	1a00af44 <__mdiff+0x28>
1a00af40:	42a3      	cmp	r3, r4
1a00af42:	d95d      	bls.n	1a00b000 <__mdiff+0xe4>
1a00af44:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a00af48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00af4c:	4290      	cmp	r0, r2
1a00af4e:	d0f7      	beq.n	1a00af40 <__mdiff+0x24>
1a00af50:	d209      	bcs.n	1a00af66 <__mdiff+0x4a>
1a00af52:	4622      	mov	r2, r4
1a00af54:	463b      	mov	r3, r7
1a00af56:	4634      	mov	r4, r6
1a00af58:	4647      	mov	r7, r8
1a00af5a:	4616      	mov	r6, r2
1a00af5c:	4698      	mov	r8, r3
1a00af5e:	2501      	movs	r5, #1
1a00af60:	e001      	b.n	1a00af66 <__mdiff+0x4a>
1a00af62:	dbf6      	blt.n	1a00af52 <__mdiff+0x36>
1a00af64:	2500      	movs	r5, #0
1a00af66:	4660      	mov	r0, ip
1a00af68:	6879      	ldr	r1, [r7, #4]
1a00af6a:	f7ff fda9 	bl	1a00aac0 <_Balloc>
1a00af6e:	693f      	ldr	r7, [r7, #16]
1a00af70:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a00af74:	60c5      	str	r5, [r0, #12]
1a00af76:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00af7a:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00af7e:	f100 0514 	add.w	r5, r0, #20
1a00af82:	2200      	movs	r2, #0
1a00af84:	e000      	b.n	1a00af88 <__mdiff+0x6c>
1a00af86:	460d      	mov	r5, r1
1a00af88:	f856 1b04 	ldr.w	r1, [r6], #4
1a00af8c:	f854 8b04 	ldr.w	r8, [r4], #4
1a00af90:	fa1f f981 	uxth.w	r9, r1
1a00af94:	fa12 f388 	uxtah	r3, r2, r8
1a00af98:	0c0a      	lsrs	r2, r1, #16
1a00af9a:	eba3 0309 	sub.w	r3, r3, r9
1a00af9e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a00afa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00afa6:	4629      	mov	r1, r5
1a00afa8:	b29b      	uxth	r3, r3
1a00afaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00afae:	45b6      	cmp	lr, r6
1a00afb0:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00afb4:	f841 3b04 	str.w	r3, [r1], #4
1a00afb8:	46a0      	mov	r8, r4
1a00afba:	d8e4      	bhi.n	1a00af86 <__mdiff+0x6a>
1a00afbc:	45a4      	cmp	ip, r4
1a00afbe:	d916      	bls.n	1a00afee <__mdiff+0xd2>
1a00afc0:	460e      	mov	r6, r1
1a00afc2:	f858 5b04 	ldr.w	r5, [r8], #4
1a00afc6:	fa12 f385 	uxtah	r3, r2, r5
1a00afca:	141a      	asrs	r2, r3, #16
1a00afcc:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a00afd0:	b29b      	uxth	r3, r3
1a00afd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00afd6:	45c4      	cmp	ip, r8
1a00afd8:	f846 3b04 	str.w	r3, [r6], #4
1a00afdc:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00afe0:	d8ef      	bhi.n	1a00afc2 <__mdiff+0xa6>
1a00afe2:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a00afe6:	1b2d      	subs	r5, r5, r4
1a00afe8:	f025 0503 	bic.w	r5, r5, #3
1a00afec:	440d      	add	r5, r1
1a00afee:	b923      	cbnz	r3, 1a00affa <__mdiff+0xde>
1a00aff0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00aff4:	3f01      	subs	r7, #1
1a00aff6:	2b00      	cmp	r3, #0
1a00aff8:	d0fa      	beq.n	1a00aff0 <__mdiff+0xd4>
1a00affa:	6107      	str	r7, [r0, #16]
1a00affc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00b000:	4660      	mov	r0, ip
1a00b002:	2100      	movs	r1, #0
1a00b004:	f7ff fd5c 	bl	1a00aac0 <_Balloc>
1a00b008:	2201      	movs	r2, #1
1a00b00a:	2300      	movs	r3, #0
1a00b00c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00b010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00b014 <__d2b>:
1a00b014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00b018:	460f      	mov	r7, r1
1a00b01a:	b083      	sub	sp, #12
1a00b01c:	2101      	movs	r1, #1
1a00b01e:	ec55 4b10 	vmov	r4, r5, d0
1a00b022:	4616      	mov	r6, r2
1a00b024:	f7ff fd4c 	bl	1a00aac0 <_Balloc>
1a00b028:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00b02c:	4681      	mov	r9, r0
1a00b02e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00b032:	f1b8 0f00 	cmp.w	r8, #0
1a00b036:	d001      	beq.n	1a00b03c <__d2b+0x28>
1a00b038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00b03c:	2c00      	cmp	r4, #0
1a00b03e:	9301      	str	r3, [sp, #4]
1a00b040:	d02b      	beq.n	1a00b09a <__d2b+0x86>
1a00b042:	4668      	mov	r0, sp
1a00b044:	9400      	str	r4, [sp, #0]
1a00b046:	f7ff fdd1 	bl	1a00abec <__lo0bits>
1a00b04a:	b9d0      	cbnz	r0, 1a00b082 <__d2b+0x6e>
1a00b04c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00b050:	f8c9 2014 	str.w	r2, [r9, #20]
1a00b054:	2b00      	cmp	r3, #0
1a00b056:	bf14      	ite	ne
1a00b058:	2102      	movne	r1, #2
1a00b05a:	2101      	moveq	r1, #1
1a00b05c:	f8c9 3018 	str.w	r3, [r9, #24]
1a00b060:	f8c9 1010 	str.w	r1, [r9, #16]
1a00b064:	f1b8 0f00 	cmp.w	r8, #0
1a00b068:	d024      	beq.n	1a00b0b4 <__d2b+0xa0>
1a00b06a:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00b06e:	eb08 0300 	add.w	r3, r8, r0
1a00b072:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00b076:	603b      	str	r3, [r7, #0]
1a00b078:	6030      	str	r0, [r6, #0]
1a00b07a:	4648      	mov	r0, r9
1a00b07c:	b003      	add	sp, #12
1a00b07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00b082:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00b086:	f1c0 0220 	rsb	r2, r0, #32
1a00b08a:	fa03 f202 	lsl.w	r2, r3, r2
1a00b08e:	430a      	orrs	r2, r1
1a00b090:	40c3      	lsrs	r3, r0
1a00b092:	9301      	str	r3, [sp, #4]
1a00b094:	f8c9 2014 	str.w	r2, [r9, #20]
1a00b098:	e7dc      	b.n	1a00b054 <__d2b+0x40>
1a00b09a:	a801      	add	r0, sp, #4
1a00b09c:	f7ff fda6 	bl	1a00abec <__lo0bits>
1a00b0a0:	9b01      	ldr	r3, [sp, #4]
1a00b0a2:	f8c9 3014 	str.w	r3, [r9, #20]
1a00b0a6:	2101      	movs	r1, #1
1a00b0a8:	3020      	adds	r0, #32
1a00b0aa:	f8c9 1010 	str.w	r1, [r9, #16]
1a00b0ae:	f1b8 0f00 	cmp.w	r8, #0
1a00b0b2:	d1da      	bne.n	1a00b06a <__d2b+0x56>
1a00b0b4:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00b0b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00b0bc:	6038      	str	r0, [r7, #0]
1a00b0be:	6918      	ldr	r0, [r3, #16]
1a00b0c0:	f7ff fd74 	bl	1a00abac <__hi0bits>
1a00b0c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00b0c8:	6030      	str	r0, [r6, #0]
1a00b0ca:	4648      	mov	r0, r9
1a00b0cc:	b003      	add	sp, #12
1a00b0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00b0d2:	bf00      	nop

1a00b0d4 <_realloc_r>:
1a00b0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00b0d8:	4617      	mov	r7, r2
1a00b0da:	2900      	cmp	r1, #0
1a00b0dc:	f000 80bb 	beq.w	1a00b256 <_realloc_r+0x182>
1a00b0e0:	f107 040b 	add.w	r4, r7, #11
1a00b0e4:	4681      	mov	r9, r0
1a00b0e6:	460d      	mov	r5, r1
1a00b0e8:	f7fc f812 	bl	1a007110 <__malloc_lock>
1a00b0ec:	2c16      	cmp	r4, #22
1a00b0ee:	d85e      	bhi.n	1a00b1ae <_realloc_r+0xda>
1a00b0f0:	2410      	movs	r4, #16
1a00b0f2:	4622      	mov	r2, r4
1a00b0f4:	42a7      	cmp	r7, r4
1a00b0f6:	d85f      	bhi.n	1a00b1b8 <_realloc_r+0xe4>
1a00b0f8:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00b0fc:	f02e 0603 	bic.w	r6, lr, #3
1a00b100:	f1a5 0808 	sub.w	r8, r5, #8
1a00b104:	4296      	cmp	r6, r2
1a00b106:	eb08 0a06 	add.w	sl, r8, r6
1a00b10a:	f280 8081 	bge.w	1a00b210 <_realloc_r+0x13c>
1a00b10e:	4bcb      	ldr	r3, [pc, #812]	; (1a00b43c <_realloc_r+0x368>)
1a00b110:	f8da 0004 	ldr.w	r0, [sl, #4]
1a00b114:	6899      	ldr	r1, [r3, #8]
1a00b116:	4551      	cmp	r1, sl
1a00b118:	f000 80b5 	beq.w	1a00b286 <_realloc_r+0x1b2>
1a00b11c:	f020 0301 	bic.w	r3, r0, #1
1a00b120:	4453      	add	r3, sl
1a00b122:	685b      	ldr	r3, [r3, #4]
1a00b124:	07db      	lsls	r3, r3, #31
1a00b126:	f100 808a 	bmi.w	1a00b23e <_realloc_r+0x16a>
1a00b12a:	f020 0003 	bic.w	r0, r0, #3
1a00b12e:	1833      	adds	r3, r6, r0
1a00b130:	4293      	cmp	r3, r2
1a00b132:	f280 8112 	bge.w	1a00b35a <_realloc_r+0x286>
1a00b136:	f01e 0f01 	tst.w	lr, #1
1a00b13a:	d10f      	bne.n	1a00b15c <_realloc_r+0x88>
1a00b13c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00b140:	eba8 0b03 	sub.w	fp, r8, r3
1a00b144:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00b148:	f021 0103 	bic.w	r1, r1, #3
1a00b14c:	4408      	add	r0, r1
1a00b14e:	1983      	adds	r3, r0, r6
1a00b150:	4293      	cmp	r3, r2
1a00b152:	f280 8116 	bge.w	1a00b382 <_realloc_r+0x2ae>
1a00b156:	1873      	adds	r3, r6, r1
1a00b158:	4293      	cmp	r3, r2
1a00b15a:	da34      	bge.n	1a00b1c6 <_realloc_r+0xf2>
1a00b15c:	4639      	mov	r1, r7
1a00b15e:	4648      	mov	r0, r9
1a00b160:	f7fb fc34 	bl	1a0069cc <_malloc_r>
1a00b164:	4607      	mov	r7, r0
1a00b166:	b1e0      	cbz	r0, 1a00b1a2 <_realloc_r+0xce>
1a00b168:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00b16c:	f023 0301 	bic.w	r3, r3, #1
1a00b170:	4443      	add	r3, r8
1a00b172:	f1a0 0208 	sub.w	r2, r0, #8
1a00b176:	4293      	cmp	r3, r2
1a00b178:	f000 80f7 	beq.w	1a00b36a <_realloc_r+0x296>
1a00b17c:	1f32      	subs	r2, r6, #4
1a00b17e:	2a24      	cmp	r2, #36	; 0x24
1a00b180:	f200 80fb 	bhi.w	1a00b37a <_realloc_r+0x2a6>
1a00b184:	2a13      	cmp	r2, #19
1a00b186:	6829      	ldr	r1, [r5, #0]
1a00b188:	f200 80c9 	bhi.w	1a00b31e <_realloc_r+0x24a>
1a00b18c:	4603      	mov	r3, r0
1a00b18e:	462a      	mov	r2, r5
1a00b190:	6019      	str	r1, [r3, #0]
1a00b192:	6851      	ldr	r1, [r2, #4]
1a00b194:	6059      	str	r1, [r3, #4]
1a00b196:	6892      	ldr	r2, [r2, #8]
1a00b198:	609a      	str	r2, [r3, #8]
1a00b19a:	4629      	mov	r1, r5
1a00b19c:	4648      	mov	r0, r9
1a00b19e:	f7fb fac9 	bl	1a006734 <_free_r>
1a00b1a2:	4648      	mov	r0, r9
1a00b1a4:	f7fb ffba 	bl	1a00711c <__malloc_unlock>
1a00b1a8:	4638      	mov	r0, r7
1a00b1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b1ae:	f024 0407 	bic.w	r4, r4, #7
1a00b1b2:	2c00      	cmp	r4, #0
1a00b1b4:	4622      	mov	r2, r4
1a00b1b6:	da9d      	bge.n	1a00b0f4 <_realloc_r+0x20>
1a00b1b8:	230c      	movs	r3, #12
1a00b1ba:	f8c9 3000 	str.w	r3, [r9]
1a00b1be:	2700      	movs	r7, #0
1a00b1c0:	4638      	mov	r0, r7
1a00b1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b1c6:	465f      	mov	r7, fp
1a00b1c8:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00b1cc:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00b1d0:	1f32      	subs	r2, r6, #4
1a00b1d2:	2a24      	cmp	r2, #36	; 0x24
1a00b1d4:	60c1      	str	r1, [r0, #12]
1a00b1d6:	eb0b 0a03 	add.w	sl, fp, r3
1a00b1da:	6088      	str	r0, [r1, #8]
1a00b1dc:	f200 80d9 	bhi.w	1a00b392 <_realloc_r+0x2be>
1a00b1e0:	2a13      	cmp	r2, #19
1a00b1e2:	6829      	ldr	r1, [r5, #0]
1a00b1e4:	f240 80d3 	bls.w	1a00b38e <_realloc_r+0x2ba>
1a00b1e8:	f8cb 1008 	str.w	r1, [fp, #8]
1a00b1ec:	6869      	ldr	r1, [r5, #4]
1a00b1ee:	f8cb 100c 	str.w	r1, [fp, #12]
1a00b1f2:	2a1b      	cmp	r2, #27
1a00b1f4:	68a9      	ldr	r1, [r5, #8]
1a00b1f6:	f200 80e0 	bhi.w	1a00b3ba <_realloc_r+0x2e6>
1a00b1fa:	f10b 0210 	add.w	r2, fp, #16
1a00b1fe:	3508      	adds	r5, #8
1a00b200:	6011      	str	r1, [r2, #0]
1a00b202:	6869      	ldr	r1, [r5, #4]
1a00b204:	6051      	str	r1, [r2, #4]
1a00b206:	68a9      	ldr	r1, [r5, #8]
1a00b208:	6091      	str	r1, [r2, #8]
1a00b20a:	461e      	mov	r6, r3
1a00b20c:	46d8      	mov	r8, fp
1a00b20e:	463d      	mov	r5, r7
1a00b210:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00b214:	1b32      	subs	r2, r6, r4
1a00b216:	2a0f      	cmp	r2, #15
1a00b218:	f003 0301 	and.w	r3, r3, #1
1a00b21c:	d820      	bhi.n	1a00b260 <_realloc_r+0x18c>
1a00b21e:	4333      	orrs	r3, r6
1a00b220:	f8c8 3004 	str.w	r3, [r8, #4]
1a00b224:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00b228:	f043 0301 	orr.w	r3, r3, #1
1a00b22c:	f8ca 3004 	str.w	r3, [sl, #4]
1a00b230:	4648      	mov	r0, r9
1a00b232:	462f      	mov	r7, r5
1a00b234:	f7fb ff72 	bl	1a00711c <__malloc_unlock>
1a00b238:	4638      	mov	r0, r7
1a00b23a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b23e:	f01e 0f01 	tst.w	lr, #1
1a00b242:	d18b      	bne.n	1a00b15c <_realloc_r+0x88>
1a00b244:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00b248:	eba8 0b03 	sub.w	fp, r8, r3
1a00b24c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00b250:	f021 0103 	bic.w	r1, r1, #3
1a00b254:	e77f      	b.n	1a00b156 <_realloc_r+0x82>
1a00b256:	4611      	mov	r1, r2
1a00b258:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00b25c:	f7fb bbb6 	b.w	1a0069cc <_malloc_r>
1a00b260:	eb08 0104 	add.w	r1, r8, r4
1a00b264:	4323      	orrs	r3, r4
1a00b266:	f042 0201 	orr.w	r2, r2, #1
1a00b26a:	f8c8 3004 	str.w	r3, [r8, #4]
1a00b26e:	604a      	str	r2, [r1, #4]
1a00b270:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00b274:	f043 0301 	orr.w	r3, r3, #1
1a00b278:	3108      	adds	r1, #8
1a00b27a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00b27e:	4648      	mov	r0, r9
1a00b280:	f7fb fa58 	bl	1a006734 <_free_r>
1a00b284:	e7d4      	b.n	1a00b230 <_realloc_r+0x15c>
1a00b286:	f020 0003 	bic.w	r0, r0, #3
1a00b28a:	1831      	adds	r1, r6, r0
1a00b28c:	f104 0c10 	add.w	ip, r4, #16
1a00b290:	4561      	cmp	r1, ip
1a00b292:	da4f      	bge.n	1a00b334 <_realloc_r+0x260>
1a00b294:	f01e 0f01 	tst.w	lr, #1
1a00b298:	f47f af60 	bne.w	1a00b15c <_realloc_r+0x88>
1a00b29c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a00b2a0:	eba8 0b01 	sub.w	fp, r8, r1
1a00b2a4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00b2a8:	f021 0103 	bic.w	r1, r1, #3
1a00b2ac:	4408      	add	r0, r1
1a00b2ae:	eb00 0a06 	add.w	sl, r0, r6
1a00b2b2:	45d4      	cmp	ip, sl
1a00b2b4:	f73f af4f 	bgt.w	1a00b156 <_realloc_r+0x82>
1a00b2b8:	465f      	mov	r7, fp
1a00b2ba:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00b2be:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00b2c2:	1f32      	subs	r2, r6, #4
1a00b2c4:	2a24      	cmp	r2, #36	; 0x24
1a00b2c6:	60c1      	str	r1, [r0, #12]
1a00b2c8:	6088      	str	r0, [r1, #8]
1a00b2ca:	f200 8099 	bhi.w	1a00b400 <_realloc_r+0x32c>
1a00b2ce:	2a13      	cmp	r2, #19
1a00b2d0:	6829      	ldr	r1, [r5, #0]
1a00b2d2:	f240 8093 	bls.w	1a00b3fc <_realloc_r+0x328>
1a00b2d6:	f8cb 1008 	str.w	r1, [fp, #8]
1a00b2da:	6869      	ldr	r1, [r5, #4]
1a00b2dc:	f8cb 100c 	str.w	r1, [fp, #12]
1a00b2e0:	2a1b      	cmp	r2, #27
1a00b2e2:	68a9      	ldr	r1, [r5, #8]
1a00b2e4:	f200 8092 	bhi.w	1a00b40c <_realloc_r+0x338>
1a00b2e8:	f10b 0210 	add.w	r2, fp, #16
1a00b2ec:	3508      	adds	r5, #8
1a00b2ee:	6011      	str	r1, [r2, #0]
1a00b2f0:	6869      	ldr	r1, [r5, #4]
1a00b2f2:	6051      	str	r1, [r2, #4]
1a00b2f4:	68a9      	ldr	r1, [r5, #8]
1a00b2f6:	6091      	str	r1, [r2, #8]
1a00b2f8:	eb0b 0104 	add.w	r1, fp, r4
1a00b2fc:	ebaa 0204 	sub.w	r2, sl, r4
1a00b300:	f042 0201 	orr.w	r2, r2, #1
1a00b304:	6099      	str	r1, [r3, #8]
1a00b306:	604a      	str	r2, [r1, #4]
1a00b308:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00b30c:	f003 0301 	and.w	r3, r3, #1
1a00b310:	431c      	orrs	r4, r3
1a00b312:	4648      	mov	r0, r9
1a00b314:	f8cb 4004 	str.w	r4, [fp, #4]
1a00b318:	f7fb ff00 	bl	1a00711c <__malloc_unlock>
1a00b31c:	e750      	b.n	1a00b1c0 <_realloc_r+0xec>
1a00b31e:	6001      	str	r1, [r0, #0]
1a00b320:	686b      	ldr	r3, [r5, #4]
1a00b322:	6043      	str	r3, [r0, #4]
1a00b324:	2a1b      	cmp	r2, #27
1a00b326:	d83c      	bhi.n	1a00b3a2 <_realloc_r+0x2ce>
1a00b328:	f105 0208 	add.w	r2, r5, #8
1a00b32c:	f100 0308 	add.w	r3, r0, #8
1a00b330:	68a9      	ldr	r1, [r5, #8]
1a00b332:	e72d      	b.n	1a00b190 <_realloc_r+0xbc>
1a00b334:	eb08 0004 	add.w	r0, r8, r4
1a00b338:	1b0a      	subs	r2, r1, r4
1a00b33a:	f042 0201 	orr.w	r2, r2, #1
1a00b33e:	6098      	str	r0, [r3, #8]
1a00b340:	6042      	str	r2, [r0, #4]
1a00b342:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00b346:	f003 0301 	and.w	r3, r3, #1
1a00b34a:	431c      	orrs	r4, r3
1a00b34c:	4648      	mov	r0, r9
1a00b34e:	f845 4c04 	str.w	r4, [r5, #-4]
1a00b352:	f7fb fee3 	bl	1a00711c <__malloc_unlock>
1a00b356:	462f      	mov	r7, r5
1a00b358:	e732      	b.n	1a00b1c0 <_realloc_r+0xec>
1a00b35a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00b35e:	461e      	mov	r6, r3
1a00b360:	60ca      	str	r2, [r1, #12]
1a00b362:	eb08 0a03 	add.w	sl, r8, r3
1a00b366:	6091      	str	r1, [r2, #8]
1a00b368:	e752      	b.n	1a00b210 <_realloc_r+0x13c>
1a00b36a:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00b36e:	f023 0303 	bic.w	r3, r3, #3
1a00b372:	441e      	add	r6, r3
1a00b374:	eb08 0a06 	add.w	sl, r8, r6
1a00b378:	e74a      	b.n	1a00b210 <_realloc_r+0x13c>
1a00b37a:	4629      	mov	r1, r5
1a00b37c:	f7ff fb38 	bl	1a00a9f0 <memmove>
1a00b380:	e70b      	b.n	1a00b19a <_realloc_r+0xc6>
1a00b382:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00b386:	465f      	mov	r7, fp
1a00b388:	60ca      	str	r2, [r1, #12]
1a00b38a:	6091      	str	r1, [r2, #8]
1a00b38c:	e71c      	b.n	1a00b1c8 <_realloc_r+0xf4>
1a00b38e:	463a      	mov	r2, r7
1a00b390:	e736      	b.n	1a00b200 <_realloc_r+0x12c>
1a00b392:	4629      	mov	r1, r5
1a00b394:	4638      	mov	r0, r7
1a00b396:	461e      	mov	r6, r3
1a00b398:	46d8      	mov	r8, fp
1a00b39a:	f7ff fb29 	bl	1a00a9f0 <memmove>
1a00b39e:	463d      	mov	r5, r7
1a00b3a0:	e736      	b.n	1a00b210 <_realloc_r+0x13c>
1a00b3a2:	68ab      	ldr	r3, [r5, #8]
1a00b3a4:	6083      	str	r3, [r0, #8]
1a00b3a6:	68eb      	ldr	r3, [r5, #12]
1a00b3a8:	60c3      	str	r3, [r0, #12]
1a00b3aa:	2a24      	cmp	r2, #36	; 0x24
1a00b3ac:	d011      	beq.n	1a00b3d2 <_realloc_r+0x2fe>
1a00b3ae:	f105 0210 	add.w	r2, r5, #16
1a00b3b2:	f100 0310 	add.w	r3, r0, #16
1a00b3b6:	6929      	ldr	r1, [r5, #16]
1a00b3b8:	e6ea      	b.n	1a00b190 <_realloc_r+0xbc>
1a00b3ba:	f8cb 1010 	str.w	r1, [fp, #16]
1a00b3be:	68e9      	ldr	r1, [r5, #12]
1a00b3c0:	f8cb 1014 	str.w	r1, [fp, #20]
1a00b3c4:	2a24      	cmp	r2, #36	; 0x24
1a00b3c6:	d00e      	beq.n	1a00b3e6 <_realloc_r+0x312>
1a00b3c8:	6929      	ldr	r1, [r5, #16]
1a00b3ca:	f10b 0218 	add.w	r2, fp, #24
1a00b3ce:	3510      	adds	r5, #16
1a00b3d0:	e716      	b.n	1a00b200 <_realloc_r+0x12c>
1a00b3d2:	692b      	ldr	r3, [r5, #16]
1a00b3d4:	6103      	str	r3, [r0, #16]
1a00b3d6:	696b      	ldr	r3, [r5, #20]
1a00b3d8:	6143      	str	r3, [r0, #20]
1a00b3da:	69a9      	ldr	r1, [r5, #24]
1a00b3dc:	f105 0218 	add.w	r2, r5, #24
1a00b3e0:	f100 0318 	add.w	r3, r0, #24
1a00b3e4:	e6d4      	b.n	1a00b190 <_realloc_r+0xbc>
1a00b3e6:	692a      	ldr	r2, [r5, #16]
1a00b3e8:	f8cb 2018 	str.w	r2, [fp, #24]
1a00b3ec:	696a      	ldr	r2, [r5, #20]
1a00b3ee:	f8cb 201c 	str.w	r2, [fp, #28]
1a00b3f2:	69a9      	ldr	r1, [r5, #24]
1a00b3f4:	f10b 0220 	add.w	r2, fp, #32
1a00b3f8:	3518      	adds	r5, #24
1a00b3fa:	e701      	b.n	1a00b200 <_realloc_r+0x12c>
1a00b3fc:	463a      	mov	r2, r7
1a00b3fe:	e776      	b.n	1a00b2ee <_realloc_r+0x21a>
1a00b400:	4629      	mov	r1, r5
1a00b402:	4638      	mov	r0, r7
1a00b404:	f7ff faf4 	bl	1a00a9f0 <memmove>
1a00b408:	4b0c      	ldr	r3, [pc, #48]	; (1a00b43c <_realloc_r+0x368>)
1a00b40a:	e775      	b.n	1a00b2f8 <_realloc_r+0x224>
1a00b40c:	f8cb 1010 	str.w	r1, [fp, #16]
1a00b410:	68e9      	ldr	r1, [r5, #12]
1a00b412:	f8cb 1014 	str.w	r1, [fp, #20]
1a00b416:	2a24      	cmp	r2, #36	; 0x24
1a00b418:	d004      	beq.n	1a00b424 <_realloc_r+0x350>
1a00b41a:	6929      	ldr	r1, [r5, #16]
1a00b41c:	f10b 0218 	add.w	r2, fp, #24
1a00b420:	3510      	adds	r5, #16
1a00b422:	e764      	b.n	1a00b2ee <_realloc_r+0x21a>
1a00b424:	692a      	ldr	r2, [r5, #16]
1a00b426:	f8cb 2018 	str.w	r2, [fp, #24]
1a00b42a:	696a      	ldr	r2, [r5, #20]
1a00b42c:	f8cb 201c 	str.w	r2, [fp, #28]
1a00b430:	69a9      	ldr	r1, [r5, #24]
1a00b432:	f10b 0220 	add.w	r2, fp, #32
1a00b436:	3518      	adds	r5, #24
1a00b438:	e759      	b.n	1a00b2ee <_realloc_r+0x21a>
1a00b43a:	bf00      	nop
1a00b43c:	10000508 	.word	0x10000508

1a00b440 <frexp>:
1a00b440:	ec53 2b10 	vmov	r2, r3, d0
1a00b444:	b570      	push	{r4, r5, r6, lr}
1a00b446:	4e16      	ldr	r6, [pc, #88]	; (1a00b4a0 <frexp+0x60>)
1a00b448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00b44c:	2500      	movs	r5, #0
1a00b44e:	42b1      	cmp	r1, r6
1a00b450:	4604      	mov	r4, r0
1a00b452:	6005      	str	r5, [r0, #0]
1a00b454:	dc21      	bgt.n	1a00b49a <frexp+0x5a>
1a00b456:	ee10 6a10 	vmov	r6, s0
1a00b45a:	430e      	orrs	r6, r1
1a00b45c:	d01d      	beq.n	1a00b49a <frexp+0x5a>
1a00b45e:	4e11      	ldr	r6, [pc, #68]	; (1a00b4a4 <frexp+0x64>)
1a00b460:	401e      	ands	r6, r3
1a00b462:	4618      	mov	r0, r3
1a00b464:	b966      	cbnz	r6, 1a00b480 <frexp+0x40>
1a00b466:	4619      	mov	r1, r3
1a00b468:	2200      	movs	r2, #0
1a00b46a:	ee10 0a10 	vmov	r0, s0
1a00b46e:	4b0e      	ldr	r3, [pc, #56]	; (1a00b4a8 <frexp+0x68>)
1a00b470:	f7fa fb00 	bl	1a005a74 <__aeabi_dmul>
1a00b474:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a00b478:	4602      	mov	r2, r0
1a00b47a:	4608      	mov	r0, r1
1a00b47c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00b480:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a00b484:	1509      	asrs	r1, r1, #20
1a00b486:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00b48a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00b48e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a00b492:	4429      	add	r1, r5
1a00b494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a00b498:	6021      	str	r1, [r4, #0]
1a00b49a:	ec43 2b10 	vmov	d0, r2, r3
1a00b49e:	bd70      	pop	{r4, r5, r6, pc}
1a00b4a0:	7fefffff 	.word	0x7fefffff
1a00b4a4:	7ff00000 	.word	0x7ff00000
1a00b4a8:	43500000 	.word	0x43500000

1a00b4ac <strncpy>:
1a00b4ac:	b470      	push	{r4, r5, r6}
1a00b4ae:	ea40 0401 	orr.w	r4, r0, r1
1a00b4b2:	07a3      	lsls	r3, r4, #30
1a00b4b4:	d127      	bne.n	1a00b506 <strncpy+0x5a>
1a00b4b6:	2a03      	cmp	r2, #3
1a00b4b8:	d925      	bls.n	1a00b506 <strncpy+0x5a>
1a00b4ba:	460b      	mov	r3, r1
1a00b4bc:	4606      	mov	r6, r0
1a00b4be:	4619      	mov	r1, r3
1a00b4c0:	f853 5b04 	ldr.w	r5, [r3], #4
1a00b4c4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a00b4c8:	ea24 0405 	bic.w	r4, r4, r5
1a00b4cc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a00b4d0:	d106      	bne.n	1a00b4e0 <strncpy+0x34>
1a00b4d2:	3a04      	subs	r2, #4
1a00b4d4:	2a03      	cmp	r2, #3
1a00b4d6:	f846 5b04 	str.w	r5, [r6], #4
1a00b4da:	4619      	mov	r1, r3
1a00b4dc:	d8ef      	bhi.n	1a00b4be <strncpy+0x12>
1a00b4de:	b182      	cbz	r2, 1a00b502 <strncpy+0x56>
1a00b4e0:	4633      	mov	r3, r6
1a00b4e2:	780c      	ldrb	r4, [r1, #0]
1a00b4e4:	f803 4b01 	strb.w	r4, [r3], #1
1a00b4e8:	1e55      	subs	r5, r2, #1
1a00b4ea:	b174      	cbz	r4, 1a00b50a <strncpy+0x5e>
1a00b4ec:	4432      	add	r2, r6
1a00b4ee:	442e      	add	r6, r5
1a00b4f0:	e005      	b.n	1a00b4fe <strncpy+0x52>
1a00b4f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a00b4f6:	1af5      	subs	r5, r6, r3
1a00b4f8:	f803 4b01 	strb.w	r4, [r3], #1
1a00b4fc:	b12c      	cbz	r4, 1a00b50a <strncpy+0x5e>
1a00b4fe:	429a      	cmp	r2, r3
1a00b500:	d1f7      	bne.n	1a00b4f2 <strncpy+0x46>
1a00b502:	bc70      	pop	{r4, r5, r6}
1a00b504:	4770      	bx	lr
1a00b506:	4606      	mov	r6, r0
1a00b508:	e7e9      	b.n	1a00b4de <strncpy+0x32>
1a00b50a:	2d00      	cmp	r5, #0
1a00b50c:	d0f9      	beq.n	1a00b502 <strncpy+0x56>
1a00b50e:	441d      	add	r5, r3
1a00b510:	2200      	movs	r2, #0
1a00b512:	f803 2b01 	strb.w	r2, [r3], #1
1a00b516:	42ab      	cmp	r3, r5
1a00b518:	d1fb      	bne.n	1a00b512 <strncpy+0x66>
1a00b51a:	bc70      	pop	{r4, r5, r6}
1a00b51c:	4770      	bx	lr
1a00b51e:	bf00      	nop

1a00b520 <__sprint_r.part.0>:
1a00b520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00b524:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a00b526:	049c      	lsls	r4, r3, #18
1a00b528:	4693      	mov	fp, r2
1a00b52a:	d52d      	bpl.n	1a00b588 <__sprint_r.part.0+0x68>
1a00b52c:	6893      	ldr	r3, [r2, #8]
1a00b52e:	6812      	ldr	r2, [r2, #0]
1a00b530:	b343      	cbz	r3, 1a00b584 <__sprint_r.part.0+0x64>
1a00b532:	460e      	mov	r6, r1
1a00b534:	4607      	mov	r7, r0
1a00b536:	f102 0908 	add.w	r9, r2, #8
1a00b53a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00b53e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a00b542:	d015      	beq.n	1a00b570 <__sprint_r.part.0+0x50>
1a00b544:	3d04      	subs	r5, #4
1a00b546:	2400      	movs	r4, #0
1a00b548:	e001      	b.n	1a00b54e <__sprint_r.part.0+0x2e>
1a00b54a:	45a0      	cmp	r8, r4
1a00b54c:	d00e      	beq.n	1a00b56c <__sprint_r.part.0+0x4c>
1a00b54e:	4632      	mov	r2, r6
1a00b550:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a00b554:	4638      	mov	r0, r7
1a00b556:	f000 f8a9 	bl	1a00b6ac <_fputwc_r>
1a00b55a:	1c43      	adds	r3, r0, #1
1a00b55c:	f104 0401 	add.w	r4, r4, #1
1a00b560:	d1f3      	bne.n	1a00b54a <__sprint_r.part.0+0x2a>
1a00b562:	2300      	movs	r3, #0
1a00b564:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00b568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b56c:	f8db 3008 	ldr.w	r3, [fp, #8]
1a00b570:	f02a 0a03 	bic.w	sl, sl, #3
1a00b574:	eba3 030a 	sub.w	r3, r3, sl
1a00b578:	f8cb 3008 	str.w	r3, [fp, #8]
1a00b57c:	f109 0908 	add.w	r9, r9, #8
1a00b580:	2b00      	cmp	r3, #0
1a00b582:	d1da      	bne.n	1a00b53a <__sprint_r.part.0+0x1a>
1a00b584:	2000      	movs	r0, #0
1a00b586:	e7ec      	b.n	1a00b562 <__sprint_r.part.0+0x42>
1a00b588:	f7fe ffe0 	bl	1a00a54c <__sfvwrite_r>
1a00b58c:	2300      	movs	r3, #0
1a00b58e:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00b592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00b596:	bf00      	nop

1a00b598 <__sprint_r>:
1a00b598:	6893      	ldr	r3, [r2, #8]
1a00b59a:	b10b      	cbz	r3, 1a00b5a0 <__sprint_r+0x8>
1a00b59c:	f7ff bfc0 	b.w	1a00b520 <__sprint_r.part.0>
1a00b5a0:	b410      	push	{r4}
1a00b5a2:	4618      	mov	r0, r3
1a00b5a4:	6053      	str	r3, [r2, #4]
1a00b5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00b5aa:	4770      	bx	lr

1a00b5ac <_calloc_r>:
1a00b5ac:	b510      	push	{r4, lr}
1a00b5ae:	fb02 f101 	mul.w	r1, r2, r1
1a00b5b2:	f7fb fa0b 	bl	1a0069cc <_malloc_r>
1a00b5b6:	4604      	mov	r4, r0
1a00b5b8:	b168      	cbz	r0, 1a00b5d6 <_calloc_r+0x2a>
1a00b5ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00b5be:	f022 0203 	bic.w	r2, r2, #3
1a00b5c2:	3a04      	subs	r2, #4
1a00b5c4:	2a24      	cmp	r2, #36	; 0x24
1a00b5c6:	d818      	bhi.n	1a00b5fa <_calloc_r+0x4e>
1a00b5c8:	2a13      	cmp	r2, #19
1a00b5ca:	d806      	bhi.n	1a00b5da <_calloc_r+0x2e>
1a00b5cc:	4602      	mov	r2, r0
1a00b5ce:	2300      	movs	r3, #0
1a00b5d0:	e9c2 3300 	strd	r3, r3, [r2]
1a00b5d4:	6093      	str	r3, [r2, #8]
1a00b5d6:	4620      	mov	r0, r4
1a00b5d8:	bd10      	pop	{r4, pc}
1a00b5da:	2300      	movs	r3, #0
1a00b5dc:	2a1b      	cmp	r2, #27
1a00b5de:	e9c0 3300 	strd	r3, r3, [r0]
1a00b5e2:	d90f      	bls.n	1a00b604 <_calloc_r+0x58>
1a00b5e4:	2a24      	cmp	r2, #36	; 0x24
1a00b5e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00b5ea:	bf12      	itee	ne
1a00b5ec:	f100 0210 	addne.w	r2, r0, #16
1a00b5f0:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00b5f4:	f100 0218 	addeq.w	r2, r0, #24
1a00b5f8:	e7e9      	b.n	1a00b5ce <_calloc_r+0x22>
1a00b5fa:	2100      	movs	r1, #0
1a00b5fc:	f7fb fd38 	bl	1a007070 <memset>
1a00b600:	4620      	mov	r0, r4
1a00b602:	bd10      	pop	{r4, pc}
1a00b604:	f100 0208 	add.w	r2, r0, #8
1a00b608:	e7e1      	b.n	1a00b5ce <_calloc_r+0x22>
1a00b60a:	bf00      	nop

1a00b60c <__fputwc>:
1a00b60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00b610:	b082      	sub	sp, #8
1a00b612:	4680      	mov	r8, r0
1a00b614:	4689      	mov	r9, r1
1a00b616:	4614      	mov	r4, r2
1a00b618:	f000 f87a 	bl	1a00b710 <__locale_mb_cur_max>
1a00b61c:	2801      	cmp	r0, #1
1a00b61e:	d103      	bne.n	1a00b628 <__fputwc+0x1c>
1a00b620:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a00b624:	2bfe      	cmp	r3, #254	; 0xfe
1a00b626:	d933      	bls.n	1a00b690 <__fputwc+0x84>
1a00b628:	464a      	mov	r2, r9
1a00b62a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00b62e:	a901      	add	r1, sp, #4
1a00b630:	4640      	mov	r0, r8
1a00b632:	f000 f8e1 	bl	1a00b7f8 <_wcrtomb_r>
1a00b636:	1c42      	adds	r2, r0, #1
1a00b638:	4606      	mov	r6, r0
1a00b63a:	d02f      	beq.n	1a00b69c <__fputwc+0x90>
1a00b63c:	b320      	cbz	r0, 1a00b688 <__fputwc+0x7c>
1a00b63e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00b642:	2500      	movs	r5, #0
1a00b644:	f10d 0a04 	add.w	sl, sp, #4
1a00b648:	e009      	b.n	1a00b65e <__fputwc+0x52>
1a00b64a:	6823      	ldr	r3, [r4, #0]
1a00b64c:	1c5a      	adds	r2, r3, #1
1a00b64e:	6022      	str	r2, [r4, #0]
1a00b650:	f883 c000 	strb.w	ip, [r3]
1a00b654:	3501      	adds	r5, #1
1a00b656:	42b5      	cmp	r5, r6
1a00b658:	d216      	bcs.n	1a00b688 <__fputwc+0x7c>
1a00b65a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00b65e:	68a3      	ldr	r3, [r4, #8]
1a00b660:	3b01      	subs	r3, #1
1a00b662:	2b00      	cmp	r3, #0
1a00b664:	60a3      	str	r3, [r4, #8]
1a00b666:	daf0      	bge.n	1a00b64a <__fputwc+0x3e>
1a00b668:	69a7      	ldr	r7, [r4, #24]
1a00b66a:	42bb      	cmp	r3, r7
1a00b66c:	4661      	mov	r1, ip
1a00b66e:	4622      	mov	r2, r4
1a00b670:	4640      	mov	r0, r8
1a00b672:	db02      	blt.n	1a00b67a <__fputwc+0x6e>
1a00b674:	f1bc 0f0a 	cmp.w	ip, #10
1a00b678:	d1e7      	bne.n	1a00b64a <__fputwc+0x3e>
1a00b67a:	f000 f865 	bl	1a00b748 <__swbuf_r>
1a00b67e:	1c43      	adds	r3, r0, #1
1a00b680:	d1e8      	bne.n	1a00b654 <__fputwc+0x48>
1a00b682:	b002      	add	sp, #8
1a00b684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00b688:	4648      	mov	r0, r9
1a00b68a:	b002      	add	sp, #8
1a00b68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00b690:	fa5f fc89 	uxtb.w	ip, r9
1a00b694:	4606      	mov	r6, r0
1a00b696:	f88d c004 	strb.w	ip, [sp, #4]
1a00b69a:	e7d2      	b.n	1a00b642 <__fputwc+0x36>
1a00b69c:	89a3      	ldrh	r3, [r4, #12]
1a00b69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00b6a2:	81a3      	strh	r3, [r4, #12]
1a00b6a4:	b002      	add	sp, #8
1a00b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00b6aa:	bf00      	nop

1a00b6ac <_fputwc_r>:
1a00b6ac:	b530      	push	{r4, r5, lr}
1a00b6ae:	4605      	mov	r5, r0
1a00b6b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00b6b2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00b6b6:	07c0      	lsls	r0, r0, #31
1a00b6b8:	4614      	mov	r4, r2
1a00b6ba:	b083      	sub	sp, #12
1a00b6bc:	b29a      	uxth	r2, r3
1a00b6be:	d401      	bmi.n	1a00b6c4 <_fputwc_r+0x18>
1a00b6c0:	0590      	lsls	r0, r2, #22
1a00b6c2:	d51c      	bpl.n	1a00b6fe <_fputwc_r+0x52>
1a00b6c4:	0490      	lsls	r0, r2, #18
1a00b6c6:	d406      	bmi.n	1a00b6d6 <_fputwc_r+0x2a>
1a00b6c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00b6ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00b6ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00b6d2:	81a3      	strh	r3, [r4, #12]
1a00b6d4:	6662      	str	r2, [r4, #100]	; 0x64
1a00b6d6:	4628      	mov	r0, r5
1a00b6d8:	4622      	mov	r2, r4
1a00b6da:	f7ff ff97 	bl	1a00b60c <__fputwc>
1a00b6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00b6e0:	07da      	lsls	r2, r3, #31
1a00b6e2:	4605      	mov	r5, r0
1a00b6e4:	d402      	bmi.n	1a00b6ec <_fputwc_r+0x40>
1a00b6e6:	89a3      	ldrh	r3, [r4, #12]
1a00b6e8:	059b      	lsls	r3, r3, #22
1a00b6ea:	d502      	bpl.n	1a00b6f2 <_fputwc_r+0x46>
1a00b6ec:	4628      	mov	r0, r5
1a00b6ee:	b003      	add	sp, #12
1a00b6f0:	bd30      	pop	{r4, r5, pc}
1a00b6f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00b6f4:	f7fb f968 	bl	1a0069c8 <__retarget_lock_release_recursive>
1a00b6f8:	4628      	mov	r0, r5
1a00b6fa:	b003      	add	sp, #12
1a00b6fc:	bd30      	pop	{r4, r5, pc}
1a00b6fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00b700:	9101      	str	r1, [sp, #4]
1a00b702:	f7fb f95f 	bl	1a0069c4 <__retarget_lock_acquire_recursive>
1a00b706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00b70a:	9901      	ldr	r1, [sp, #4]
1a00b70c:	b29a      	uxth	r2, r3
1a00b70e:	e7d9      	b.n	1a00b6c4 <_fputwc_r+0x18>

1a00b710 <__locale_mb_cur_max>:
1a00b710:	4b01      	ldr	r3, [pc, #4]	; (1a00b718 <__locale_mb_cur_max+0x8>)
1a00b712:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a00b716:	4770      	bx	lr
1a00b718:	10000918 	.word	0x10000918

1a00b71c <__ascii_mbtowc>:
1a00b71c:	b082      	sub	sp, #8
1a00b71e:	b149      	cbz	r1, 1a00b734 <__ascii_mbtowc+0x18>
1a00b720:	b15a      	cbz	r2, 1a00b73a <__ascii_mbtowc+0x1e>
1a00b722:	b16b      	cbz	r3, 1a00b740 <__ascii_mbtowc+0x24>
1a00b724:	7813      	ldrb	r3, [r2, #0]
1a00b726:	600b      	str	r3, [r1, #0]
1a00b728:	7812      	ldrb	r2, [r2, #0]
1a00b72a:	1c10      	adds	r0, r2, #0
1a00b72c:	bf18      	it	ne
1a00b72e:	2001      	movne	r0, #1
1a00b730:	b002      	add	sp, #8
1a00b732:	4770      	bx	lr
1a00b734:	a901      	add	r1, sp, #4
1a00b736:	2a00      	cmp	r2, #0
1a00b738:	d1f3      	bne.n	1a00b722 <__ascii_mbtowc+0x6>
1a00b73a:	4610      	mov	r0, r2
1a00b73c:	b002      	add	sp, #8
1a00b73e:	4770      	bx	lr
1a00b740:	f06f 0001 	mvn.w	r0, #1
1a00b744:	e7f4      	b.n	1a00b730 <__ascii_mbtowc+0x14>
1a00b746:	bf00      	nop

1a00b748 <__swbuf_r>:
1a00b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00b74a:	460d      	mov	r5, r1
1a00b74c:	4614      	mov	r4, r2
1a00b74e:	4606      	mov	r6, r0
1a00b750:	b110      	cbz	r0, 1a00b758 <__swbuf_r+0x10>
1a00b752:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00b754:	2b00      	cmp	r3, #0
1a00b756:	d043      	beq.n	1a00b7e0 <__swbuf_r+0x98>
1a00b758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00b75c:	69a3      	ldr	r3, [r4, #24]
1a00b75e:	60a3      	str	r3, [r4, #8]
1a00b760:	b291      	uxth	r1, r2
1a00b762:	0708      	lsls	r0, r1, #28
1a00b764:	d51b      	bpl.n	1a00b79e <__swbuf_r+0x56>
1a00b766:	6923      	ldr	r3, [r4, #16]
1a00b768:	b1cb      	cbz	r3, 1a00b79e <__swbuf_r+0x56>
1a00b76a:	b2ed      	uxtb	r5, r5
1a00b76c:	0489      	lsls	r1, r1, #18
1a00b76e:	462f      	mov	r7, r5
1a00b770:	d522      	bpl.n	1a00b7b8 <__swbuf_r+0x70>
1a00b772:	6822      	ldr	r2, [r4, #0]
1a00b774:	6961      	ldr	r1, [r4, #20]
1a00b776:	1ad3      	subs	r3, r2, r3
1a00b778:	4299      	cmp	r1, r3
1a00b77a:	dd29      	ble.n	1a00b7d0 <__swbuf_r+0x88>
1a00b77c:	3301      	adds	r3, #1
1a00b77e:	68a1      	ldr	r1, [r4, #8]
1a00b780:	1c50      	adds	r0, r2, #1
1a00b782:	3901      	subs	r1, #1
1a00b784:	60a1      	str	r1, [r4, #8]
1a00b786:	6020      	str	r0, [r4, #0]
1a00b788:	7015      	strb	r5, [r2, #0]
1a00b78a:	6962      	ldr	r2, [r4, #20]
1a00b78c:	429a      	cmp	r2, r3
1a00b78e:	d02a      	beq.n	1a00b7e6 <__swbuf_r+0x9e>
1a00b790:	89a3      	ldrh	r3, [r4, #12]
1a00b792:	07db      	lsls	r3, r3, #31
1a00b794:	d501      	bpl.n	1a00b79a <__swbuf_r+0x52>
1a00b796:	2d0a      	cmp	r5, #10
1a00b798:	d025      	beq.n	1a00b7e6 <__swbuf_r+0x9e>
1a00b79a:	4638      	mov	r0, r7
1a00b79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00b79e:	4621      	mov	r1, r4
1a00b7a0:	4630      	mov	r0, r6
1a00b7a2:	f7fd fead 	bl	1a009500 <__swsetup_r>
1a00b7a6:	bb20      	cbnz	r0, 1a00b7f2 <__swbuf_r+0xaa>
1a00b7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00b7ac:	6923      	ldr	r3, [r4, #16]
1a00b7ae:	b291      	uxth	r1, r2
1a00b7b0:	b2ed      	uxtb	r5, r5
1a00b7b2:	0489      	lsls	r1, r1, #18
1a00b7b4:	462f      	mov	r7, r5
1a00b7b6:	d4dc      	bmi.n	1a00b772 <__swbuf_r+0x2a>
1a00b7b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00b7ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00b7be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00b7c2:	81a2      	strh	r2, [r4, #12]
1a00b7c4:	6822      	ldr	r2, [r4, #0]
1a00b7c6:	6661      	str	r1, [r4, #100]	; 0x64
1a00b7c8:	6961      	ldr	r1, [r4, #20]
1a00b7ca:	1ad3      	subs	r3, r2, r3
1a00b7cc:	4299      	cmp	r1, r3
1a00b7ce:	dcd5      	bgt.n	1a00b77c <__swbuf_r+0x34>
1a00b7d0:	4621      	mov	r1, r4
1a00b7d2:	4630      	mov	r0, r6
1a00b7d4:	f7fa fecc 	bl	1a006570 <_fflush_r>
1a00b7d8:	b958      	cbnz	r0, 1a00b7f2 <__swbuf_r+0xaa>
1a00b7da:	6822      	ldr	r2, [r4, #0]
1a00b7dc:	2301      	movs	r3, #1
1a00b7de:	e7ce      	b.n	1a00b77e <__swbuf_r+0x36>
1a00b7e0:	f7fa ff22 	bl	1a006628 <__sinit>
1a00b7e4:	e7b8      	b.n	1a00b758 <__swbuf_r+0x10>
1a00b7e6:	4621      	mov	r1, r4
1a00b7e8:	4630      	mov	r0, r6
1a00b7ea:	f7fa fec1 	bl	1a006570 <_fflush_r>
1a00b7ee:	2800      	cmp	r0, #0
1a00b7f0:	d0d3      	beq.n	1a00b79a <__swbuf_r+0x52>
1a00b7f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00b7f6:	e7d0      	b.n	1a00b79a <__swbuf_r+0x52>

1a00b7f8 <_wcrtomb_r>:
1a00b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00b7fa:	4c0b      	ldr	r4, [pc, #44]	; (1a00b828 <_wcrtomb_r+0x30>)
1a00b7fc:	b085      	sub	sp, #20
1a00b7fe:	4606      	mov	r6, r0
1a00b800:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00b804:	461f      	mov	r7, r3
1a00b806:	b121      	cbz	r1, 1a00b812 <_wcrtomb_r+0x1a>
1a00b808:	47a0      	blx	r4
1a00b80a:	1c43      	adds	r3, r0, #1
1a00b80c:	d006      	beq.n	1a00b81c <_wcrtomb_r+0x24>
1a00b80e:	b005      	add	sp, #20
1a00b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00b812:	460a      	mov	r2, r1
1a00b814:	a901      	add	r1, sp, #4
1a00b816:	47a0      	blx	r4
1a00b818:	1c43      	adds	r3, r0, #1
1a00b81a:	d1f8      	bne.n	1a00b80e <_wcrtomb_r+0x16>
1a00b81c:	2200      	movs	r2, #0
1a00b81e:	238a      	movs	r3, #138	; 0x8a
1a00b820:	603a      	str	r2, [r7, #0]
1a00b822:	6033      	str	r3, [r6, #0]
1a00b824:	b005      	add	sp, #20
1a00b826:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00b828:	10000918 	.word	0x10000918

1a00b82c <__ascii_wctomb>:
1a00b82c:	b149      	cbz	r1, 1a00b842 <__ascii_wctomb+0x16>
1a00b82e:	2aff      	cmp	r2, #255	; 0xff
1a00b830:	d802      	bhi.n	1a00b838 <__ascii_wctomb+0xc>
1a00b832:	700a      	strb	r2, [r1, #0]
1a00b834:	2001      	movs	r0, #1
1a00b836:	4770      	bx	lr
1a00b838:	238a      	movs	r3, #138	; 0x8a
1a00b83a:	6003      	str	r3, [r0, #0]
1a00b83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00b840:	4770      	bx	lr
1a00b842:	4608      	mov	r0, r1
1a00b844:	4770      	bx	lr
1a00b846:	bf00      	nop

1a00b848 <__aeabi_dcmpun>:
1a00b848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00b84c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00b850:	d102      	bne.n	1a00b858 <__aeabi_dcmpun+0x10>
1a00b852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00b856:	d10a      	bne.n	1a00b86e <__aeabi_dcmpun+0x26>
1a00b858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00b85c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00b860:	d102      	bne.n	1a00b868 <__aeabi_dcmpun+0x20>
1a00b862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00b866:	d102      	bne.n	1a00b86e <__aeabi_dcmpun+0x26>
1a00b868:	f04f 0000 	mov.w	r0, #0
1a00b86c:	4770      	bx	lr
1a00b86e:	f04f 0001 	mov.w	r0, #1
1a00b872:	4770      	bx	lr

1a00b874 <__aeabi_d2iz>:
1a00b874:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a00b878:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00b87c:	d215      	bcs.n	1a00b8aa <__aeabi_d2iz+0x36>
1a00b87e:	d511      	bpl.n	1a00b8a4 <__aeabi_d2iz+0x30>
1a00b880:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00b884:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a00b888:	d912      	bls.n	1a00b8b0 <__aeabi_d2iz+0x3c>
1a00b88a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00b88e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00b892:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00b896:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00b89a:	fa23 f002 	lsr.w	r0, r3, r2
1a00b89e:	bf18      	it	ne
1a00b8a0:	4240      	negne	r0, r0
1a00b8a2:	4770      	bx	lr
1a00b8a4:	f04f 0000 	mov.w	r0, #0
1a00b8a8:	4770      	bx	lr
1a00b8aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00b8ae:	d105      	bne.n	1a00b8bc <__aeabi_d2iz+0x48>
1a00b8b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00b8b4:	bf08      	it	eq
1a00b8b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00b8ba:	4770      	bx	lr
1a00b8bc:	f04f 0000 	mov.w	r0, #0
1a00b8c0:	4770      	bx	lr
1a00b8c2:	bf00      	nop
1a00b8c4:	6f746f4d 	.word	0x6f746f4d
1a00b8c8:	20736572 	.word	0x20736572
1a00b8cc:	20202020 	.word	0x20202020
1a00b8d0:	20202020 	.word	0x20202020
1a00b8d4:	3e2d2d20 	.word	0x3e2d2d20
1a00b8d8:	696e6920 	.word	0x696e6920
1a00b8dc:	6c616963 	.word	0x6c616963
1a00b8e0:	64617a69 	.word	0x64617a69
1a00b8e4:	6320736f 	.word	0x6320736f
1a00b8e8:	6572726f 	.word	0x6572726f
1a00b8ec:	6d617463 	.word	0x6d617463
1a00b8f0:	65746e65 	.word	0x65746e65
1a00b8f4:	ff000d2e 	.word	0xff000d2e
1a00b8f8:	6b736174 	.word	0x6b736174
1a00b8fc:	7261755f 	.word	0x7261755f
1a00b900:	33325f74 	.word	0x33325f74
1a00b904:	00000032 	.word	0x00000032
1a00b908:	54524155 	.word	0x54524155
1a00b90c:	20323332 	.word	0x20323332
1a00b910:	20202020 	.word	0x20202020
1a00b914:	2d202020 	.word	0x2d202020
1a00b918:	69203e2d 	.word	0x69203e2d
1a00b91c:	6963696e 	.word	0x6963696e
1a00b920:	7a696c61 	.word	0x7a696c61
1a00b924:	20616461 	.word	0x20616461
1a00b928:	72726f63 	.word	0x72726f63
1a00b92c:	61746365 	.word	0x61746365
1a00b930:	746e656d 	.word	0x746e656d
1a00b934:	000d2e65 	.word	0x000d2e65
1a00b938:	6573614c 	.word	0x6573614c
1a00b93c:	20202072 	.word	0x20202072
1a00b940:	20202020 	.word	0x20202020
1a00b944:	20202020 	.word	0x20202020
1a00b948:	2d202020 	.word	0x2d202020
1a00b94c:	69203e2d 	.word	0x69203e2d
1a00b950:	6963696e 	.word	0x6963696e
1a00b954:	7a696c61 	.word	0x7a696c61
1a00b958:	206f6461 	.word	0x206f6461
1a00b95c:	72726f63 	.word	0x72726f63
1a00b960:	61746365 	.word	0x61746365
1a00b964:	746e656d 	.word	0x746e656d
1a00b968:	000d2e65 	.word	0x000d2e65
1a00b96c:	4553414c 	.word	0x4553414c
1a00b970:	45445f52 	.word	0x45445f52
1a00b974:	00000052 	.word	0x00000052
1a00b978:	4553414c 	.word	0x4553414c
1a00b97c:	5a495f52 	.word	0x5a495f52
1a00b980:	ffff0051 	.word	0xffff0051
1a00b984:	6b736174 	.word	0x6b736174
1a00b988:	6d75625f 	.word	0x6d75625f
1a00b98c:	5f726570 	.word	0x5f726570
1a00b990:	6e6f7266 	.word	0x6e6f7266
1a00b994:	00000074 	.word	0x00000074
1a00b998:	6b736174 	.word	0x6b736174
1a00b99c:	6d75625f 	.word	0x6d75625f
1a00b9a0:	5f726570 	.word	0x5f726570
1a00b9a4:	6b636162 	.word	0x6b636162
1a00b9a8:	00000000 	.word	0x00000000
1a00b9ac:	706d7542 	.word	0x706d7542
1a00b9b0:	73277265 	.word	0x73277265
1a00b9b4:	20202020 	.word	0x20202020
1a00b9b8:	20202020 	.word	0x20202020
1a00b9bc:	203e2d2d 	.word	0x203e2d2d
1a00b9c0:	63696e69 	.word	0x63696e69
1a00b9c4:	696c6169 	.word	0x696c6169
1a00b9c8:	6f64617a 	.word	0x6f64617a
1a00b9cc:	726f6320 	.word	0x726f6320
1a00b9d0:	74636572 	.word	0x74636572
1a00b9d4:	6e656d61 	.word	0x6e656d61
1a00b9d8:	0d2e6574 	.word	0x0d2e6574
1a00b9dc:	ffffff00 	.word	0xffffff00
1a00b9e0:	6b736174 	.word	0x6b736174
1a00b9e4:	64656c5f 	.word	0x64656c5f
1a00b9e8:	00000031 	.word	0x00000031
1a00b9ec:	6b736174 	.word	0x6b736174
1a00b9f0:	64656c5f 	.word	0x64656c5f
1a00b9f4:	00000032 	.word	0x00000032
1a00b9f8:	2744454c 	.word	0x2744454c
1a00b9fc:	20202073 	.word	0x20202073
1a00ba00:	20202020 	.word	0x20202020
1a00ba04:	20202020 	.word	0x20202020
1a00ba08:	2d202020 	.word	0x2d202020
1a00ba0c:	69203e2d 	.word	0x69203e2d
1a00ba10:	6963696e 	.word	0x6963696e
1a00ba14:	7a696c61 	.word	0x7a696c61
1a00ba18:	736f6461 	.word	0x736f6461
1a00ba1c:	726f6320 	.word	0x726f6320
1a00ba20:	74636572 	.word	0x74636572
1a00ba24:	6e656d61 	.word	0x6e656d61
1a00ba28:	0d2e6574 	.word	0x0d2e6574
1a00ba2c:	ffffff00 	.word	0xffffff00
1a00ba30:	20554d49 	.word	0x20554d49
1a00ba34:	3955504d 	.word	0x3955504d
1a00ba38:	2d303532 	.word	0x2d303532
1a00ba3c:	69203e2d 	.word	0x69203e2d
1a00ba40:	6963696e 	.word	0x6963696e
1a00ba44:	7a696c61 	.word	0x7a696c61
1a00ba48:	206f6461 	.word	0x206f6461
1a00ba4c:	66204f4e 	.word	0x66204f4e
1a00ba50:	69206575 	.word	0x69206575
1a00ba54:	6963696e 	.word	0x6963696e
1a00ba58:	7a696c61 	.word	0x7a696c61
1a00ba5c:	2e616461 	.word	0x2e616461
1a00ba60:	0000000d 	.word	0x0000000d
1a00ba64:	20554d49 	.word	0x20554d49
1a00ba68:	3955504d 	.word	0x3955504d
1a00ba6c:	2d303532 	.word	0x2d303532
1a00ba70:	69203e2d 	.word	0x69203e2d
1a00ba74:	6963696e 	.word	0x6963696e
1a00ba78:	7a696c61 	.word	0x7a696c61
1a00ba7c:	206f6461 	.word	0x206f6461
1a00ba80:	72726f63 	.word	0x72726f63
1a00ba84:	61746365 	.word	0x61746365
1a00ba88:	746e656d 	.word	0x746e656d
1a00ba8c:	000d2e65 	.word	0x000d2e65
1a00ba90:	6b736174 	.word	0x6b736174
1a00ba94:	75706d5f 	.word	0x75706d5f
1a00ba98:	30353239 	.word	0x30353239
1a00ba9c:	ffffff00 	.word	0xffffff00
1a00baa0:	6b736174 	.word	0x6b736174
1a00baa4:	64636c5f 	.word	0x64636c5f
1a00baa8:	00000000 	.word	0x00000000
1a00baac:	2044434c 	.word	0x2044434c
1a00bab0:	20202020 	.word	0x20202020
1a00bab4:	20202020 	.word	0x20202020
1a00bab8:	20202020 	.word	0x20202020
1a00babc:	2d202020 	.word	0x2d202020
1a00bac0:	69203e2d 	.word	0x69203e2d
1a00bac4:	6963696e 	.word	0x6963696e
1a00bac8:	7a696c61 	.word	0x7a696c61
1a00bacc:	206f6461 	.word	0x206f6461
1a00bad0:	72726f63 	.word	0x72726f63
1a00bad4:	61746365 	.word	0x61746365
1a00bad8:	746e656d 	.word	0x746e656d
1a00badc:	000d2e65 	.word	0x000d2e65
1a00bae0:	4553414c 	.word	0x4553414c
1a00bae4:	45445f52 	.word	0x45445f52
1a00bae8:	4e4f3d52 	.word	0x4e4f3d52
1a00baec:	00000000 	.word	0x00000000
1a00baf0:	4553414c 	.word	0x4553414c
1a00baf4:	45445f52 	.word	0x45445f52
1a00baf8:	4e4f3d52 	.word	0x4e4f3d52
1a00bafc:	0000000a 	.word	0x0000000a
1a00bb00:	4553414c 	.word	0x4553414c
1a00bb04:	45445f52 	.word	0x45445f52
1a00bb08:	464f3d52 	.word	0x464f3d52
1a00bb0c:	00000046 	.word	0x00000046
1a00bb10:	4553414c 	.word	0x4553414c
1a00bb14:	45445f52 	.word	0x45445f52
1a00bb18:	464f3d52 	.word	0x464f3d52
1a00bb1c:	00000a46 	.word	0x00000a46
1a00bb20:	4553414c 	.word	0x4553414c
1a00bb24:	5a495f52 	.word	0x5a495f52
1a00bb28:	4e4f3d51 	.word	0x4e4f3d51
1a00bb2c:	00000000 	.word	0x00000000
1a00bb30:	4553414c 	.word	0x4553414c
1a00bb34:	5a495f52 	.word	0x5a495f52
1a00bb38:	4e4f3d51 	.word	0x4e4f3d51
1a00bb3c:	0000000a 	.word	0x0000000a
1a00bb40:	4553414c 	.word	0x4553414c
1a00bb44:	5a495f52 	.word	0x5a495f52
1a00bb48:	464f3d51 	.word	0x464f3d51
1a00bb4c:	00000046 	.word	0x00000046
1a00bb50:	4553414c 	.word	0x4553414c
1a00bb54:	5a495f52 	.word	0x5a495f52
1a00bb58:	464f3d51 	.word	0x464f3d51
1a00bb5c:	00000a46 	.word	0x00000a46
1a00bb60:	5f4d5750 	.word	0x5f4d5750
1a00bb64:	00003d30 	.word	0x00003d30
1a00bb68:	5f4d5750 	.word	0x5f4d5750
1a00bb6c:	63253d30 	.word	0x63253d30
1a00bb70:	0000000a 	.word	0x0000000a
1a00bb74:	5f4d5750 	.word	0x5f4d5750
1a00bb78:	00003d31 	.word	0x00003d31
1a00bb7c:	5f4d5750 	.word	0x5f4d5750
1a00bb80:	63253d31 	.word	0x63253d31
1a00bb84:	0000000a 	.word	0x0000000a
1a00bb88:	504f5453 	.word	0x504f5453
1a00bb8c:	544f4d5f 	.word	0x544f4d5f
1a00bb90:	00000000 	.word	0x00000000
1a00bb94:	4f544f4d 	.word	0x4f544f4d
1a00bb98:	54535f52 	.word	0x54535f52
1a00bb9c:	000a504f 	.word	0x000a504f
1a00bba0:	4f544f4d 	.word	0x4f544f4d
1a00bba4:	54535f52 	.word	0x54535f52
1a00bba8:	0000504f 	.word	0x0000504f
1a00bbac:	54534554 	.word	0x54534554
1a00bbb0:	4d55425f 	.word	0x4d55425f
1a00bbb4:	53524550 	.word	0x53524550
1a00bbb8:	00000000 	.word	0x00000000
1a00bbbc:	54534554 	.word	0x54534554
1a00bbc0:	4d55425f 	.word	0x4d55425f
1a00bbc4:	53524550 	.word	0x53524550
1a00bbc8:	0000003d 	.word	0x0000003d
1a00bbcc:	616d6f43 	.word	0x616d6f43
1a00bbd0:	206f646e 	.word	0x206f646e
1a00bbd4:	72206f6e 	.word	0x72206f6e
1a00bbd8:	6e6f6365 	.word	0x6e6f6365
1a00bbdc:	6469636f 	.word	0x6469636f
1a00bbe0:	ffff006f 	.word	0xffff006f
1a00bbe4:	6b736174 	.word	0x6b736174
1a00bbe8:	626f725f 	.word	0x626f725f
1a00bbec:	ff00746f 	.word	0xff00746f
1a00bbf0:	7778797a 	.word	0x7778797a
1a00bbf4:	73747576 	.word	0x73747576
1a00bbf8:	6f707172 	.word	0x6f707172
1a00bbfc:	6b6c6d6e 	.word	0x6b6c6d6e
1a00bc00:	6768696a 	.word	0x6768696a
1a00bc04:	63646566 	.word	0x63646566
1a00bc08:	38396162 	.word	0x38396162
1a00bc0c:	34353637 	.word	0x34353637
1a00bc10:	30313233 	.word	0x30313233
1a00bc14:	34333231 	.word	0x34333231
1a00bc18:	38373635 	.word	0x38373635
1a00bc1c:	63626139 	.word	0x63626139
1a00bc20:	67666564 	.word	0x67666564
1a00bc24:	6b6a6968 	.word	0x6b6a6968
1a00bc28:	6f6e6d6c 	.word	0x6f6e6d6c
1a00bc2c:	73727170 	.word	0x73727170
1a00bc30:	77767574 	.word	0x77767574
1a00bc34:	007a7978 	.word	0x007a7978
1a00bc38:	4543200a 	.word	0x4543200a
1a00bc3c:	462d4553 	.word	0x462d4553
1a00bc40:	41425549 	.word	0x41425549
1a00bc44:	502e542d 	.word	0x502e542d
1a00bc48:	6c6f462e 	.word	0x6c6f462e
1a00bc4c:	206f6e69 	.word	0x206f6e69
1a00bc50:	ffffff00 	.word	0xffffff00
1a00bc54:	6c6c614d 	.word	0x6c6c614d
1a00bc58:	4620636f 	.word	0x4620636f
1a00bc5c:	656c6961 	.word	0x656c6961
1a00bc60:	6f482064 	.word	0x6f482064
1a00bc64:	00216b6f 	.word	0x00216b6f
1a00bc68:	6c707041 	.word	0x6c707041
1a00bc6c:	74616369 	.word	0x74616369
1a00bc70:	206e6f69 	.word	0x206e6f69
1a00bc74:	6c6c614d 	.word	0x6c6c614d
1a00bc78:	4620636f 	.word	0x4620636f
1a00bc7c:	656c6961 	.word	0x656c6961
1a00bc80:	6f482064 	.word	0x6f482064
1a00bc84:	0d216b6f 	.word	0x0d216b6f
1a00bc88:	00000000 	.word	0x00000000
1a00bc8c:	7362696c 	.word	0x7362696c
1a00bc90:	6572662f 	.word	0x6572662f
1a00bc94:	6f747265 	.word	0x6f747265
1a00bc98:	6f732f73 	.word	0x6f732f73
1a00bc9c:	65637275 	.word	0x65637275
1a00bca0:	6f6f682f 	.word	0x6f6f682f
1a00bca4:	632e736b 	.word	0x632e736b
1a00bca8:	ffffff00 	.word	0xffffff00
1a00bcac:	70410a0d 	.word	0x70410a0d
1a00bcb0:	63696c70 	.word	0x63696c70
1a00bcb4:	6f697461 	.word	0x6f697461
1a00bcb8:	7453206e 	.word	0x7453206e
1a00bcbc:	206b6361 	.word	0x206b6361
1a00bcc0:	7265764f 	.word	0x7265764f
1a00bcc4:	776f6c66 	.word	0x776f6c66
1a00bcc8:	6f202121 	.word	0x6f202121
1a00bccc:	6154206e 	.word	0x6154206e
1a00bcd0:	203a6b73 	.word	0x203a6b73
1a00bcd4:	0a0d7325 	.word	0x0a0d7325
1a00bcd8:	ffffff00 	.word	0xffffff00
1a00bcdc:	41760a0d 	.word	0x41760a0d
1a00bce0:	72657373 	.word	0x72657373
1a00bce4:	6c614374 	.word	0x6c614374
1a00bce8:	2864656c 	.word	0x2864656c
1a00bcec:	200a0d29 	.word	0x200a0d29
1a00bcf0:	4c4c2020 	.word	0x4c4c2020
1a00bcf4:	20656e69 	.word	0x20656e69
1a00bcf8:	626d754e 	.word	0x626d754e
1a00bcfc:	3d207265 	.word	0x3d207265
1a00bd00:	0d642520 	.word	0x0d642520
1a00bd04:	2020200a 	.word	0x2020200a
1a00bd08:	656c6946 	.word	0x656c6946
1a00bd0c:	6d614e20 	.word	0x6d614e20
1a00bd10:	203d2065 	.word	0x203d2065
1a00bd14:	0a0d7325 	.word	0x0a0d7325
1a00bd18:	ff000a0d 	.word	0xff000a0d
1a00bd1c:	454c4449 	.word	0x454c4449
1a00bd20:	ffffff00 	.word	0xffffff00
1a00bd24:	51726d54 	.word	0x51726d54
1a00bd28:	ffffff00 	.word	0xffffff00
1a00bd2c:	20726d54 	.word	0x20726d54
1a00bd30:	00637653 	.word	0x00637653

1a00bd34 <ExtRateIn>:
1a00bd34:	00000000                                ....

1a00bd38 <GpioButtons>:
1a00bd38:	08000400 09010900                       ........

1a00bd40 <GpioLeds>:
1a00bd40:	01050005 0e000205 0c010b01              ............

1a00bd4c <GpioPorts>:
1a00bd4c:	03030003 0f050403 05031005 07030603     ................
1a00bd5c:	ffff0802                                ....

1a00bd60 <OscRateIn>:
1a00bd60:	00b71b00                                ....

1a00bd64 <InitClkStates>:
1a00bd64:	01010f01                                ....

1a00bd68 <pinmuxing>:
1a00bd68:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00bd78:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00bd88:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00bd98:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00bda8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00bdb8:	00d50301 00d50401 00160107 00560207     ..............V.
1a00bdc8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00bdd8:	00570206                                ..W.

1a00bddc <UART_BClock>:
1a00bddc:	01a201c2 01620182                       ......b.

1a00bde4 <UART_PClock>:
1a00bde4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00bdf4:	ffff00ff                                ....

1a00bdf8 <periph_to_base>:
1a00bdf8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00be08:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00be18:	000100e0 01000100 01200003 00060120     .......... . ...
1a00be28:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00be38:	01820013 00120182 01a201a2 01c20011     ................
1a00be48:	001001c2 01e201e2 0202000f 000e0202     ................
1a00be58:	02220222 0223000d 001c0223              "."...#.#...

1a00be64 <InitClkStates>:
1a00be64:	00010100 00010909 0001090a 01010701     ................
1a00be74:	00010902 00010906 0101090c 0001090d     ................
1a00be84:	0001090e 0001090f 00010910 00010911     ................
1a00be94:	00010912 00010913 00011114 00011119     ................
1a00bea4:	0001111a 0001111b                       ........

1a00beac <SCTdataList>:
1a00beac:	01040204 03040a02 0b020c02 0c060506     ................
1a00bebc:	04010301 00000501 04070507              ............

1a00bec8 <lpcUarts>:
1a00bec8:	40081000 06020406 00180205 40081000     ...@...........@
1a00bed8:	09070509 00180706 40082000 00000000     ......... .@....
1a00bee8:	00190000 400c1000 07060107 001a0602     .......@........
1a00bef8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00bf08:	02020302 001b0204                       ........

1a00bf10 <pwmMap>:
1a00bf10:	000a0c01 02070d03 ff060405              ............

1a00bf1c <gpioPinsInit>:
1a00bf1c:	02000104 00050701 05010d03 04080100     ................
1a00bf2c:	02020002 02000304 00000403 04070002     ................
1a00bf3c:	030c0300 09050402 05040103 04030208     ................
1a00bf4c:	04020305 06040504 0802000c 03000b06     ................
1a00bf5c:	00090607 07060503 060f0504 03030004     ................
1a00bf6c:	02000404 00050404 06040502 04060200     ................
1a00bf7c:	0c050408 05040a04 0003010e 14010a00     ................
1a00bf8c:	010f0000 0d000012 00001101 0010010c     ................
1a00bf9c:	07070300 000f0300 01000001 00000000     ................
1a00bfac:	000a0600 08060603 06100504 04030005     ................
1a00bfbc:	03000106 04090400 04010d05 010b0000     ................
1a00bfcc:	0200000f 00000001 00010104 02010800     ................
1a00bfdc:	01090000 09010006 05040002 04010200     ................
1a00bfec:	02020105 02020504 0e00000a 01000b02     ................
1a00bffc:	000c020b ffff0c01 d494c080              ............

1a00c008 <ultrasonicSensorsIrqMap>:
1a00c008:	ff020100                                ....

1a00c00c <_ctype_>:
1a00c00c:	20202000 20202020 28282020 20282828     .         ((((( 
1a00c01c:	20202020 20202020 20202020 20202020                     
1a00c02c:	10108820 10101010 10101010 10101010      ...............
1a00c03c:	04040410 04040404 10040404 10101010     ................
1a00c04c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a00c05c:	01010101 01010101 01010101 10101010     ................
1a00c06c:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a00c07c:	02020202 02020202 02020202 10101010     ................
1a00c08c:	00000020 00000000 00000000 00000000      ...............
	...
1a00c10c:	ffffff00 00464e49 00666e69 004e414e     ....INF.inf.NAN.
1a00c11c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
1a00c12c:	46454443 00000000 33323130 37363534     CDEF....01234567
1a00c13c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
1a00c14c:	0000296c ffff0030                       l)..0...

1a00c154 <blanks.8693>:
1a00c154:	20202020 20202020 20202020 20202020                     

1a00c164 <zeroes.8694>:
1a00c164:	30303030 30303030 30303030 30303030     0000000000000000
1a00c174:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....
1a00c184:	ffffffff                                ....

1a00c188 <__mprec_bigtens>:
1a00c188:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00c198:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00c1a8:	7f73bf3c 75154fdd                       <.s..O.u

1a00c1b0 <__mprec_tens>:
1a00c1b0:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00c1c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00c1d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00c1e0:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00c1f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00c200:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00c210:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00c220:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00c230:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00c240:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00c250:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00c260:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00c270:	79d99db4 44ea7843                       ...yCx.D

1a00c278 <p05.7442>:
1a00c278:	00000005 00000019 0000007d 00000043     ........}...C...
1a00c288:	49534f50 ffff0058 0000002e              POSIX.......
